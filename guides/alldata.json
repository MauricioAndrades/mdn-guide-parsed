[
   {
      "description": "Contains Prefix Selector [name|='value']",
      "href": "https://api.jquery.com/attribute-contains-prefix-selector/"
    },
    {
      "description": "Contains Selector [name*='value']",
      "href": "https://api.jquery.com/attribute-contains-selector/"
    },
    {
      "description": "Contains Word Selector [name~='value']",
      "href": "https://api.jquery.com/attribute-contains-word-selector/"
    },
    {
      "description": "Ends With Selector [name$='value']",
      "href": "https://api.jquery.com/attribute-ends-with-selector/"
    },
    {
      "description": "Equals Selector [name='value']",
      "href": "https://api.jquery.com/attribute-equals-selector/"
    },
    {
      "description": "Not Equal Selector [name!='value']",
      "href": "https://api.jquery.com/attribute-not-equal-selector/"
    },
    {
      "description": "Starts With Selector [name^='value']",
      "href": "https://api.jquery.com/attribute-starts-with-selector/"
    },
    {
      "description": "Permalink to Has Attribute Selector [name]",
      "href": "https://api.jquery.com/has-attribute-selector/"
    },
    {
      "description": "Permalink to Multiple Attribute Selector [name='value'][name2='value2″]",
      "href": "https://api.jquery.com/multiple-attribute-selector/"
    },
    {
      "name": "Array.prototype",
      "desc": "The Array.prototype property represents the prototype for the Array constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype",
      "type": "Property"
    },
    {
      "name": "Array.prototype[@@unscopables]",
      "desc": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 (ES6) version. These properties are excluded from with statement bindings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables",
      "type": "Property"
    },
    {
      "name": "Array.length",
      "desc": "The length property represents an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length",
      "type": "Property"
    },
    {
      "name": "Array.from()",
      "desc": "The Array.from() method creates a new Array instance from an array-like or iterable object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from",
      "type": "Method"
    },
    {
      "name": "Array.isArray()",
      "desc": "The Array.isArray() determines whether the passed value is an Array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",
      "type": "Method"
    },
    {
      "name": "Array.of()",
      "desc": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of",
      "type": "Method"
    },
    {
      "name": "Array.prototype.concat()",
      "desc": "The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
      "type": "Method"
    },
    {
      "name": "Array.prototype.copyWithin()",
      "desc": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",
      "type": "Method"
    },
    {
      "name": "Array.prototype.entries()",
      "desc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",
      "type": "Method"
    },
    {
      "name": "Array.prototype.every()",
      "desc": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",
      "type": "Method"
    },
    {
      "name": "Array.prototype.fill()",
      "desc": "The fill() method fills all the elements of an array from a start index to an end index with a static value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
      "type": "Method"
    },
    {
      "name": "Array.prototype.filter()",
      "desc": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
      "type": "Method"
    },
    {
      "name": "Array.prototype.find()",
      "desc": "The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",
      "type": "Method"
    },
    {
      "name": "Array.prototype.findIndex()",
      "desc": "The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",
      "type": "Method"
    },
    {
      "name": "Array.prototype.forEach()",
      "desc": "The forEach() method executes a provided function once per array element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
      "type": "Method"
    },
    {
      "name": "Array.prototype.includes()",
      "desc": "The includes() method determines whether an array includes a certain element, returning true or false as appropriate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
      "type": "Method"
    },
    {
      "name": "Array.prototype.indexOf()",
      "desc": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
      "type": "Method"
    },
    {
      "name": "Array.prototype.join()",
      "desc": "The join() method joins all elements of an array into a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
      "type": "Method"
    },
    {
      "name": "Array.prototype.keys()",
      "desc": "The keys() method returns a new Array Iterator that contains the keys for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",
      "type": "Method"
    },
    {
      "name": "Array.prototype.lastIndexOf()",
      "desc": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
      "type": "Method"
    },
    {
      "name": "Array.prototype.map()",
      "desc": "The map() method creates a new array with the results of calling a provided function on every element in this array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
      "type": "Method"
    },
    {
      "name": "Array.prototype.pop()",
      "desc": "The pop() method removes the last element from an array and returns that element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",
      "type": "Method"
    },
    {
      "name": "Array.prototype.push()",
      "desc": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
      "type": "Method"
    },
    {
      "name": "Array.prototype.reduce()",
      "desc": "The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",
      "type": "Method"
    },
    {
      "name": "Array.prototype.reduceRight()",
      "desc": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight",
      "type": "Method"
    },
    {
      "name": "Array.prototype.reverse()",
      "desc": "The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",
      "type": "Method"
    },
    {
      "name": "Array.prototype.shift()",
      "desc": "The shift() method removes the first element from an array and returns that element. This method changes the length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
      "type": "Method"
    },
    {
      "name": "Array.prototype.slice()",
      "desc": "The slice() method returns a shallow copy of a portion of an array into a new array object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",
      "type": "Method"
    },
    {
      "name": "Array.prototype.some()",
      "desc": "The some() method tests whether some element in the array passes the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",
      "type": "Method"
    },
    {
      "name": "Array.prototype.sort()",
      "desc": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
      "type": "Method"
    },
    {
      "name": "Array.prototype.splice()",
      "desc": "The splice() method changes the content of an array by removing existing elements and/or adding new elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
      "type": "Method"
    },
    {
      "name": "Array.prototype.toLocaleString()",
      "desc": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString",
      "type": "Method"
    },
    {
      "name": "Array.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource",
      "type": "Method"
    },
    {
      "name": "Array.prototype.toString()",
      "desc": "The toString() method returns a string representing the specified array and its elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",
      "type": "Method"
    },
    {
      "name": "Array.prototype.unshift()",
      "desc": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",
      "type": "Method"
    },
    {
      "name": "Array.prototype.values()",
      "desc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values",
      "type": "Method"
    },
    {
      "name": "Array.prototype[@@iterator]()",
      "desc": "The initial value of the @@iterator property is the same function object as the initial value of the values() property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator",
      "type": "Method"
    },
    {
      "name": "get Array[@@species]",
      "desc": "The Array[@@species] accessor property returns the Array constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species",
      "type": "Method"
    },
    {
      "name": "Function.arguments",
      "desc": "The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Function.caller",
      "desc": "The function.caller property returns the function that invoked the specified function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller",
      "type": "Property"
    },
    {
      "name": "Function.displayName",
      "desc": "The function.displayName property returns the display name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName",
      "type": "Property"
    },
    {
      "name": "Function.length",
      "desc": "The length property specifies the number of arguments expected by the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
      "type": "Property"
    },
    {
      "name": "Function.name",
      "desc": "The function.name property returns the name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
      "type": "Property"
    },
    {
      "name": "Function.prototype",
      "desc": "The Function.prototype property represents the Function prototype object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype",
      "type": "Property"
    },
    {
      "name": "Function.prototype.apply()",
      "desc": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
      "type": "Method"
    },
    {
      "name": "Function.prototype.bind()",
      "desc": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
      "type": "Method"
    },
    {
      "name": "Function.prototype.call()",
      "desc": "The call() method calls a function with a given this value and arguments provided individually.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
      "type": "Method"
    },
    {
      "name": "Function.prototype.isGenerator()",
      "desc": "The isGenerator() method determines whether or not a function is a generator.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toString()",
      "desc": "The toString() method returns a string representing the source code of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.__proto__",
      "desc": "The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.constructor",
      "desc": "Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
      "type": "Property"
    },
    {
      "name": "Object.prototype.__defineGetter__()",
      "desc": "The __defineGetter__ method binds an object's property to a function to be called when that property is looked up.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__defineSetter__()",
      "desc": "The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupGetter__()",
      "desc": "The __lookupGetter__ method returns the function bound as a getter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupSetter__()",
      "desc": "The __lookupSetter__ method returns the function bound as a setter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.hasOwnProperty()",
      "desc": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
      "type": "Method"
    },
    {
      "name": "Object.prototype.isPrototypeOf()",
      "desc": "The isPrototypeOf() method tests for an object in another object's prototype chain.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.propertyIsEnumerable()",
      "desc": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toLocaleString()",
      "desc": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toString()",
      "desc": "The toString() method returns a string representing object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.unwatch()",
      "desc": "The unwatch() method removes a watchpoint set with the watch() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch",
      "type": "Method"
    },
    {
      "name": "Object.prototype.valueOf()",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.watch()",
      "desc": "The watch() method watches for a property to be assigned a value and runs a function when that occurs.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch",
      "type": "Method"
    },
    {
      "name": "Syntax",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Syntax"
    },
    {
      "name": "Description",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Description"
    },
    {
      "name": "Properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Properties"
    },
    {
      "name": "Methods",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods"
    },
    {
      "name": "Array",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_instances"
    },
    {
      "name": "Array",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_generic_methods"
    },
    {
      "name": "Examples",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Examples"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#See_also"
    }


    {
      "name": "Basics",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Basics"
    },
    {
      "name": "Comments",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Comments"
    },
    {
      "name": "Declarations",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Declarations"
    },
    {
      "name": "Data structures and types",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Data_structures_and_types"
    },
    {
      "name": "Literals",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals"
    },
    {
      "name": "More information",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#More_information"
    },
    {
      "name": "Introduction",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction"
    },
    {
      "name": "Grammar and types",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types"
    },
    {
      "name": "Control flow and error handling",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling"
    },
    {
      "name": "Loops and iteration",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "name": "Functions",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"
    },
    {
      "name": "Expressions and operators",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"
    },
    {
      "name": "Numbers and dates",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates"
    },
    {"name": "Text formatting", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting"},
    {"name": "Regular expressions", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},
    {"name": "Indexed collections", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections"},
    {"name": "Keyed collections", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections"},
    {"name": "Working with objects", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"},
    {"name": "Details of the object model", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model"},
    {"name": "Iterators and generators", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators"},
    {"name": "Meta programming", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming"},
    {"name": "JavaScript basics", "href": "https://developer.mozilla.org/en-US/Learn/Getting_started_with_the_web/JavaScript_basics"},
    {"name": "JavaScript technologies overview", "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview"},
    {
      "name": "Introduction to Object Oriented JavaScript",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript"
    },
    {
      "name": "A re-introduction to JavaScript",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"
    },
    {
      "name": "JavaScript data structures",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"
    },
    {
      "name": "Equality comparisons and sameness",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"
    },
    {
      "name": "Closures",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"
    },
    {
      "name": "Inheritance and the prototype chain",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"
    },
    {
      "name": "Strict mode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
    },
    {
      "name": "JavaScript typed arrays",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays"
    },
    {
      "name": "SIMD types",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/SIMD_types"
    },
    {
      "name": "Memory Management",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
    },
    {
      "name": "Concurrency model and Event Loop",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"
    },
    {
      "name": "Array",
      "desc": "The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
    },
    {
      "name": "ArrayBuffer",
      "desc": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"
    },
    {
      "name": "Atomics",
      "desc": "The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Boolean",
      "desc": "The Boolean object is an object wrapper for a boolean value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"
    },
    {
      "name": "DataView",
      "desc": "The DataView view provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"
    },
    {
      "name": "Date",
      "desc": "Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"
    },
    {
      "name": "Error",
      "desc": "The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"
    },
    {
      "name": "EvalError",
      "desc": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError"
    },
    {
      "name": "Float32Array",
      "desc": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array"
    },
    {
      "name": "Float64Array",
      "desc": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array"
    },
    {
      "name": "Function",
      "desc": "The Function constructor creates a new Function object. In JavaScript every function is actually a Function object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"
    },
    {
      "name": "Generator",
      "desc": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"
    },
    {
      "name": "GeneratorFunction",
      "desc": "The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction"
    },
    {
      "name": "Infinity",
      "desc": "The global Infinity property is a numeric value representing infinity.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity"
    },
    {
      "name": "Int16Array",
      "desc": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array"
    },
    {
      "name": "Int32Array",
      "desc": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array"
    },
    {
      "name": "Int8Array",
      "desc": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array"
    },
    {
      "name": "InternalError",
      "desc": "The InternalError object indicates an error that occurred internally in the JavaScript engine. For example: \"InternalError: too much recursion\".",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError"
    },
    {
      "name": "Intl",
      "desc": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"
    },
    {
      "name": "Intl.Collator",
      "desc": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator"
    },
    {
      "name": "Intl.DateTimeFormat",
      "desc": "The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    },
    {
      "name": "Intl.NumberFormat",
      "desc": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"
    },
    {
      "name": "Iterator",
      "desc": "The Iterator function returns an object which implements legacy iterator protocol and iterates over enumerable properties of an object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "JSON",
      "desc": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"
    },
    {
      "name": "Map",
      "desc": "The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"
    },
    {
      "name": "Math",
      "desc": "Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"
    },
    {
      "name": "NaN",
      "desc": "The global NaN property is a value representing Not-A-Number.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN"
    },
    {
      "name": "Number",
      "desc": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
    },
    {
      "name": "Object",
      "desc": "The Object constructor creates an object wrapper.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"
    },
    {
      "name": "ParallelArray",
      "desc": "The goal of ParallelArray was to enable data-parallelism in web applications. The higher-order functions available on ParallelArray attempted to execute in parallel, though they may fall back to sequential execution if necessary. To ensure that your code executes in parallel, it is suggested that the functions should be limited to the parallelizable subset of JS that Firefox supports.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray",
      "warning": "This is an obsolete API and is no longer guaranteed to work."
    },
    {
      "name": "Promise",
      "desc": "The Promise object is used for asynchronous computations. A Promise represents an operation that hasn't completed yet, but is expected in the future.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
      "name": "Proxy",
      "desc": "The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"
    },
    {
      "name": "RangeError",
      "desc": "The RangeError object indicates an error when a value is not in the set or range of allowed values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError"
    },
    {
      "name": "ReferenceError",
      "desc": "The ReferenceError object represents an error when a non-existent variable is referenced.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError"
    },
    {
      "name": "Reflect",
      "desc": "Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect"
    },
    {
      "name": "RegExp",
      "desc": "The RegExp constructor creates a regular expression object for matching text with a pattern.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"
    },
    {
      "name": "SIMD",
      "desc": "SIMD (pronounced \"sim-dee\") is short for Single Instruction/Multiple Data which is one classification of computer architectures. SIMD operations perform the same computation on multiple data points resulting in data level parallelism and thus performance gains, for example for 3D graphics and video processing, physics simulations or cryptography, and other domains.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Bool16x8",
      "desc": "The SIMD.Bool16x8 data type is a 128-bit vector divided into 8 lanes storing boolean values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool16x8",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Bool32x4",
      "desc": "The SIMD.Bool32x4 data type is a 128-bit vector divided into 4 lanes storing boolean values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool32x4",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Bool64x2",
      "desc": "The SIMD.Bool64x2 data type is a 128-bit vector divided into 2 lanes storing boolean values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool64x2",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Bool8x16",
      "desc": "The SIMD.Bool8x16 data type is a 128-bit vector divided into 16 lanes storing boolean values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool8x16",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Float32x4",
      "desc": "The SIMD.Float32x4 data type is a 128-bit vector divided into 4 lanes storing single precision floating point values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32x4",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Float64x2",
      "desc": "The SIMD.Float64x2 data type is a 128-bit vector divided into 2 lanes storing double precision floating point values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64x2",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Int16x8",
      "desc": "The SIMD.Int16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit signed integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16x8",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Int32x4",
      "desc": "The SIMD.Int32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit signed integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32x4",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Int8x16",
      "desc": "The SIMD.Int8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit signed integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8x16",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Uint16x8",
      "desc": "The SIMD.Uint16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit unsigned integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16x8",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Uint32x4",
      "desc": "The SIMD.Uint32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit unsigned integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32x4",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "SIMD.Uint8x16",
      "desc": "The SIMD.Uint8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit unsigned integer values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8x16",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Set",
      "desc": "The Set object lets you store unique values of any type, whether primitive values or object references.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"
    },
    {
      "name": "SharedArrayBuffer",
      "desc": "The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "StopIteration",
      "desc": "The StopIteration object is used to tell the end of the iteration in the legacy iterator protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String",
      "desc": "The String global object is a constructor for strings, or a sequence of characters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"
    },
    {
      "name": "Symbol",
      "desc": "A symbol is a unique and immutable data type and may be used as an identifier for object properties. The Symbol object is an implicit object wrapper for the symbol primitive data type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"
    },
    {
      "name": "SyntaxError",
      "desc": "The SyntaxError object represents an error when trying to interpret syntactically invalid code.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError"
    },
    {
      "name": "TypeError",
      "desc": "The TypeError object represents an error when a value is not of the expected type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError"
    },
    {
      "name": "TypedArray",
      "desc": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"
    },
    {
      "name": "URIError",
      "desc": "The URIError object represents an error when a global URI handling function was used in a wrong way.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError"
    },
    {
      "name": "Uint16Array",
      "desc": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array"
    },
    {
      "name": "Uint32Array",
      "desc": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array"
    },
    {
      "name": "Uint8Array",
      "desc": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"
    },
    {
      "name": "Uint8ClampedArray",
      "desc": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray"
    },
    {
      "name": "WeakMap",
      "desc": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"
    },
    {
      "name": "WeakSet",
      "desc": "The WeakSet object lets you store weakly held objects in a collection.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"
    },
    {
      "name": "decodeURI()",
      "desc": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI"
    },
    {
      "name": "decodeURIComponent()",
      "desc": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent"
    },
    {
      "name": "encodeURI()",
      "desc": "The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"
    },
    {
      "name": "encodeURIComponent()",
      "desc": "The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"
    },
    {
      "name": "escape()",
      "desc": "The deprecated escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "eval()",
      "desc": "The eval() function evaluates JavaScript code represented as a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"
    },
    {
      "name": "isFinite()",
      "desc": "The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite"
    },
    {
      "name": "isNaN()",
      "desc": "The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 6, or you can use typeof to determine if the value is Not-A-Number.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN"
    },
    {
      "name": "null",
      "desc": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"
    },
    {
      "name": "parseFloat()",
      "desc": "The parseFloat() function parses a string argument and returns a floating point number.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"
    },
    {
      "name": "parseInt()",
      "desc": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt"
    },
    {
      "name": "undefined",
      "desc": "The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"
    },
    {
      "name": "unescape()",
      "desc": "The deprecated unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape is deprecated, use decodeURI or decodeURIComponent instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "uneval()",
      "desc": "The uneval() function creates a string representation of the source code of an Object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval"
    },
    {
      "name": "Array.from()",
      "desc": "The Array.from() method creates a new Array instance from an array-like or iterable object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"
    },
    {
      "name": "Array.isArray()",
      "desc": "The Array.isArray() determines whether the passed value is an Array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"
    },
    {
      "name": "Array.observe()",
      "desc": "The Array.observe() method was used for asynchronously observing changes to Arrays, similar to Object.observe() for objects. It provided a stream of changes in order of occurrence. It's equivalent to Object.observe() invoked with the accept type list [\"add\", \"update\", \"delete\", \"splice\"]. However, this API has been deprecated and removed from Browsers. You can use the more general Proxy object instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe",
      "warning": "This is an obsolete API and is no longer guaranteed to work."
    },
    {
      "name": "Array.of()",
      "desc": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of"
    },
    {
      "name": "Array.prototype",
      "desc": "The Array.prototype property represents the prototype for the Array constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype"
    },
    {
      "name": "Array.prototype.concat()",
      "desc": "The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
    },
    {
      "name": "Array.prototype.copyWithin()",
      "desc": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"
    },
    {
      "name": "Array.prototype.entries()",
      "desc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
    },
    {
      "name": "Array.prototype.every()",
      "desc": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"
    },
    {
      "name": "Array.prototype.fill()",
      "desc": "The fill() method fills all the elements of an array from a start index to an end index with a static value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
    },
    {
      "name": "Array.prototype.filter()",
      "desc": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
    },
    {
      "name": "Array.prototype.find()",
      "desc": "The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
    },
    {
      "name": "Array.prototype.findIndex()",
      "desc": "The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"
    },
    {
      "name": "Array.prototype.forEach()",
      "desc": "The forEach() method executes a provided function once per array element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
    },
    {
      "name": "Array.prototype.includes()",
      "desc": "The includes() method determines whether an array includes a certain element, returning true or false as appropriate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"
    },
    {
      "name": "Array.prototype.indexOf()",
      "desc": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"
    },
    {
      "name": "Array.prototype.join()",
      "desc": "The join() method joins all elements of an array into a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
    },
    {
      "name": "Array.prototype.keys()",
      "desc": "The keys() method returns a new Array Iterator that contains the keys for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys"
    },
    {
      "name": "Array.prototype.lastIndexOf()",
      "desc": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf"
    },
    {
      "name": "Array.prototype.map()",
      "desc": "The map() method creates a new array with the results of calling a provided function on every element in this array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    },
    {
      "name": "Array.prototype.pop()",
      "desc": "The pop() method removes the last element from an array and returns that element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"
    },
    {
      "name": "Array.prototype.push()",
      "desc": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"
    },
    {
      "name": "Array.prototype.reduce()",
      "desc": "The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"
    },
    {
      "name": "Array.prototype.reduceRight()",
      "desc": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight"
    },
    {
      "name": "Array.prototype.reverse()",
      "desc": "The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
    },
    {
      "name": "Array.prototype.shift()",
      "desc": "The shift() method removes the first element from an array and returns that element. This method changes the length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"
    },
    {
      "name": "Array.prototype.slice()",
      "desc": "The slice() method returns a shallow copy of a portion of an array into a new array object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"
    },
    {
      "name": "Array.prototype.some()",
      "desc": "The some() method tests whether some element in the array passes the test implemented by the provided function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"
    },
    {
      "name": "Array.prototype.sort()",
      "desc": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
    },
    {
      "name": "Array.prototype.splice()",
      "desc": "The splice() method changes the content of an array by removing existing elements and/or adding new elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"
    },
    {
      "name": "Array.prototype.toLocaleString()",
      "desc": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString"
    },
    {
      "name": "Array.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource"
    },
    {
      "name": "Array.prototype.toString()",
      "desc": "The toString() method returns a string representing the specified array and its elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"
    },
    {
      "name": "Array.prototype.unshift()",
      "desc": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"
    },
    {
      "name": "Array.prototype.values()",
      "desc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values"
    },
    {
      "name": "Array.prototype[@@iterator]()",
      "desc": "The initial value of the @@iterator property is the same function object as the initial value of the values() property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator"
    },
    {
      "name": "Array.prototype[@@unscopables]",
      "desc": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 (ES6) version. These properties are excluded from with statement bindings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables"
    },
    {
      "name": "Array.unobserve()",
      "desc": "The Array.unobserve() method was used to remove observers set by Array.observe(), but has been deprecated and removed from Browsers. You can use the more general Proxy object instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unobserve",
      "warning": "This is an obsolete API and is no longer guaranteed to work."
    },
    {
      "name": "array.length",
      "desc": "The length property represents an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length"
    },
    {
      "name": "get Array[@@species]",
      "desc": "The Array[@@species] accessor property returns the Array constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species"
    },
    {
      "name": "Arithmetic operators",
      "desc": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators"
    },
    {
      "name": "Array comprehensions",
      "desc": "The array comprehension syntax is a JavaScript expression which allows you to quickly assemble a new array based on an existing one. Comprehensions exist in many programming languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Assignment operators",
      "desc": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators"
    },
    {
      "name": "Bitwise operators",
      "desc": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"
    },
    {
      "name": "Comma operator",
      "desc": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator"
    },
    {
      "name": "Comparison operators",
      "desc": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators"
    },
    {
      "name": "Conditional (ternary) Operator",
      "desc": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"
    },
    {
      "name": "Destructuring assignment",
      "desc": "The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects into distinct variables.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"
    },
    {
      "name": "Expression closures",
      "desc": "Expression closures are a shorthand function syntax for writing simple functions.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures"
    },
    {
      "name": "Generator comprehensions",
      "desc": "The generator comprehension syntax is a JavaScript expression which allows you to quickly assemble a new generator function based on an existing iterable object. Comprehensions exist in many programming languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Grouping operator",
      "desc": "The grouping operator ( ) controls the precedence of evaluation in expressions.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"
    },
    {
      "name": "Legacy generator function expression",
      "desc": "The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function"
    },
    {
      "name": "Logical Operators",
      "desc": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators"
    },
    {
      "name": "Object initializer",
      "desc": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"
    },
    {
      "name": "Operator precedence",
      "desc": "Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"
    },
    {
      "name": "Property accessors",
      "desc": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors"
    },
    {
      "name": "Spread operator",
      "desc": "The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) or multiple variables  (for destructuring assignment) are expected.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator"
    },
    {
      "name": "class expression",
      "desc": "The class expression is one way to define a class in ECMAScript 2015 (ES6). Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes are using prototype-based inheritance.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class"
    },
    {
      "name": "delete operator",
      "desc": "The delete operator removes a property from an object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete"
    },
    {
      "name": "function expression",
      "desc": "The function keyword can be used to define a function inside an expression.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"
    },
    {
      "name": "function* expression",
      "desc": "The function* keyword can be used to define a generator function inside an expression.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*"
    },
    {
      "name": "in operator",
      "desc": "The in operator returns true if the specified property is in the specified object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in"
    },
    {
      "name": "instanceof",
      "desc": "The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof"
    },
    {
      "name": "new operator",
      "desc": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"
    },
    {
      "name": "new.target",
      "desc": "The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target"
    },
    {
      "name": "super",
      "desc": "The super keyword is used to call functions on an object's parent.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super"
    },
    {
      "name": "this",
      "desc": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"
    },
    {
      "name": "typeof",
      "desc": "The typeof operator returns a string indicating the type of the unevaluated operand.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
    },
    {
      "name": "void operator",
      "desc": "The void operator evaluates the given expression and then returns undefined.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void"
    },
    {
      "name": "yield",
      "desc": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield"
    },
    {
      "name": "yield*",
      "desc": "The yield* expression is used to delegate to another generator or iterable object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*"
    },
    {
      "name": "Legacy generator function",
      "desc": "The legacy generator function statement declares legacy generator functions with the specified parameters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function"
    },
    {
      "name": "block",
      "desc": "A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block"
    },
    {
      "name": "break",
      "desc": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break"
    },
    {
      "name": "class",
      "desc": "The class declaration creates a new class with a given name using prototype-based inheritance.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"
    },
    {
      "name": "const",
      "desc": "The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"
    },
    {
      "name": "continue",
      "desc": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue"
    },
    {
      "name": "debugger",
      "desc": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger"
    },
    {
      "name": "default",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default"
    },
    {
      "name": "do...while",
      "desc": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while"
    },
    {
      "name": "empty",
      "desc": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty"
    },
    {
      "name": "export",
      "desc": "The export statement is used to export functions, objects or primitives from a given file (or module).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"
    },
    {
      "name": "for",
      "desc": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement or a set of statements executed in the loop.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"
    },
    {
      "name": "for each...in",
      "desc": "The for each...in statement iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "for...in",
      "desc": "The for...in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"
    },
    {
      "name": "for...of",
      "desc": "The for...of statement creates a loop iterating over iterable objects (including Array, Map, Set, String, TypedArray, arguments object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"
    },
    {
      "name": "function",
      "desc": "The function declaration defines a function with the specified parameters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"
    },
    {
      "name": "function*",
      "desc": "The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"
    },
    {
      "name": "if...else",
      "desc": "The if statement executes a statement if a specified condition is true. If the condition is false, another statement can be executed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"
    },
    {
      "name": "import",
      "desc": "The import statement is used to import functions, objects or primitives that have been exported from an external module, another script, etc.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"
    },
    {
      "name": "label",
      "desc": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"
    },
    {
      "name": "let",
      "desc": "The let statement declares a block scope local variable, optionally initializing it to a value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"
    },
    {
      "name": "return",
      "desc": "The return statement ends function execution and specifies a value to be returned to the function caller.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return"
    },
    {
      "name": "switch",
      "desc": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"
    },
    {
      "name": "throw",
      "desc": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw"
    },
    {
      "name": "try...catch",
      "desc": "The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"
    },
    {
      "name": "var",
      "desc": "The variable statement declares a variable, optionally initializing it to a value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var"
    },
    {
      "name": "while",
      "desc": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while"
    },
    {
      "name": "with",
      "desc": "The with statement extends the scope chain for a statement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Arguments object",
      "desc": "The arguments object is an Array-like object corresponding to the arguments passed to a function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"
    },
    {
      "name": "Arrow functions",
      "desc": "An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value (does not bind its own this, arguments, super, or new.target). Arrow functions are always anonymous. These function expressions are best suited for non-method functions and they can not be used as constructors.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"
    },
    {
      "name": "Default parameters",
      "desc": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"
    },
    {
      "name": "Method definitions",
      "desc": "Starting with ECMAScript 2015 (ES6), a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions"
    },
    {
      "name": "Rest parameters",
      "desc": "The rest parameter syntax allows us to represent an indefinite number of arguments as an array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"
    },
    {
      "name": "getter",
      "desc": "The get syntax binds an object property to a function that will be called when that property is looked up.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"
    },
    {
      "name": "setter",
      "desc": "The set syntax binds an object property to a function to be called when there is an attempt to set that property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set"
    },
    {
      "name": "arguments.callee",
      "desc": "The arguments.callee property contains the currently executing function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "arguments.caller",
      "desc": "The obsolete arguments.caller property used to provide the function that invoked the currently executing function. This property has been removed and no longer works.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller",
      "warning": "This is an obsolete API and is no longer guaranteed to work."
    },
    {
      "name": "arguments.length",
      "desc": "The arguments.length property contains the number of arguments passed to the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length"
    },
    {
      "name": "arguments[@@iterator]()",
      "desc": "The initial value of the @@iterator property is the same function object as the initial value of the Array.prototype.values property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "constructor",
      "desc": "The constructor method is a special method for creating and initializing an object created with a class.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor"
    },
    {
      "name": "extends",
      "desc": "The extends keyword is used in a class declarations or class expressions to create a class with a child of another class.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends"
    },
    {
      "name": "static",
      "desc": "The static keyword defines a static method for a class.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static"
    },
    {
      "name": "Error: Permission denied to access property \"x\"",
      "desc": "Error.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied"
    },
    {
      "name": "InternalError: too much recursion",
      "desc": "InternalError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion"
    },
    {
      "name": "RangeError: argument is not a valid code point",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint"
    },
    {
      "name": "RangeError: invalid array length",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length"
    },
    {
      "name": "RangeError: precision is out of range",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range"
    },
    {
      "name": "RangeError: radix must be an integer",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix"
    },
    {
      "name": "RangeError: repeat count must be less than infinity",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large"
    },
    {
      "name": "RangeError: repeat count must be non-negative",
      "desc": "RangeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count"
    },
    {
      "name": "ReferenceError: \"x\" is not defined",
      "desc": "ReferenceError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined"
    },
    {
      "name": "ReferenceError: assignment to undeclared variable \"x\"",
      "desc": "ReferenceError warning in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var"
    },
    {
      "name": "ReferenceError: deprecated caller or arguments usage",
      "desc": "A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage"
    },
    {
      "name": "ReferenceError: invalid assignment left-hand side",
      "desc": "ReferenceError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side"
    },
    {
      "name": "ReferenceError: reference to undefined property \"x\"",
      "desc": "ReferenceError warning in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop"
    },
    {
      "name": "SyntaxError: \"x\" is not a legal ECMA-262 octal constant",
      "desc": "SyntaxError warning in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal"
    },
    {
      "name": "SyntaxError: JSON.parse: bad parsing",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse"
    },
    {
      "name": "SyntaxError: Malformed formal parameter",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter"
    },
    {
      "name": "SyntaxError: Unexpected token",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token"
    },
    {
      "name": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead",
      "desc": "A warning that a SyntaxError occurred. JavaScript execution won't be halted.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma"
    },
    {
      "name": "SyntaxError: missing ) after argument list",
      "desc": "SyntaxError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list"
    },
    {
      "name": "SyntaxError: missing ; before statement",
      "desc": "SyntaxError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement"
    },
    {
      "name": "SyntaxError: missing ] after element list",
      "desc": "SyntaxError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list"
    },
    {
      "name": "SyntaxError: missing } after property list",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list"
    },
    {
      "name": "SyntaxError: redeclaration of formal parameter \"x\"",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter"
    },
    {
      "name": "SyntaxError: return not in function",
      "desc": "SyntaxError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield"
    },
    {
      "name": "SyntaxError: test for equality (==) mistyped as assignment (=)?",
      "desc": "SyntaxError warning in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign"
    },
    {
      "name": "SyntaxError: unterminated string literal",
      "desc": "SyntaxError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal"
    },
    {
      "name": "TypeError: \"x\" has no properties",
      "desc": "TypeError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties"
    },
    {
      "name": "TypeError: \"x\" is (not) \"y\"",
      "desc": "TypeError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type"
    },
    {
      "name": "TypeError: \"x\" is not a constructor",
      "desc": "TypeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor"
    },
    {
      "name": "TypeError: \"x\" is not a function",
      "desc": "TypeError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function"
    },
    {
      "name": "TypeError: \"x\" is read-only",
      "desc": "TypeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only"
    },
    {
      "name": "TypeError: More arguments needed",
      "desc": "TypeError.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed"
    },
    {
      "name": "TypeError: invalid Array.prototype.sort argument",
      "desc": "TypeError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument"
    },
    {
      "name": "TypeError: property \"x\" is non-configurable and can't be deleted",
      "desc": "TypeError in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete"
    },
    {
      "name": "TypeError: variable \"x\" redeclares argument",
      "desc": "TypeError warning in strict mode only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Var_hides_argument"
    },
    {
      "name": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one",
      "desc": "A warning. JavaScript execution won't be halted.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma"
    },
    {
      "name": "Warning: unreachable code after return statement",
      "desc": "Warning",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return"
    },
    {
      "name": "Lexical grammar",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"
    },
    {
      "name": "JavaScript data structures",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"
    },
    {
      "name": "Enumerability and ownership of properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties"
    },
    {
      "name": "Iteration protocols",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"
    },
    {
      "name": "Strict mode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
    },
    {
      "name": "Transitioning to strict mode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode"
    },
    {
      "name": "Template literals",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"
    },
    {
      "name": "Deprecated features",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features"
    },
    {
      "name": "ECMAScript 5 support in Mozilla",
      "desc": "ECMAScript 5.1, an older version of the standard upon which JavaScript is based, was approved in June 2011.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla"
    },
    {
      "name": "ECMAScript 6 support in Mozilla",
      "desc": "ECMAScript 2015 (6th Edition) is the current version of the ECMAScript Language Specification standard. Commonly referred to as \"ES6\", it defines the standard for the JavaScript implementation in SpiderMonkey, the engine used in Firefox and other Mozilla applications.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla"
    },
    {
      "name": "ECMAScript Next support in Mozilla",
      "desc": "ECMAScript Next refers to new features of the ECMA-262 standard (commonly referred to as JavaScript) introduced after ECMAScript 6 (ES2015). New versions of ECMAScript specifications are released yearly. This year, the ES2016 specification will be released and the ES2017 is the current ECMAScript draft specification.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_Next_support_in_Mozilla"
    },
    {
      "name": "Firefox JavaScript changelog",
      "desc": "The following is a changelog for JavaScript features in Firefox releases.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/Firefox_JavaScript_changelog"
    },
    {
      "name": "New in JavaScript 1.1",
      "desc": "The following is a changelog for JavaScript from Netscape Navigator 2.0 to 3.0. The old Netscape documentation references this as \"Features added after version 1\". Netscape Navigator 3.0 was released on August 19, 1996. Netscape Navigator 3.0 was the second major version of the browser with JavaScript support.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.1"
    },
    {
      "name": "New in JavaScript 1.2",
      "desc": "The following is a changelog for JavaScript from Netscape Navigator 3.0 to 4.0. The old Netscape documentation can be found on archive.org. Netscape Navigator 4.0 was released on June 11, 1997. Netscape Navigator 4.0 was the third major version of the browser with JavaScript support.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.2"
    },
    {
      "name": "New in JavaScript 1.3",
      "desc": "The following is a changelog for JavaScript from Netscape Navigator 4.0 to 4.5. The old Netscape documentation can be found on archive.org. Netscape Navigator 4.5 was released on October 19, 1998.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.3"
    },
    {
      "name": "New in JavaScript 1.4",
      "desc": "The following is a changelog for JavaScript 1.4, which was only used for Netscape's server side JavaScript released in 1999. The old Netscape documentation can be found on archive.org.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.4"
    },
    {
      "name": "New in JavaScript 1.5",
      "desc": "The following is a changelog for JavaScript 1.5. This version was included in Netscape Navigator 6.0 was released on November 14, 2000 and was also used in later versions of Netscape Navigator and Firefox 1.0. You can compare JavaScript 1.5 to JScript version 5.5 and Internet Explorer 5.5, which was released in July 2000. The corresponding ECMA standard is ECMA-262 Edition 3 (from December 1999).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.5"
    },
    {
      "name": "New in JavaScript 1.6",
      "desc": "The following is a changelog for JavaScript 1.6. This version was included in Firefox 1.5 (Gecko 1.8), which was released in November 2005. The corresponding ECMA standard is ECMA-262 Edition 3 and ECMAScript for XML (E4X) with some additional features. Several new features were introduced: E4X, several new Array methods, and Array and String generics.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6"
    },
    {
      "name": "New in JavaScript 1.7",
      "desc": "The following is a changelog for JavaScript 1.7. This version was included in Firefox 2 (October 2006).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7"
    },
    {
      "name": "New in JavaScript 1.8",
      "desc": "The following is a changelog for JavaScript 1.8. This version was included in Firefox 3 and is part of Gecko 1.9. See bug 380236 for a tracking development bug for JavaScript 1.8.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8"
    },
    {
      "name": "New in JavaScript 1.8.1",
      "desc": "The following is a changelog for JavaScript 1.8.1. This version was included in Firefox 3.5.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8.1"
    },
    {
      "name": "New in JavaScript 1.8.5",
      "desc": "The following is a changelog for JavaScript 1.8.5. This version was included in Firefox 4.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8.5"
    },
    {
      "name": "All pages index",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Index"
    },
    {
      "name": "Methods index",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Methods_Index"
    },
    {
      "name": "Properties index",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Properties_Index"
    },
    {
      "name": "Pages tagged \"JavaScript\"",
      "href": "https://developer.mozilla.org/en-US/docs/tag/JavaScript"
    },
    {
      "name": "JavaScript doc status",
      "href": "https://developer.mozilla.org/en-US/docs/MDN/Doc_status/JavaScript"
    },
    {
      "name": "The MDN project",
      "href": "https://developer.mozilla.org/en-US/docs/MDN"
    },


    {
      "name": "Properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties"
    },
    {
      "name": "Methods",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document#Methods"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document#Specifications"
    },
    {
      "name": "Browser compatibility notes",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document#Browser_compatibility_notes"
    },
    {
      "name": "activeElement",
      "desc": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement",
      "type": "Property"
    },
    {
      "name": "alinkColor",
      "desc": "Returns or sets the color of an active link in the document body. A link is active during the time between mousedown and mouseup events.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/alinkColor",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "anchors",
      "desc": "anchors returns a list of all of the anchors in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors",
      "type": "Property"
    },
    {
      "name": "applets",
      "desc": "applets returns an ordered list of the applets within a document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/applets",
      "type": "Property"
    },
    {
      "name": "async",
      "desc": "document.async can be set to indicate whether a document.load call should be an asynchronous or synchronous request. true is the default value, indicating that documents should be loaded asynchronously.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/async",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "bgColor",
      "desc": "The deprecated  bgColor property gets or sets the background color of the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor",
      "type": "Property"
    },
    {
      "name": "body",
      "desc": "Returns the <body> or <frameset> node of the current document, or null if no such element exists.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/body",
      "type": "Property"
    },
    {
      "name": "characterSet",
      "desc": "The Document.characterSet read-only property returns the character encoding of the current document. The character encoding is the character set used for rendering the document, which may be different from the encoding specified by the page. (The user can override the encoding.).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet",
      "type": "Property"
    },
    {
      "name": "childElementCount",
      "desc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
      "type": "Property"
    },
    {
      "name": "children",
      "desc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
      "type": "Property"
    },
    {
      "name": "compatMode",
      "desc": "Indicates whether the document is rendered in Quirks mode or Standards mode.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode",
      "type": "Property"
    },
    {
      "name": "contentType",
      "desc": "Returns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType",
      "type": "Property"
    },
    {
      "name": "currentScript",
      "desc": "Returns the <script> element whose script is currently being processed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript",
      "type": "Property"
    },
    {
      "name": "defaultView",
      "desc": "In browsers, document.defaultView returns the window object associated with a document, or null if none available.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView",
      "type": "Property"
    },
    {
      "name": "designMode",
      "desc": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". In IE6-10, the value is capitalized.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode",
      "type": "Property"
    },
    {
      "name": "dir",
      "desc": "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/dir",
      "type": "Property"
    },
    {
      "name": "doctype",
      "desc": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype",
      "type": "Property"
    },
    {
      "name": "documentElement",
      "desc": "The Document.documentElement read-only property returns the Element that is the root element of the document (for example, the <html> element for HTML documents).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement",
      "type": "Property"
    },
    {
      "name": "documentURI",
      "desc": "The documentURI property of the Document interface returns the document location as a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI",
      "type": "Property"
    },
    {
      "name": "documentURIObject",
      "desc": "The Document.documentURIObject read-only property returns an nsIURI object representing the URI of the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURIObject",
      "type": "Property"
    },
    {
      "name": "domain",
      "desc": "Gets/sets the domain portion of the origin of the current document, as used by the same origin policy.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/domain",
      "type": "Property"
    },
    {
      "name": "domConfig",
      "desc": "This should return the DOMConfiguration for the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/domConfig",
      "type": "Property"
    },
    {
      "name": "embeds",
      "desc": "embeds returns a list of the embedded OBJECTS within the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds",
      "type": "Property"
    },
    {
      "name": "fgColor",
      "desc": "fgColor gets/sets the foreground color, or text color, of the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor",
      "type": "Property"
    },
    {
      "name": "firstElementChild",
      "desc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
      "type": "Property"
    },
    {
      "name": "forms",
      "desc": "forms returns a collection (an HTMLCollection) of the <form> elements within the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/forms",
      "type": "Property"
    },
    {
      "name": "fullscreen",
      "desc": "The Document.fullscreen read-only property reports whether or not the document is currently displaying content in fullscreen mode.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen",
      "type": "Property"
    },
    {
      "name": "fullscreenElement",
      "desc": "The Document.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement",
      "type": "Property"
    },
    {
      "name": "fullscreenEnabled",
      "desc": "The Document.fullscreenEnabled read-only property returns a Boolean that reports whether or not full-screen mode is available. Full screen mode is available only for a page that has no windowed plug-ins in any of its documents, and if all <iframe> elements which contain the document have their allowfullscreen attribute set.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled",
      "type": "Property"
    },
    {
      "name": "head",
      "desc": "Returns the <head> element of the current document. If there are more than one <head> elements, the first one is returned.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/head",
      "type": "Property"
    },
    {
      "name": "height",
      "desc": "Returns the height of the document object. In most cases, this is equal to the <body> element of the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/height",
      "type": "Property"
    },
    {
      "name": "images",
      "desc": "document.images returns a collection of the images in the current HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/images",
      "type": "Property"
    },
    {
      "name": "implementation",
      "desc": "Returns a DOMImplementation object associated with the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation",
      "type": "Property"
    },
    {
      "name": "lastElementChild",
      "desc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
      "type": "Property"
    },
    {
      "name": "lastModified",
      "desc": "Returns a string containing the date and time on which the current document was last modified.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified",
      "type": "Property"
    },
    {
      "name": "lastStyleSheetSet",
      "desc": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet",
      "type": "Property"
    },
    {
      "name": "linkColor",
      "desc": "linkColor gets/sets the color of links within the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/linkColor",
      "type": "Property"
    },
    {
      "name": "links",
      "desc": "The links property returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/links",
      "type": "Property"
    },
    {
      "name": "location",
      "desc": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/location",
      "type": "Property"
    },
    {
      "name": "mozSyntheticDocument",
      "desc": "Indicates whether or not the document is a synthetic one; that is, a document representing a standalone image, video, audio, or the like.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument",
      "type": "Property"
    },
    {
      "name": "onabort",
      "desc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "type": "Property"
    },
    {
      "name": "onafterscriptexecute",
      "desc": "Fired when a static <script> element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute",
      "type": "Property"
    },
    {
      "name": "onbeforescriptexecute",
      "desc": "Fired when the code in a <script> element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute",
      "type": "Property"
    },
    {
      "name": "onblur",
      "desc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "type": "Property"
    },
    {
      "name": "onchange",
      "desc": "The onchange property sets and returns the event handler for the change event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "type": "Property"
    },
    {
      "name": "onclick",
      "desc": "The onclick property returns the click event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "type": "Property"
    },
    {
      "name": "onclose",
      "desc": "An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose",
      "type": "Property"
    },
    {
      "name": "oncontextmenu",
      "desc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "type": "Property"
    },
    {
      "name": "ondblclick",
      "desc": "The ondblclick property returns the onDblClick event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "type": "Property"
    },
    {
      "name": "onerror",
      "desc": "An event handler for the error event. Error events are fired at various targets for different kinds of errors:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror",
      "type": "Property"
    },
    {
      "name": "onfocus",
      "desc": "The onfocus property returns the onFocus event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "type": "Property"
    },
    {
      "name": "onfullscreenchange",
      "desc": "The Document.onfullscreenchange property is an event handler for the fullscreenchange event that is fire when a document goes in or out of the fullscreen mode.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange",
      "type": "Property"
    },
    {
      "name": "onfullscreenerror",
      "desc": "The Document.onfullscreenerror property is an event handler for the fullscreenchange event that is fire when a document goes that cannot go in fullscreen mode, even it has been requested.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror",
      "type": "Property"
    },
    {
      "name": "oninput",
      "desc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "type": "Property"
    },
    {
      "name": "onkeydown",
      "desc": "The onkeydown property returns the onKeyDown event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "type": "Property"
    },
    {
      "name": "onkeypress",
      "desc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "type": "Property"
    },
    {
      "name": "onkeyup",
      "desc": "The onkeyup property returns the onKeyUp event handler code for the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "type": "Property"
    },
    {
      "name": "onload",
      "desc": "An event handler for the load event of a window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "type": "Property"
    },
    {
      "name": "onmousedown",
      "desc": "The onmousedown property returns the onmousedown event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "type": "Property"
    },
    {
      "name": "onmousemove",
      "desc": "The onmousemove property returns the mousemove event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "type": "Property"
    },
    {
      "name": "onmouseout",
      "desc": "The onmouseout property returns the onMouseOut event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "type": "Property"
    },
    {
      "name": "onmouseover",
      "desc": "The onmouseover property returns the onMouseOver event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "type": "Property"
    },
    {
      "name": "onmouseup",
      "desc": "The onmouseup property returns the onMouseUp event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "type": "Property"
    },
    {
      "name": "onoffline",
      "desc": "This event handler is called when an offline is fired on body and bubbles up, when navigator.onLine property changes and becomes false.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onoffline",
      "type": "Property"
    },
    {
      "name": "ononline",
      "desc": "\"online\" event is fired on the <body> of each page when the browser switches between online and offline mode. Additionally, the events bubble up from document.body, to document, ending at window. Both events are non-cancellable (you can't prevent the user from coming online, or going offline).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/ononline",
      "type": "Property"
    },
    {
      "name": "onpointercancel",
      "desc": "A global event handler for the pointercancel event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel",
      "type": "Property"
    },
    {
      "name": "onpointerdown",
      "desc": "A global event handler for the pointerdown event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown",
      "type": "Property"
    },
    {
      "name": "onpointerenter",
      "desc": "A global event handler for the pointerenter event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter",
      "type": "Property"
    },
    {
      "name": "onpointerleave",
      "desc": "A global event handler for the pointerleave event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave",
      "type": "Property"
    },
    {
      "name": "onpointermove",
      "desc": "A global event handler for the pointermove event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove",
      "type": "Property"
    },
    {
      "name": "onpointerout",
      "desc": "A global event handler for the pointerout event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout",
      "type": "Property"
    },
    {
      "name": "onpointerover",
      "desc": "A global event handler for the pointerover event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover",
      "type": "Property"
    },
    {
      "name": "onpointerup",
      "desc": "A global event handler for the pointerup event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup",
      "type": "Property"
    },
    {
      "name": "onreset",
      "desc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "type": "Property"
    },
    {
      "name": "onresize",
      "desc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "type": "Property"
    },
    {
      "name": "onscroll",
      "desc": "An event handler for scroll events on element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "type": "Property"
    },
    {
      "name": "onselect",
      "desc": "An event handler for the select event on the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "type": "Property"
    },
    {
      "name": "onselectionchange",
      "desc": "The Document.onselectionchange property represents the event handler that is called when a selectionchange event reaches this object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "onselectstart",
      "desc": "The GlobalEventHandlers.onselectstart property represents the event handler that is called when a selectstart event reaches this object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "onsubmit",
      "desc": "An event handler for the submit event on the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "type": "Property"
    },
    {
      "name": "ontouchcancel",
      "desc": "A global event handler for the touchcancel event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "ontouchmove",
      "desc": "A global event handler for the touchmove event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHanders.ontouchmove",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "ontouchstart",
      "desc": "A global event handler for the touchstart event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "origin",
      "desc": "The Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/origin",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "plugins",
      "desc": "Returns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins",
      "type": "Property"
    },
    {
      "name": "pointerLockElement",
      "desc": "The pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement",
      "type": "Property"
    },
    {
      "name": "popupNode",
      "desc": "When a popup attached via the popup or context attributes is opened, the XUL document's popupNode property is set to the node that was clicked on. This will be the target of the mouse event that activated the popup. If the popup was opened via the keyboard, the popup node may be set to null. Typically, this property will be checked during a popupshowing event handler for a context menu to initialize the menu based on the context.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/popupNode",
      "type": "Property"
    },
    {
      "name": "preferredStyleSheetSet",
      "desc": "Returns the preferred style sheet set as set by the page author.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet",
      "type": "Property"
    },
    {
      "name": "readyState",
      "desc": "The Document.readyState property of a document describes the loading state of the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState",
      "type": "Property"
    },
    {
      "name": "referrer",
      "desc": "Returns the URI of the page that linked to this page.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer",
      "type": "Property"
    },
    {
      "name": "scripts",
      "desc": "Returns a list of the <script> elements in the document. The returned object is an HTMLCollection.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts",
      "type": "Property"
    },
    {
      "name": "scrollingElement",
      "desc": "The scrollingElement read-only property of the Document interface returns a reference to the Element that scrolls the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "selectedStyleSheetSet",
      "desc": "Indicates the name of the style sheet set that's currently in use.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet",
      "type": "Property"
    },
    {
      "name": "styleSheets",
      "desc": "The Document.styleSheets read-only property returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets",
      "type": "Property"
    },
    {
      "name": "styleSheetSets",
      "desc": "Returns a live list of all of the currently-available style sheet sets.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheetSets",
      "type": "Property"
    },
    {
      "name": "timeline",
      "desc": "The timeline readonly property of the Document interface represents the default timeline of the current document. This timeline is a special instance of DocumentTimeline that is automatically created on page load.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "title",
      "desc": "Gets or sets the title of the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/title",
      "type": "Property"
    },
    {
      "name": "tooltipNode",
      "desc": "Returns the node which is the target of the current tooltip.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/tooltipNode",
      "type": "Property"
    },
    {
      "name": "URL",
      "desc": "The URL read-only property of the Document interface returns the document location as a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/URL",
      "type": "Property"
    },
    {
      "name": "visibilityState",
      "desc": "The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering. Possible values are:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState",
      "type": "Property"
    },
    {
      "name": "vlinkColor",
      "desc": "Gets/sets the color of links that the user has visited in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/vlinkColor",
      "type": "Property"
    },
    {
      "name": "width",
      "desc": "Returns the width of the <body> element of the current document in pixels.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/width",
      "type": "Property"
    },
    {
      "name": "xmlEncoding",
      "desc": "Returns the encoding as determined by the XML declaration. Should be null if unspecified or unknown.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding",
      "type": "Property"
    },
    {
      "name": "adoptNode()",
      "desc": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode",
      "type": "Method"
    },
    {
      "name": "append()",
      "desc": "The ParentNode.append method inserts a set of Node objects or DOMString objects after the last child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append",
      "type": "Method"
    },
    {
      "name": "caretPositionFromPoint()",
      "desc": "This method is used to retrieve the caret position in a document based on two coordinates. A CaretPosition is returned, containing the found DOM node and the character offset in that node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/caretPositionFromPoint",
      "type": "Method"
    },
    {
      "name": "caretRangeFromPoint()",
      "desc": "The caretRangeFromPoint() method of the Document interface returns a Range object for the document fragment under the specified coordinates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "clear()",
      "desc": "This method used to clear the whole specified document in early (pre-1.0) versions of Mozilla.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/clear",
      "type": "Method"
    },
    {
      "name": "close()",
      "desc": "The document.close() method finishes writing to a document, opened with document.open().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/close",
      "type": "Method"
    },
    {
      "name": "createAttribute()",
      "desc": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute",
      "type": "Method"
    },
    {
      "name": "createCDATASection()",
      "desc": "createCDATASection() creates a new CDATA section node, and returns it.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection",
      "type": "Method"
    },
    {
      "name": "createComment()",
      "desc": "createComment() creates a new comment node, and returns it.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment",
      "type": "Method"
    },
    {
      "name": "createDocumentFragment()",
      "desc": "Creates a new empty DocumentFragment.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment",
      "type": "Method"
    },
    {
      "name": "createElement()",
      "desc": "In an HTML document, the Document.createElement() method creates the specified HTML element or an HTMLUnknownElement if the given element name isn't a known one.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
      "type": "Method"
    },
    {
      "name": "createElementNS()",
      "desc": "Creates an element with the specified namespace URI and qualified name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS",
      "type": "Method"
    },
    {
      "name": "createEntityReference()",
      "desc": "Prior to Gecko 7.0 this method showed up as present, due to bug bug 9850, it always only returned null. The only workaround is to create a text node, CDATA section, attribute node value, etc. which has the value referred to by the entity, using Unicode escape sequences or fromCharCode() as necessary.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createEntityReference",
      "type": "Method"
    },
    {
      "name": "createEvent()",
      "desc": "Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent",
      "type": "Method"
    },
    {
      "name": "createExpression()",
      "desc": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression",
      "type": "Method"
    },
    {
      "name": "createNodeIterator()",
      "desc": "Returns a new NodeIterator object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator",
      "type": "Method"
    },
    {
      "name": "createNSResolver()",
      "desc": "Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver",
      "type": "Method"
    },
    {
      "name": "createProcessingInstruction()",
      "desc": "createProcessingInstruction() creates a new processing instruction node, and returns it.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction",
      "type": "Method"
    },
    {
      "name": "createRange()",
      "desc": "Returns a new Range object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange",
      "type": "Method"
    },
    {
      "name": "createTextNode()",
      "desc": "Creates a new Text node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode",
      "type": "Method"
    },
    {
      "name": "createTouch()",
      "desc": "",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouch",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "createTouchList()",
      "desc": "This method creates and returns a new TouchList object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouchList",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "createTreeWalker()",
      "desc": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker",
      "type": "Method"
    },
    {
      "name": "elementFromPoint()",
      "desc": "The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint",
      "type": "Method"
    },
    {
      "name": "enableStyleSheetsForSet()",
      "desc": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet",
      "type": "Method"
    },
    {
      "name": "evaluate()",
      "desc": "Returns an XPathResult based on an XPath expression and other given parameters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate",
      "type": "Method"
    },
    {
      "name": "execCommand()",
      "desc": "When an HTML document has been switched to designMode, the document object exposes the execCommand method which allows one to run commands to manipulate the contents of the editable region. Most commands affect the document's selection (bold, italics, etc.), while others insert new elements (adding a link) or affect an entire line (indenting). When using contentEditable, calling execCommand() will affect the currently active editable element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand",
      "type": "Method"
    },
    {
      "name": "exitFullscreen()",
      "desc": "The Document.exitFullscrean() is a method that takes the document out of full-screen mode; this is used to reverse the effects of a call to make an element in the document full-screen using its Element.requestFullscreen() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen",
      "type": "Method"
    },
    {
      "name": "exitPointerLock()",
      "desc": "The exitPointerLock asynchronously releases a pointer lock previously requested through Element.requestPointerLock.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock",
      "type": "Method"
    },
    {
      "name": "getAnimations()",
      "desc": "The getAnimations() method of the Document interface returns an array of all Animation objects currently in effect whose target elements are descendants of the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "getBoxObjectFor()",
      "desc": "Returns a boxObject (x, y, width, height) for a specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxObjectFor",
      "type": "Method"
    },
    {
      "name": "getElementById()",
      "desc": "Returns a reference to the element by its ID; the ID is a string which can be used to identify the element; it can be established using the id attribute in HTML, or from script.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",
      "type": "Method"
    },
    {
      "name": "getElementsByClassName()",
      "desc": "Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName",
      "type": "Method"
    },
    {
      "name": "getElementsByName()",
      "desc": "Returns a nodelist collection with a given name in the (X)HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName",
      "type": "Method"
    },
    {
      "name": "getElementsByTagName()",
      "desc": "Returns an HTMLCollection of elements with the given tag name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName",
      "type": "Method"
    },
    {
      "name": "getElementsByTagNameNS()",
      "desc": "Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS",
      "type": "Method"
    },
    {
      "name": "getSelection()",
      "desc": "This method functions identically to the Window.getSelection() method; it returns a Selection object representing the text currently selected in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getSelection",
      "type": "Method"
    },
    {
      "name": "hasFocus()",
      "desc": "false if the active element in the document has no focus; true if the active element in the document has focus.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus",
      "type": "Method"
    },
    {
      "name": "importNode()",
      "desc": "Creates a copy of a node from an external document that can be inserted into the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode",
      "type": "Method"
    },
    {
      "name": "loadOverlay()",
      "desc": "The loadOverlay() method loads a XUL overlay and merges it with the current document, notifying an observer when the merge is complete.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/loadOverlay",
      "type": "Method"
    },
    {
      "name": "mozSetImageElement()",
      "desc": "Changes the element being used as the CSS background for a background with a given background element ID.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSetImageElement",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "open()",
      "desc": "The Document.open() method opens a document for writing.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/open",
      "type": "Method"
    },
    {
      "name": "prepend()",
      "desc": "The ParentNode.prepend method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "queryCommandEnabled()",
      "desc": "The Document.queryCommandEnabled() method reports whether or not the specified editor command is enabled by the browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandEnabled",
      "type": "Method"
    },
    {
      "name": "queryCommandSupported()",
      "desc": "The Document.queryCommandSupported() method reports whether or not the specified editor command is supported by the browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported",
      "type": "Method"
    },
    {
      "name": "querySelector()",
      "desc": "Returns the first element within the document (using depth-first pre-order traversal of the document's nodes|by first element in document markup and iterating through sequential nodes by order of amount of child nodes) that matches the specified group of selectors.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector",
      "type": "Method"
    },
    {
      "name": "querySelectorAll()",
      "desc": "Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll",
      "type": "Method"
    },
    {
      "name": "registerElement()",
      "desc": "The document.registerElement() method registers a new custom element in the browser and returns a constructor for the new element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/registerElement",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "releaseCapture()",
      "desc": "Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture",
      "type": "Method"
    },
    {
      "name": "write()",
      "desc": "Writes a string of text to a document stream opened by document.open().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/write",
      "type": "Method"
    },
    {
      "name": "writeln()",
      "desc": "Writes a string of text followed by a newline character to a document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln",
      "type": "Method"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "childElementCount",
      "desc": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
      "type": "Property"
    },
    {
      "name": "children",
      "desc": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
      "type": "Property"
    },
    {
      "name": "classList",
      "desc": "The Element.classList is a read-only property which returns live DOMTokenList collection of the class attributes of the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/classList",
      "type": "Property"
    },
    {
      "name": "className",
      "desc": "className gets and sets the value of the class attribute of the specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/className",
      "type": "Property"
    },
    {
      "name": "clientHeight",
      "desc": "The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes, otherwise it's  the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight",
      "type": "Property"
    },
    {
      "name": "clientLeft",
      "desc": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft",
      "type": "Property"
    },
    {
      "name": "clientTop",
      "desc": "The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop",
      "type": "Property"
    },
    {
      "name": "clientWidth",
      "desc": "The Element.clientWidth property is zero for elements with no CSS or inline layout boxes, otherwise it's the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth",
      "type": "Property"
    },
    {
      "name": "currentStyle",
      "desc": "Element.currentStyle is a property which is a proprietary alternative to the standardized window.getComputedStyle method. It is available in old versions of Microsoft Internet Explorer.Not part of any specification.Microsoft has a description on MSDN.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/currentStyle",
      "type": "Property"
    },
    {
      "name": "firstElementChild",
      "desc": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
      "type": "Property"
    },
    {
      "name": "id",
      "desc": "The Element.id property represents the element's identifier, reflecting the id global attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/id",
      "type": "Property"
    },
    {
      "name": "innerHTML",
      "desc": "The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML",
      "type": "Property"
    },
    {
      "name": "lastElementChild",
      "desc": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
      "type": "Property"
    },
    {
      "name": "name",
      "desc": "name gets or sets the name property of a DOM object; it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/name",
      "type": "Property"
    },
    {
      "name": "nextElementSibling",
      "desc": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
      "type": "Property"
    },
    {
      "name": "ongotpointercapture",
      "desc": "ongotpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the gotpointercapture event type.[1] Implementation withdrawn. See bug 1166347.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/ongotpointercapture",
      "type": "Property"
    },
    {
      "name": "onlostpointercapture",
      "desc": "onlostpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the lostpointercapture event type.[1] Implementation withdrawn. See bug 1166347.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/onlostpointercapture",
      "type": "Property"
    },
    {
      "name": "onwheel",
      "desc": "The onwheel property returns the onwheel event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/onwheel",
      "type": "Property",
      "warning": "This API has not been standardized."
    },
    {
      "name": "outerHTML",
      "desc": "The outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML",
      "type": "Property"
    },
    {
      "name": "previousElementSibling",
      "desc": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
      "type": "Property"
    },
    {
      "name": "scrollHeight",
      "desc": "The Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight",
      "type": "Property"
    },
    {
      "name": "scrollLeft",
      "desc": "The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft",
      "type": "Property"
    },
    {
      "name": "scrollLeftMax",
      "desc": "The Element.scrollLeftMax read-only property returns a Number representing the maximum left scroll offset possible for the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax",
      "type": "Property"
    },
    {
      "name": "scrollTop",
      "desc": "The Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop",
      "type": "Property"
    },
    {
      "name": "scrollTopMax",
      "desc": "The Element.scrollTopMax read-only property returns a Number representing the maximum top scroll offset possible for the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax",
      "type": "Property"
    },
    {
      "name": "scrollWidth",
      "desc": "The Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth",
      "type": "Property"
    },
    {
      "name": "tabStop",
      "desc": "The tabStop property of the Element interface returns a Boolean indicating if the element can receive input focus via the tab key. If the specified element is a shadow host tab navigation is delegated to its children.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop",
      "type": "Property"
    },
    {
      "name": "tagName",
      "desc": "Returns the name of the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName",
      "type": "Property"
    },
    {
      "name": "animate()",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/animate",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "closest()",
      "desc": "The Element.closest() method returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter. If there isn't such an ancestor, it returns null.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/closest",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "getAttribute()",
      "desc": "getAttribute() returns the value of a specified attribute on the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute",
      "type": "Method"
    },
    {
      "name": "getAttributeNode()",
      "desc": "Returns the specified attribute of the specified element, as an Attr node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode",
      "type": "Method"
    },
    {
      "name": "getAttributeNodeNS()",
      "desc": "Returns the Attr node for the attribute with the given namespace and name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS",
      "type": "Method"
    },
    {
      "name": "getAttributeNS()",
      "desc": "getAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS",
      "type": "Method"
    },
    {
      "name": "getBoundingClientRect()",
      "desc": "The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect",
      "type": "Method"
    },
    {
      "name": "getClientRects()",
      "desc": "The Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects",
      "type": "Method"
    },
    {
      "name": "getElementsByClassName()",
      "desc": "The Element.getElementsByClassName() method returns a live HTMLCollection containing all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName",
      "type": "Method"
    },
    {
      "name": "getElementsByTagName()",
      "desc": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times Element.getElementsByTagName() with the same element and arguments.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName",
      "type": "Method"
    },
    {
      "name": "getElementsByTagNameNS()",
      "desc": "The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS",
      "type": "Method"
    },
    {
      "name": "hasAttribute()",
      "desc": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute",
      "type": "Method"
    },
    {
      "name": "hasAttributeNS()",
      "desc": "hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS",
      "type": "Method"
    },
    {
      "name": "hasAttributes()",
      "desc": "The Element.hasAttributes() method returns a Boolean value, true or false, indicating if the current element has any attributes or not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes",
      "type": "Method"
    },
    {
      "name": "insertAdjacentHTML()",
      "desc": "insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML",
      "type": "Method"
    },
    {
      "name": "matches()",
      "desc": "The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/matches",
      "type": "Method"
    },
    {
      "name": "querySelector()",
      "desc": "Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector",
      "type": "Method"
    },
    {
      "name": "querySelectorAll()",
      "desc": "Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll",
      "type": "Method"
    },
    {
      "name": "releasePointerCapture()",
      "desc": "Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture",
      "type": "Method"
    },
    {
      "name": "remove()",
      "desc": "The ChildNode.remove() method removes the object from the tree it belongs to.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "removeAttribute()",
      "desc": "removeAttribute removes an attribute from the specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute",
      "type": "Method"
    },
    {
      "name": "removeAttributeNode()",
      "desc": "removeAttributeNode removes the specified attribute from the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode",
      "type": "Method"
    },
    {
      "name": "removeAttributeNS()",
      "desc": "removeAttributeNS removes the specified attribute from an element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS",
      "type": "Method"
    },
    {
      "name": "requestFullscreen()",
      "desc": "The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed full-screen.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "requestPointerLock()",
      "desc": "The Element.requestPointerLock() method allows to asynchronously ask for the pointer to be locked on the given element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "scrollIntoView()",
      "desc": "The Element.scrollIntoView() method scrolls the current element into the visible area of the browser window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "scrollIntoViewIfNeeded()",
      "desc": "The Element.scrollIntoViewIfNeeded() method scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. If the element is already within the visible area of the browser window, then no scrolling takes place. This method is a proprietary variation of the standard Element.scrollIntoView() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "setAttribute()",
      "desc": "Adds a new attribute or changes the value of an existing attribute on the specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute",
      "type": "Method"
    },
    {
      "name": "setAttributeNode()",
      "desc": "setAttributeNode() adds a new Attr node to the specified element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode",
      "type": "Method"
    },
    {
      "name": "setAttributeNodeNS()",
      "desc": "setAttributeNodeNS adds a new namespaced attribute node to an element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS",
      "type": "Method"
    },
    {
      "name": "setAttributeNS()",
      "desc": "setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS",
      "type": "Method"
    },
    {
      "name": "setCapture()",
      "desc": "Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture",
      "type": "Method"
    },
    {
      "name": "setPointerCapture()",
      "desc": "Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal target (or hit test) at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (for example by scrolling).setPointerCapture() is the method of the Element interface used to designate a specific element as the capture target of future pointer events. Subsequent events for the pointer will be targeted at capture element until capture is released (via Element.releasePointerCapture).This method returns void and throws a DOMException with the name InvalidPointerId if pointerId does not match any of the active pointers.[1] Implementation withdrawn. See bug 1166347.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture",
      "type": "Method"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "Attr",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
    },
    {
      "name": "ByteString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ByteString"
    },
    {
      "name": "CDATASection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
    },
    {
      "name": "CharacterData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "ChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode"
    },
    {
      "name": "Comment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
    },
    {
      "name": "CustomEvent",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
    },
    {
      "name": "DOMConfiguration",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration"
    },
    {
      "name": "DOMError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
    },
    {
      "name": "DOMErrorHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMErrorHandler"
    },
    {
      "name": "DOMException",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
    },
    {
      "name": "DOMImplementation",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
    },
    {
      "name": "DOMImplementationList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationList"
    },
    {
      "name": "DOMImplementationRegistry",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationRegistry"
    },
    {
      "name": "DOMImplementationSource",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationSource"
    },
    {
      "name": "DOMLocator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMLocator"
    },
    {
      "name": "DOMObject",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMObject"
    },
    {
      "name": "DOMParser",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser"
    },
    {
      "name": "DOMPoint",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint"
    },
    {
      "name": "DOMRect",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
    },
    {
      "name": "DOMString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString"
    },
    {
      "name": "DOMTimeStamp",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
    },
    {
      "name": "DOMTokenList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "name": "DOMUserData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMUserData"
    },
    {
      "name": "Document",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "DocumentFragment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
    },
    {
      "name": "DocumentType",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
    },
    {
      "name": "ElementTraversal",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ElementTraversal"
    },
    {
      "name": "Entity",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Entity"
    },
    {
      "name": "EntityReference",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EntityReference"
    },
    {
      "name": "Event",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "HTMLCollection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
    },
    {
      "name": "MutationObserver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "NodeFilter",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter"
    },
    {
      "name": "NodeIterator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
    },
    {
      "name": "NodeList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
    },
    {
      "name": "NonDocumentTypeChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode"
    },
    {
      "name": "ProcessingInstruction",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
    },
    {
      "name": "PromiseResolver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver"
    },
    {
      "name": "Range",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
    },
    {
      "name": "Text",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text"
    },
    {
      "name": "TextDecoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"
    },
    {
      "name": "TextEncoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"
    },
    {
      "name": "TimeRanges",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges"
    },
    {
      "name": "TreeWalker",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker"
    },
    {
      "name": "TypeInfo",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TypeInfo"
    },
    {
      "name": "USVString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/USVString"
    },
    {
      "name": "UserDataHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/UserDataHandler"
    },
    {
      "name": "XMLDocument",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
    },
    {
      "name": "Syntax",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes#Syntax"
    },
    {
      "name": "Example",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes#Example"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes#See_also"
    },
    {
      "name": "accessKey",
      "desc": "The Element.accessKey property sets the keystroke by which a user can press to jump to this element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey",
      "type": "Property"
    },
    {
      "name": "introduction",
      "href": "https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model$edit#DOM_interfaces"
    },
    {
      "name": "Attr",
      "desc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
    },
    {
      "name": "CharacterData",
      "desc": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "ChildNode",
      "desc": "The ChildNode interface contains methods that are particular to Node objects that can have a parent.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode"
    },
    {
      "name": "Comment",
      "desc": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '<!--' and '-->'. In XML, the character sequence '--' cannot be used within a comment.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
    },
    {
      "name": "CustomEvent",
      "desc": "This interface inherits properties from its parent, Event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
    },
    {
      "name": "Document",
      "desc": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality which is global to the document, such as obtaining the page's URL and creating new elements in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "DocumentFragment",
      "desc": "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a light-weight version of Document to store well-formed or potentially non-well-formed fragments of XML.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
    },
    {
      "name": "DocumentType",
      "desc": "The DocumentType interface represents a Node containing a doctype.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
    },
    {
      "name": "DOMError",
      "desc": "The DOMError interface describes an error object that contains an error name.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
    },
    {
      "name": "DOMException",
      "desc": "The DOMException exception represents an abnormal event happening when a method or a property is used.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
    },
    {
      "name": "DOMImplementation",
      "desc": "The DOMImplementation interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
    },
    {
      "name": "DOMString",
      "desc": "DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString"
    },
    {
      "name": "DOMTimeStamp",
      "desc": "The DOMTimeStamp type represents an absolute or relative number of milliseconds, depending on the specification in which it appears.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
    },
    {
      "name": "DOMSettableTokenList",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMSettableTokenList"
    },
    {
      "name": "DOMStringList",
      "desc": "A type returned by some APIs which contains a list of DOMString (strings).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList"
    },
    {
      "name": "DOMTokenList",
      "desc": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "name": "Element",
      "desc": "The Element interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements. Specific behaviors are described in interfaces which inherit from Element but add additional functionality.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
    },
    {
      "name": "Event",
      "desc": "The Event interface represents any event of the DOM. It contains common properties and methods to any event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
    },
    {
      "name": "EventTarget",
      "desc": "EventTarget is an interface implemented by objects that can receive events and may have listeners for them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "HTMLCollection",
      "desc": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
    },
    {
      "name": "MutationObserver",
      "desc": "MutationObserver provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    },
    {
      "name": "MutationRecord",
      "desc": "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord"
    },
    {
      "name": "Node",
      "desc": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "NodeFilter",
      "desc": "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter"
    },
    {
      "name": "NodeIterator",
      "desc": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
    },
    {
      "name": "NodeList",
      "desc": "NodeList objects are collections of nodes such as those returned by Node.childNodes and the document.querySelectorAll method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
    },
    {
      "name": "ParentNode",
      "desc": "The ParentNode interface contains methods that are particular to Node objects that can have children.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode"
    },
    {
      "name": "ProcessingInstruction",
      "desc": "A processing instruction provides an opportunity for application-specific instructions to be embedded within XML and which can be ignored by XML processors which do not support processing their instructions (outside of their having a place in the DOM).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
    },
    {
      "name": "Promise",
      "desc": "The Promise interface represents a proxy for a value not necessarily known at its creation time. It allows you to associate handlers to an asynchronous action's eventual success or failure. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise of having a value at some point in the future.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Promise"
    },
    {
      "name": "PromiseResolver",
      "desc": "The PromiseResolver interface represents an object controlling the state and the result value of a Promise.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver"
    },
    {
      "name": "Range",
      "desc": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
    },
    {
      "name": "Text",
      "desc": "The Text interface represents the textual content of Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text"
    },
    {
      "name": "TreeWalker",
      "desc": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker"
    },
    {
      "name": "URL",
      "desc": "The URL interface represent an object providing static methods used for creating object URLs.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/URL"
    },
    {
      "name": "Window",
      "desc": "The window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window"
    },
    {
      "name": "Worker",
      "desc": "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Worker"
    },
    {
      "name": "XMLDocument",
      "desc": "The XMLDocument interface represent an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model$edit#Obsolete_DOM_interfaces"
    },
    {
      "name": "CDATASection",
      "desc": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text, such that the symbols < and & do not need escaping as they normally do within XML when used as text.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
    },
    {
      "name": "DOMConfiguration",
      "desc": "Pre-defined parameters: \"canonical-form\", \"cdata-sections\", \"check-character-normalization\", \"comments\", \"datatype-normalization\", \"element-content-whitespace\", \"entities\", \"error-handler\", \"infoset\", \"namespaces\", \"namespace-declarations\", \"normalize-characters\",\"schema-location\", \"schema-type\", \"split-cdata-sections\", \"validate\", \"validate-if-schema\", \"well-formed\"",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration"
    },
    {
      "name": "DOMErrorHandler",
      "desc": "Set as \"error-handler\" parameter in DOMConfiguration.setParameter . Implementation may provide a default handler. DOMError.relatedData will contain closest node to where error occurred or contain the Document node if it is unable to be determined. Document mutations from within the error handler result in implementation-dependent behavior. If there are to be multiple errors, the sequence and numbers of the errors passed to the error handler are also implementation dependent. The application using the DOM implementation implements this interface:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMErrorHandler"
    },
    {
      "name": "DOMImplementationList",
      "desc": "Returned by DOMImplementationSource.getDOMImplementationList() and DOMImplementationRegistry.getDOMImplementationList() . Can be iterated with 0-based index.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationList"
    },
    {
      "name": "DOMImplementationRegistry",
      "desc": "This is a global variable used to get a single DOMImplementation or DOMImplementationList depending on the registered objects with the specified features.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationRegistry"
    },
    {
      "name": "DOMImplementationSource",
      "desc": "Can request a particular implementation based on needed features and versions (which can then be used to create a document, etc.). Called during DOMImplementationRegistry.getDOMImplementation() and DOMImplementationRegistry.getDOMImplementationList().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationSource"
    },
    {
      "name": "DOMLocator",
      "desc": "Indicates a location such as where an error occurred. Returned by DOMError.location.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMLocator"
    },
    {
      "name": "DOMObject",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMObject"
    },
    {
      "name": "DOMUserData",
      "desc": "DOMUserData refers to application data. In JavaScript, it maps directly to Object. It is returned or used as an argument by Node.setUserData(), Node.getUserData(), used as the third argument to handle() on UserDataHandler, and is used or returned by various DOMConfiguration methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMUserData"
    },
    {
      "name": "Entity",
      "desc": "Read-only reference to a DTD entity. Also inherits the methods and properties of Node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Entity"
    },
    {
      "name": "EntityReference",
      "desc": "Read-only reference to an entity reference in the DOM tree. Has no properties or methods of its own but inherits from Node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EntityReference"
    },
    {
      "name": "NamedNodeMap",
      "desc": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap"
    },
    {
      "name": "NameList",
      "desc": "Provides an abstraction for an ordered collection of name and namespace value pairs. Items can be accessed by a 0-based index. The DOM spec does not specify how the collection is to be implemented.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NameList"
    },
    {
      "name": "Notation",
      "desc": "Represents a DTD notation (read-only). May declare format of an unparsed entity or formally declare the document's processing instruction targets. Inherits methods and properties from Node. Its nodeName is the notation name. Has no parent.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Notation"
    },
    {
      "name": "TypeInfo",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TypeInfo"
    },
    {
      "name": "UserDataHandler",
      "desc": "When associating user data with a key on a node, Node.setUserData() can also accept, in its third argument, a handler which will be called when the object is cloned, imported, deleted, renamed, or adopted. Per the specification, exceptions should not be thrown in a UserDataHandler. In both document.importNode() and Node.cloneNode(), although user data is not copied over, the handler will be called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/UserDataHandler"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model$edit#HTML_interfaces"
    },
    {
      "name": "HTMLDocument",
      "desc": "HTMLDocument is an abstract interface of the DOM which provides access to special properties and methods not present by default on a regular (XML) document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument"
    },
    {
      "name": "Document",
      "desc": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality which is global to the document, such as obtaining the page's URL and creating new elements in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "Window",
      "desc": "The window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window"
    },
    {
      "name": "Style",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/style"
    },
    {
      "name": "History",
      "desc": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/history"
    },
    {
      "name": "Selection",
      "desc": "Calling the Selection.toString() method returns the text contained in the selection, e.g.:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Selection"
    },
    {
      "name": "HTMLAnchorElement",
      "desc": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of such elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement"
    },
    {
      "name": "HTMLAppletElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAppletElement"
    },
    {
      "name": "HTMLAreaElement",
      "desc": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement"
    },
    {
      "name": "HTMLAudioElement",
      "desc": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement"
    },
    {
      "name": "HTMLBaseElement",
      "desc": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement"
    },
    {
      "name": "HTMLBodyElement",
      "desc": "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement"
    },
    {
      "name": "HTMLBRElement",
      "desc": "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement"
    },
    {
      "name": "HTMLButtonElement",
      "desc": "The HTMLButtonElement interface provides properties and methods (beyond the <button> object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement"
    },
    {
      "name": "HTMLCanvasElement",
      "desc": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement"
    },
    {
      "name": "HTMLDataElement",
      "desc": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement"
    },
    {
      "name": "HTMLDataListElement",
      "desc": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement"
    },
    {
      "name": "HTMLDialogElement",
      "desc": "The HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement"
    },
    {
      "name": "HTMLDirectoryElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDirectoryElement"
    },
    {
      "name": "HTMLDivElement",
      "desc": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement"
    },
    {
      "name": "HTMLDListElement",
      "desc": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement"
    },
    {
      "name": "HTMLElement",
      "desc": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
    },
    {
      "name": "HTMLEmbedElement",
      "desc": "The HTMLEmbedElement interface, which provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement"
    },
    {
      "name": "HTMLFieldSetElement",
      "desc": "The HTMLFieldSetElement interface has special properties and methods (beyond the regular HTMLelement interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement"
    },
    {
      "name": "HTMLFontElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement"
    },
    {
      "name": "HTMLFormElement",
      "desc": "The HTMLFormElement interface provides methods to create and modify <form> elements; it inherits from properties and methods of the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement"
    },
    {
      "name": "HTMLFrameElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameElement"
    },
    {
      "name": "HTMLFrameSetElement",
      "desc": "The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement"
    },
    {
      "name": "HTMLHeadElement",
      "desc": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement"
    },
    {
      "name": "HTMLHeadingElement",
      "desc": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement"
    },
    {
      "name": "HTMLHtmlElement",
      "desc": "The HTMLHtmlElement interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement"
    },
    {
      "name": "HTMLHRElement",
      "desc": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement"
    },
    {
      "name": "HTMLIFrameElement",
      "desc": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement"
    },
    {
      "name": "HTMLImageElement",
      "desc": "The HTMLImageElement interface provides special properties and methods  for manipulating the layout and presentation of <img> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement"
    },
    {
      "name": "HTMLInputElement",
      "desc": "The HTMLInputElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of input elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"
    },
    {
      "name": "HTMLKeygenElement",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLKeygenElement"
    },
    {
      "name": "HTMLLabelElement",
      "desc": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits from HTMLElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement"
    },
    {
      "name": "HTMLLegendElement",
      "desc": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement"
    },
    {
      "name": "HTMLLIElement",
      "desc": "The HTMLLIElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement"
    },
    {
      "name": "HTMLLinkElement",
      "desc": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement"
    },
    {
      "name": "HTMLMapElement",
      "desc": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement"
    },
    {
      "name": "HTMLMediaElement",
      "desc": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video. The HTMLVideoElement and HTMLAudioElement elements both inherit this interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"
    },
    {
      "name": "HTMLMenuElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement"
    },
    {
      "name": "HTMLMetaElement",
      "desc": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement"
    },
    {
      "name": "HTMLMeterElement",
      "desc": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement"
    },
    {
      "name": "HTMLModElement",
      "desc": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement"
    },
    {
      "name": "HTMLObjectElement",
      "desc": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement"
    },
    {
      "name": "HTMLOListElement",
      "desc": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement"
    },
    {
      "name": "HTMLOptGroupElement",
      "desc": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement"
    },
    {
      "name": "HTMLOptionElement",
      "desc": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement"
    },
    {
      "name": "HTMLOutputElement",
      "desc": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement"
    },
    {
      "name": "HTMLParagraphElement",
      "desc": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement"
    },
    {
      "name": "HTMLParamElement",
      "desc": "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement"
    },
    {
      "name": "HTMLPreElement",
      "desc": "The HTMLPreElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating block of preformatted text.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement"
    },
    {
      "name": "HTMLProgressElement",
      "desc": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement"
    },
    {
      "name": "HTMLQuoteElement",
      "desc": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement"
    },
    {
      "name": "HTMLScriptElement",
      "desc": "HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <script> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement"
    },
    {
      "name": "HTMLSelectElement",
      "desc": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement"
    },
    {
      "name": "HTMLSourceElement",
      "desc": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement"
    },
    {
      "name": "HTMLSpanElement",
      "desc": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement"
    },
    {
      "name": "HTMLStyleElement",
      "desc": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement"
    },
    {
      "name": "HTMLTableElement",
      "desc": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement"
    },
    {
      "name": "HTMLTableCaptionElement",
      "desc": "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement"
    },
    {
      "name": "HTMLTableCellElement",
      "desc": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement"
    },
    {
      "name": "HTMLTableDataCellElement",
      "desc": "The HTMLTableDataCellElement interface provides special properties and methods (beyond the regular HTMLTableCellElement and HTMLElement interfaces it also has available to it by inheritance) for manipulating the layout and presentation of table data cells in an HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableDataCellElement"
    },
    {
      "name": "HTMLTableHeaderCellElement",
      "desc": "The HTMLTableHeaderCellElement interface provides special properties and methods (beyond the regular HTMLTableCellElement and HTMLElement interfaces it also has available to it by inheritance) for manipulating the layout and presentation of table header cells in an HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableHeaderCellElement"
    },
    {
      "name": "HTMLTableColElement",
      "desc": "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement"
    },
    {
      "name": "HTMLTableRowElement",
      "desc": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement"
    },
    {
      "name": "HTMLTableSectionElement",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement"
    },
    {
      "name": "HTMLTextAreaElement",
      "desc": "The HTMLTextAreaElement interface, which provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <textarea> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement"
    },
    {
      "name": "HTMLTimeElement",
      "desc": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement"
    },
    {
      "name": "HTMLTitleElement",
      "desc": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement"
    },
    {
      "name": "HTMLTrackElement",
      "desc": "The HTMLTrackElement interface provides access to the properties of <track> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement"
    },
    {
      "name": "HTMLUListElement",
      "desc": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement"
    },
    {
      "name": "HTMLUnknownElement",
      "desc": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement"
    },
    {
      "name": "HTMLVideoElement",
      "desc": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement"
    },
    {
      "name": "CanvasRenderingContext2D",
      "desc": "To get an object of this interface, call getContext() on a <canvas> element, supplying \"2d\" as the argument:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"
    },
    {
      "name": "CanvasGradient",
      "desc": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient"
    },
    {
      "name": "CanvasPattern",
      "desc": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas or a video, created by the CanvasRenderingContext2D.createPattern() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern"
    },
    {
      "name": "TextMetrics",
      "desc": "The TextMetrics interface represents the dimension of a text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics"
    },
    {
      "name": "ImageData",
      "desc": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData"
    },
    {
      "name": "CanvasPixelArray",
      "desc": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPixelArray"
    },
    {
      "name": "NotifyAudioAvailableEvent",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NotifyAudioAvailableEvent"
    },
    {
      "name": "HTMLAllCollection",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAllCollection"
    },
    {
      "name": "HTMLFormControlsCollection",
      "desc": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It replaces one method of HTMLCollection.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection"
    },
    {
      "name": "HTMLOptionsCollection",
      "desc": "HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the \"options\" property of select.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection"
    },
    {
      "name": "HTMLPropertiesCollection",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPropertiesCollection"
    },
    {
      "name": "DOMStringMap",
      "desc": "Used by the dataset HTML attribute to represent data for custom attributes added to elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap"
    },
    {
      "name": "RadioNodeList",
      "desc": "The RadioNodeList interface represents a collection of elements in a <form> or a <fieldset> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList"
    },
    {
      "name": "MediaError",
      "desc": "The MediaError interface represents an error associated to a media, like a HTMLMediaElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError"
    },
    {
      "name": "HTMLBaseFontElement",
      "desc": "The HTMLBaseFontElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <basefont> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseFontElement"
    },
    {
      "name": "HTMLIsIndexElement",
      "desc": "The HTMLIsIndexElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <isindex> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIsIndexElement"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model$edit#SVG_interfaces"
    },
    {
      "name": "SVGAElement",
      "desc": "The SVGAElement interface provides access to the properties of <a> element, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement"
    },
    {
      "name": "SVGAltGlyphElement",
      "desc": "  ",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement"
    },
    {
      "name": "SVGAltGlyphDefElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphDefElement"
    },
    {
      "name": "SVGAltGlyphItemElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphItemElement"
    },
    {
      "name": "SVGAnimationElement",
      "desc": "The SVGAnimationElement interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement"
    },
    {
      "name": "SVGAnimateElement",
      "desc": "The SVGAnimateElement interface corresponds to the <animate> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement"
    },
    {
      "name": "SVGAnimateColorElement",
      "desc": "The SVGAnimateColorElement interface corresponds to the <animateColor> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateColorElement"
    },
    {
      "name": "SVGAnimateMotionElement",
      "desc": "The SVGAnimateMotionElement interface corresponds to the <animateMotion> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement"
    },
    {
      "name": "SVGAnimateTransformElement",
      "desc": "The SVGAnimateTransformElement interface corresponds to the <animateTransform> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement"
    },
    {
      "name": "SVGCircleElement",
      "desc": "The SVGCircleElement interface is an interface for the <circle> element. The circle element is defined by the cx and cy attributes, that denote the coordinates of the centre of the circle. It also has a radius attribute r that denotes the radius of the circle. The radius value must be positive to allow the successful rendering of the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement"
    },
    {
      "name": "SVGClipPathElement",
      "desc": "The SVGClipPathElement interface provides access to the properties of <clipPath> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement"
    },
    {
      "name": "SVGColorProfileElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGColorProfileElement"
    },
    {
      "name": "SVGComponentTransferFunctionElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement"
    },
    {
      "name": "SVGCursorElement",
      "desc": "The SVGCursorElement interface provides access to the properties of <cursor> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCursorElement"
    },
    {
      "name": "SVGDefsElement",
      "desc": "The SVGDefsElement interface corresponds to the <defs> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement"
    },
    {
      "name": "SVGDescElement",
      "desc": "The SVGDescElement interface corresponds to the <desc> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement"
    },
    {
      "name": "SVGElement",
      "desc": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
    },
    {
      "name": "SVGEllipseElement",
      "desc": "The SVGEllipseElement interface provides access to the properties of <ellipse> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement"
    },
    {
      "name": "SVGFEBlendElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement"
    },
    {
      "name": "SVGFEColorMatrixElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement"
    },
    {
      "name": "SVGFEComponentTransferElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement"
    },
    {
      "name": "SVGFECompositeElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement"
    },
    {
      "name": "SVGFEConvolveMatrixElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement"
    },
    {
      "name": "SVGFEDiffuseLightingElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement"
    },
    {
      "name": "SVGFEDisplacementMapElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement"
    },
    {
      "name": "SVGFEDistantLightElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement"
    },
    {
      "name": "SVGFEFloodElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement"
    },
    {
      "name": "SVGFEGaussianBlurElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement"
    },
    {
      "name": "SVGFEImageElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement"
    },
    {
      "name": "SVGFEMergeElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement"
    },
    {
      "name": "SVGFEMergeNodeElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement"
    },
    {
      "name": "SVGFEMorphologyElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement"
    },
    {
      "name": "SVGFEOffsetElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement"
    },
    {
      "name": "SVGFEPointLightElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement"
    },
    {
      "name": "SVGFESpecularLightingElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement"
    },
    {
      "name": "SVGFESpotLightElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement"
    },
    {
      "name": "SVGFETileElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement"
    },
    {
      "name": "SVGFETurbulenceElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement"
    },
    {
      "name": "SVGFEFuncRElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement"
    },
    {
      "name": "SVGFEFuncGElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement"
    },
    {
      "name": "SVGFEFuncBElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement"
    },
    {
      "name": "SVGFEFuncAElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement"
    },
    {
      "name": "SVGFilterElement",
      "desc": "The SVGFilterElement interface provides access to the properties of <filter> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement"
    },
    {
      "name": "SVGFilterPrimitiveStandardAttributes",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterPrimitiveStandardAttributes"
    },
    {
      "name": "SVGFontElement",
      "desc": "The SVGFontElement interface corresponds to the <font> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontElement"
    },
    {
      "name": "SVGFontFaceElement",
      "desc": "The SVGFontFaceElement interface corresponds to the <font-face> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceElement"
    },
    {
      "name": "SVGFontFaceFormatElement",
      "desc": "The SVGFontFaceFormatElement interface corresponds to the <font-face-format> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceFormatElement"
    },
    {
      "name": "SVGFontFaceNameElement",
      "desc": "The SVGFontFaceNameElement interface corresponds to the <font-face-name> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceNameElement"
    },
    {
      "name": "SVGFontFaceSrcElement",
      "desc": "The SVGFontFaceSrcElement interface corresponds to the <font-face-src> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceSrcElement"
    },
    {
      "name": "SVGFontFaceUriElement",
      "desc": "The SVGFontFaceUriElement interface corresponds to the <font-face-uri> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceUriElement"
    },
    {
      "name": "SVGForeignObjectElement",
      "desc": "The SVGForeignObjectElement interface provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement"
    },
    {
      "name": "SVGGElement",
      "desc": "The SVGGElement interface corresponds to the <g> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement"
    },
    {
      "name": "SVGGlyphElement",
      "desc": "The SVGGlyphElement interface corresponds to the <glyph> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphElement"
    },
    {
      "name": "SVGGlyphRefElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphRefElement"
    },
    {
      "name": "SVGGradientElement",
      "desc": "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement"
    },
    {
      "name": "SVGHKernElement",
      "desc": "The SVGHKernElement interface corresponds to the <hkern> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGHKernElement"
    },
    {
      "name": "SVGImageElement",
      "desc": "The SVGImageElement interface corresponds to the <image> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement"
    },
    {
      "name": "SVGLinearGradientElement",
      "desc": "The SVGLinearGradientElement interface corresponds to the <linearGradient> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement"
    },
    {
      "name": "SVGLineElement",
      "desc": "The SVGLineElement interface provides access to the properties of <line> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement"
    },
    {
      "name": "SVGMarkerElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMarkerElement"
    },
    {
      "name": "SVGMaskElement",
      "desc": "The SVGMaskElement interface provides access to the properties of <mask> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement"
    },
    {
      "name": "SVGMetadataElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement"
    },
    {
      "name": "SVGMissingGlyphElement",
      "desc": "The SVGMissingGlyphElement interface corresponds to the <missing-glyph> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMissingGlyphElement"
    },
    {
      "name": "SVGMPathElement",
      "desc": "The SVGMPathElement interface corresponds to the <mpath> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement"
    },
    {
      "name": "SVGPathElement",
      "desc": "The SVGPathElement interface corresponds to the <path> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement"
    },
    {
      "name": "SVGPatternElement",
      "desc": "The SVGPatternElement interface corresponds to the <pattern> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement"
    },
    {
      "name": "SVGPolylineElement",
      "desc": "The SVGPolylineElement interface provides access to the properties of <polyline> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement"
    },
    {
      "name": "SVGPolygonElement",
      "desc": "The SVGPolygonElement interface provides access to the properties of <polygon> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement"
    },
    {
      "name": "SVGRadialGradientElement",
      "desc": "The SVGRadialGradientElement interface corresponds to the <radialGradient> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement"
    },
    {
      "name": "SVGRectElement",
      "desc": "The SVGRectElement interface provides access to the properties of <rect> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement"
    },
    {
      "name": "SVGScriptElement",
      "desc": "The SVGScriptElement interface corresponds to the SVG <script> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement"
    },
    {
      "name": "SVGSetElement",
      "desc": "The SVGSetElement interface corresponds to the <set> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement"
    },
    {
      "name": "SVGStopElement",
      "desc": "The SVGStopElement interface corresponds to the <stop> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement"
    },
    {
      "name": "SVGStyleElement",
      "desc": "The SVGStyleElement interface corresponds to the SVG <style> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement"
    },
    {
      "name": "SVGSVGElement",
      "desc": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement"
    },
    {
      "name": "SVGSwitchElement",
      "desc": "The SVGSwitchElement interface corresponds to the <switch> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement"
    },
    {
      "name": "SVGSymbolElement",
      "desc": "The SVGSymbolElement interface corresponds to the <symbol> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement"
    },
    {
      "name": "SVGTextElement",
      "desc": "The SVGTextElement interface corresponds to the <text> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement"
    },
    {
      "name": "SVGTextPathElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement"
    },
    {
      "name": "SVGTitleElement",
      "desc": "The SVGTitleElement interface corresponds to the <title> element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement"
    },
    {
      "name": "SVGTRefElement",
      "desc": "The SVGTRefElement interface provides access to the properties of <tref> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTRefElement"
    },
    {
      "name": "SVGTSpanElement",
      "desc": "The SVGTSpanElement interface provides access to the properties of <tspan> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement"
    },
    {
      "name": "SVGUseElement",
      "desc": "The SVGUseElement interface provides access to the properties of <use> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement"
    },
    {
      "name": "SVGViewElement",
      "desc": "The SVGViewElement interface provides access to the properties of <view> elements, as well as methods to manipulate them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement"
    },
    {
      "name": "SVGVKernElement",
      "desc": "The SVGVKernElement interface corresponds to the <vkern> elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGVKernElement"
    },
    {
      "name": "SVGLengthList",
      "desc": "The SVGLengthList defines a list of SVGLength objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList"
    },
    {
      "name": "SVGNumberList",
      "desc": "The SVGNumberList defines a list of SVGNumber objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList"
    },
    {
      "name": "SVGPathSegList",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathSegList"
    },
    {
      "name": "SVGPointList",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPointList"
    },
    {
      "name": "SVGAngle",
      "desc": "The SVGAngle interface correspond to the <angle> basic data type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle"
    },
    {
      "name": "SVGColor",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGColor"
    },
    {
      "name": "SVGICCColor",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGICCColor"
    },
    {
      "name": "SVGElementInstance",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGElementInstance"
    },
    {
      "name": "SVGElementInstanceList",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGElementInstanceList"
    },
    {
      "name": "SVGLength",
      "desc": "The SVGLength interface correspond to the <length> basic data type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLength"
    },
    {
      "name": "SVGLengthList",
      "desc": "The SVGLengthList defines a list of SVGLength objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList"
    },
    {
      "name": "SVGMatrix",
      "desc": "Many of SVG's graphics operations utilize 2x3 matrices of the form:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix"
    },
    {
      "name": "SVGNumber",
      "desc": "The SVGNumber interface correspond to the <number> basic data type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber"
    },
    {
      "name": "SVGNumberList",
      "desc": "The SVGNumberList defines a list of SVGNumber objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList"
    },
    {
      "name": "SVGPaint",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPaint"
    },
    {
      "name": "SVGPoint",
      "desc": "An SVGPoint represents a 2D or 3D point in the SVG coordinate system.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint"
    },
    {
      "name": "SVGPointList",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPointList"
    },
    {
      "name": "SVGPreserveAspectRatio",
      "desc": "The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio"
    },
    {
      "name": "SVGRect",
      "desc": "The SVGRect represents a rectangle. Rectangles consist of <code>x</code> and <code>y</code> coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are constrained to be non-negative.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRect"
    },
    {
      "name": "SVGStringList",
      "desc": "The SVGStringList defines a list of DOMString objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList"
    },
    {
      "name": "SVGTransform",
      "desc": "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform"
    },
    {
      "name": "SVGTransformList",
      "desc": "The SVGTransformList defines a list of SVGTransform objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList"
    },
    {
      "name": "SVGAnimatedAngle",
      "desc": "The SVGAnimatedAngle interface is used for attributes of basic type <angle> which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle"
    },
    {
      "name": "SVGAnimatedBoolean",
      "desc": "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean"
    },
    {
      "name": "SVGAnimatedEnumeration",
      "desc": "The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration"
    },
    {
      "name": "SVGAnimatedInteger",
      "desc": "The SVGAnimatedInteger interface is used for attributes of basic type <integer> which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger"
    },
    {
      "name": "SVGAnimatedLength",
      "desc": "The SVGAnimatedLength interface is used for attributes of basic type <length> which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength"
    },
    {
      "name": "SVGAnimatedLengthList",
      "desc": "The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList"
    },
    {
      "name": "SVGAnimatedNumber",
      "desc": "The SVGAnimatedNumber interface is used for attributes of basic type <Number> which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber"
    },
    {
      "name": "SVGAnimatedNumberList",
      "desc": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList"
    },
    {
      "name": "SVGAnimatedPreserveAspectRatio",
      "desc": "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio"
    },
    {
      "name": "SVGAnimatedRect",
      "desc": "The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect"
    },
    {
      "name": "SVGAnimatedString",
      "desc": "The SVGAnimatedString interface represent string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, Everything should be decalre inside this.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString"
    },
    {
      "name": "SVGAnimatedTransformList",
      "desc": "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList"
    },
    {
      "name": "ElementTimeControl",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ElementTimeControl"
    },
    {
      "name": "TimeEvent",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent"
    },
    {
      "name": "SVGAnimatedPathData",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPathData"
    },
    {
      "name": "SVGAnimatedPoints",
      "desc": "The SVGAnimatedPoints interface supports elements which have a points attribute which holds a list of coordinate values and which support the ability to animate that attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPoints"
    },
    {
      "name": "SVGColorProfileRule",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGColorProfileRule"
    },
    {
      "name": "SVGCSSRule",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCSSRule"
    },
    {
      "name": "SVGExternalResourcesRequired",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGExternalResourcesRequired"
    },
    {
      "name": "SVGFitToViewBox",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFitToViewBox"
    },
    {
      "name": "SVGLangSpace",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLangSpace"
    },
    {
      "name": "SVGLocatable",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLocatable"
    },
    {
      "name": "SVGRenderingIntent",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRenderingIntent"
    },
    {
      "name": "SVGStylable",
      "desc": "The SVGStylable interface is implemented on all objects corresponding to SVG elements that can have style, class and presentation attributes specified on them.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStylable"
    },
    {
      "name": "SVGTests",
      "desc": "Interface SVGTests defines an interface which applies to all elements which have attributes requiredFeatures, requiredExtensions and systemLanguage.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTests"
    },
    {
      "name": "SVGTextContentElement",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement"
    },
    {
      "name": "SVGTextPositioningElement",
      "desc": "The SVGTextPositioningElement interface is inherited by text-related interfaces: SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement"
    },
    {
      "name": "SVGTransformable",
      "desc": "Interface SVGTransformable contains properties and methods that apply to all elements which have attribute transform.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformable"
    },
    {
      "name": "SVGUnitTypes",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes"
    },
    {
      "name": "SVGURIReference",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGURIReference"
    },
    {
      "name": "SVGViewSpec",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGViewSpec"
    },
    {
      "name": "SVGZoomAndPan",
      "desc": "The documentation about this has not yet been written; please consider contributing!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/SVGZoomAndPan"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model$edit#See_also"
    },
    {
      "name": "DOM Examples",
      "href": "https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Examples"
    },
    {
      "name": "Syntax",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument#Syntax"
    },
    {
      "name": "Example",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument#Example"
    },
    {
      "name": "Notes",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument#Notes"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument#Browser_compatibility"
    },
    {
      "name": "Node.baseURI",
      "desc": "The Node.baseURI read-only property returns the absolute base URL of a node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI",
      "type": "Property",
      "syntax": "uriObj = node.baseURIObject",
      "notes": "This property is read-only; attempting to write to it will throw an exception. In addition, this property may only be accessed from privileged code."
    },
    {
      "name": "Node.baseURIObject",
      "desc": "The Node.baseURIObject property returns the nsIURI representing the node's (typically a document or an element) base URL. It's similar to Node.baseURI, except it returns an nsIURI instead of a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURIObject",
      "type": "Property",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Node.childNodes",
      "desc": "The Node.childNodes read-only property returns a live collection of child nodes of the given element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes",
      "type": "Property"
    },
    {
      "name": "Node.firstChild",
      "desc": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild",
      "type": "Property"
    },
    {
      "name": "Node.innerText",
      "desc": "Node.innerText is a nonstandard property that represents the text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied to the clipboard.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText",
      "type": "Property"
    },
    {
      "name": "Node.lastChild",
      "desc": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild",
      "type": "Property"
    },
    {
      "name": "Node.localName",
      "desc": "The Node.localName read-only property returns the local part of the qualified name of this node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/localName",
      "type": "Property"
    },
    {
      "name": "Node.nextSibling",
      "desc": "The Node.nextSibling read-only property returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling",
      "type": "Property"
    },
    {
      "name": "Node.nodeName",
      "desc": "The Node.nodeName read-only property returns the name of the current node as a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName",
      "type": "Property"
    },
    {
      "name": "Node.nodePrincipal",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal",
      "type": "Property"
    },
    {
      "name": "Node.nodeType",
      "desc": "The read-only Node.nodeType property that represents the type of the node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType",
      "type": "Property"
    },
    {
      "name": "Node.nodeValue",
      "desc": "The Node.nodeValue property returns or sets the value of the current node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue",
      "type": "Property"
    },
    {
      "name": "Node.outerText",
      "desc": "See HTMLElement.outerText",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText",
      "type": "Property"
    },
    {
      "name": "Node.parentElement",
      "desc": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement",
      "type": "Property"
    },
    {
      "name": "Node.parentNode",
      "desc": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode",
      "type": "Property"
    },
    {
      "name": "Node.prefix",
      "desc": "The Node.prefix read-only property returns the namespace prefix of the specified node, or null if no prefix is specified.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/prefix",
      "type": "Property"
    },
    {
      "name": "Node.previousSibling",
      "desc": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling",
      "type": "Property"
    },
    {
      "name": "Node.rootNode",
      "desc": "The Node.rootNode read-only property returns a Node object representing the topmost node in the tree, or the current node if it's the topmost node in the tree. This is found by walking backward along Node.parentNode until the top is reached.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode",
      "type": "Property"
    },
    {
      "name": "Node.textContent",
      "desc": "The Node.textContent property represents the text content of a node and its descendants.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent",
      "type": "Property"
    },
    {
      "name": "Node.appendChild()",
      "desc": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild",
      "type": "Method"
    },
    {
      "name": "Node.cloneNode()",
      "desc": "The Node.cloneNode() method returns a duplicate of the node on which this method was called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",
      "type": "Method"
    },
    {
      "name": "Node.compareDocumentPosition()",
      "desc": "The Node.compareDocumentPosition() method compares the position of the current node against another node in any other document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition",
      "type": "Method"
    },
    {
      "name": "Node.contains()",
      "desc": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node or not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/contains",
      "type": "Method"
    },
    {
      "name": "Node.hasChildNodes()",
      "desc": "The Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes",
      "type": "Method"
    },
    {
      "name": "Node.insertBefore()",
      "desc": "The Node.insertBefore() method inserts the specified node before the reference node as a child of the current node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore",
      "type": "Method"
    },
    {
      "name": "Node.isDefaultNamespace()",
      "desc": "The Node.isDefaultNamespace()method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace",
      "type": "Method"
    },
    {
      "name": "Node.isEqualNode()",
      "desc": "The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that much match varies depending on the types of the nodes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode",
      "type": "Method"
    },
    {
      "name": "Node.isSameNode()",
      "desc": "The Node.isSameNode() method tests whether two nodes are the same, that is if they reference the same object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode",
      "type": "Method"
    },
    {
      "name": "Node.lookupNamespaceURI()",
      "desc": "The Node.lookupNamespaceURI() method takes a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI",
      "type": "Method"
    },
    {
      "name": "Node.lookupPrefix()",
      "desc": "The Node.lookupPrefix() method returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix",
      "type": "Method"
    },
    {
      "name": "Node.normalize()",
      "desc": "The Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize",
      "type": "Method"
    },
    {
      "name": "Node.removeChild()",
      "desc": "The Node.removeChild() method removes a child node from the DOM. Returns removed node.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild",
      "type": "Method"
    },
    {
      "name": "Node.replaceChild()",
      "desc": "The Node.replaceChild() method replaces one child node of the specified node with another.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild",
      "type": "Method"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "Attr",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
    },
    {
      "name": "ByteString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ByteString"
    },
    {
      "name": "CDATASection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
    },
    {
      "name": "CharacterData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "ChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode"
    },
    {
      "name": "Comment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
    },
    {
      "name": "CustomEvent",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
    },
    {
      "name": "DOMConfiguration",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration"
    },
    {
      "name": "DOMError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
    },
    {
      "name": "DOMErrorHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMErrorHandler"
    },
    {
      "name": "DOMException",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
    },
    {
      "name": "DOMImplementation",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
    },
    {
      "name": "DOMImplementationList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationList"
    },
    {
      "name": "DOMImplementationRegistry",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationRegistry"
    },
    {
      "name": "DOMImplementationSource",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationSource"
    },
    {
      "name": "DOMLocator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMLocator"
    },
    {
      "name": "DOMObject",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMObject"
    },
    {
      "name": "DOMParser",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser"
    },
    {
      "name": "DOMPoint",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint"
    },
    {
      "name": "DOMRect",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
    },
    {
      "name": "DOMString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString"
    },
    {
      "name": "DOMTimeStamp",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
    },
    {
      "name": "DOMTokenList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "name": "DOMUserData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMUserData"
    },
    {
      "name": "Document",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "DocumentFragment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
    },
    {
      "name": "DocumentType",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
    },
    {
      "name": "Element",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
    },
    {
      "name": "ElementTraversal",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ElementTraversal"
    },
    {
      "name": "Entity",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Entity"
    },
    {
      "name": "EntityReference",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EntityReference"
    },
    {
      "name": "Event",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "HTMLCollection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
    },
    {
      "name": "MutationObserver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    },
    {
      "name": "NodeFilter",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter"
    },
    {
      "name": "NodeIterator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
    },
    {
      "name": "NodeList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
    },
    {
      "name": "NonDocumentTypeChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode"
    },
    {
      "name": "ProcessingInstruction",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
    },
    {
      "name": "PromiseResolver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver"
    },
    {
      "name": "Range",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
    },
    {
      "name": "Text",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text"
    },
    {
      "name": "TextDecoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"
    },
    {
      "name": "TextEncoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"
    },
    {
      "name": "TimeRanges",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges"
    },
    {
      "name": "TreeWalker",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker"
    },
    {
      "name": "TypeInfo",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TypeInfo"
    },
    {
      "name": "USVString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/USVString"
    },
    {
      "name": "UserDataHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/UserDataHandler"
    },
    {
      "name": "XMLDocument",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
    },
    {
      "name": "Object.prototype",
      "desc": "The Object.prototype property represents the Object prototype object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype",
      "type": "Property"
    },
    {
      "name": "Object.prototype.__proto__",
      "desc": "The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.constructor",
      "desc": "Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
      "type": "Property"
    },
    {
      "name": "Object.assign(target, ...sources)",
      "desc": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
      "type": "Method"
    },
    {
      "name": "Object.create()",
      "desc": "The Object.create() method creates a new object with the specified prototype object and properties.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create",
      "type": "Method"
    },
    {
      "name": "Object.defineProperties(obj, props)",
      "desc": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties",
      "type": "Method"
    },
    {
      "name": "Object.defineProperty()",
      "desc": "The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",
      "type": "Method"
    },
    {
      "name": "Object.entries(obj)",
      "desc": "The Object.entries() method returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Object.freeze()",
      "desc": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",
      "type": "Method"
    },
    {
      "name": "Object.getOwnPropertyDescriptor()",
      "desc": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
      "type": "Method"
    },
    {
      "name": "Object.getOwnPropertyDescriptors()",
      "desc": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors",
      "type": "Method"
    },
    {
      "name": "Object.getOwnPropertyNames()",
      "desc": "The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
      "type": "Method"
    },
    {
      "name": "Object.getOwnPropertySymbols()",
      "desc": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",
      "type": "Method"
    },
    {
      "name": "Object.getPrototypeOf()",
      "desc": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
      "type": "Method"
    },
    {
      "name": "Object.is()",
      "desc": "The Object.is() method determines whether two values are the same value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is",
      "type": "Method"
    },
    {
      "name": "Object.isExtensible()",
      "desc": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",
      "type": "Method"
    },
    {
      "name": "Object.isFrozen()",
      "desc": "The Object.isFrozen() determines if an object is frozen.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen",
      "type": "Method"
    },
    {
      "name": "Object.isSealed()",
      "desc": "The Object.isSealed() method determines if an object is sealed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed",
      "type": "Method"
    },
    {
      "name": "Object.keys()",
      "desc": "The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",
      "type": "Method"
    },
    {
      "name": "Object.preventExtensions()",
      "desc": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions",
      "type": "Method"
    },
    {
      "name": "Object.prototype.__defineGetter__()",
      "desc": "The __defineGetter__ method binds an object's property to a function to be called when that property is looked up.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__defineSetter__()",
      "desc": "The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupGetter__()",
      "desc": "The __lookupGetter__ method returns the function bound as a getter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupSetter__()",
      "desc": "The __lookupSetter__ method returns the function bound as a setter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.hasOwnProperty()",
      "desc": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
      "type": "Method"
    },
    {
      "name": "Object.prototype.isPrototypeOf()",
      "desc": "The isPrototypeOf() method tests for an object in another object's prototype chain.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.propertyIsEnumerable()",
      "desc": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toLocaleString()",
      "desc": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toString()",
      "desc": "The toString() method returns a string representing object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.unwatch()",
      "desc": "The unwatch() method removes a watchpoint set with the watch() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch",
      "type": "Method"
    },
    {
      "name": "Object.prototype.valueOf()",
      "desc": "The valueOf() method returns the primitive value of the specified object: JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself.You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.prototype.valueOf() to call a custom method instead of the default Object method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.watch()",
      "desc": "The watch() method watches for a property to be assigned a value and runs a function when that occurs.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch",
      "type": "Method"
    },
    {
      "name": "Object.seal()",
      "desc": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal",
      "type": "Method"
    },
    {
      "name": "Object.setPrototypeOf()",
      "desc": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf",
      "type": "Method"
    },
    {
      "name": "Object.values()",
      "desc": "The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Function.arguments",
      "desc": "The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Function.caller",
      "desc": "The function.caller property returns the function that invoked the specified function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller",
      "type": "Property"
    },
    {
      "name": "Function.displayName",
      "desc": "The function.displayName property returns the display name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName",
      "type": "Property"
    },
    {
      "name": "Function.length",
      "desc": "The length property specifies the number of arguments expected by the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
      "type": "Property"
    },
    {
      "name": "Function.name",
      "desc": "The function.name property returns the name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
      "type": "Property"
    },
    {
      "name": "Function.prototype",
      "desc": "The Function.prototype property represents the Function prototype object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype",
      "type": "Property"
    },
    {
      "name": "Function.prototype.apply()",
      "desc": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
      "type": "Method"
    },
    {
      "name": "Function.prototype.bind()",
      "desc": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
      "type": "Method"
    },
    {
      "name": "Function.prototype.call()",
      "desc": "The call() method calls a function with a given this value and arguments provided individually.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
      "type": "Method"
    },
    {
      "name": "Function.prototype.isGenerator()",
      "desc": "The isGenerator() method determines whether or not a function is a generator.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toString()",
      "desc": "The toString() method returns a string representing the source code of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
      "type": "Method"
    },
    {
      "name": "Syntax",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Syntax"
    },
    {
      "name": "Description",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Description"
    },
    {
      "name": "Object",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Properties_of_the_Object_constructor"
    },
    {
      "name": "Object",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods_of_the_Object_constructor"
    },
    {
      "name": "ObjectObject",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Object_instances_and_Object_prototype_object"
    },
    {
      "name": "Examples",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Examples"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#See_also"
    },
    {
      "name": "string.length",
      "desc": "The length property represents the length of a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length",
      "type": "Property"
    },
    {
      "name": "String.fromCharCode()",
      "desc": "The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode",
      "type": "Method"
    },
    {
      "name": "String.fromCodePoint()",
      "desc": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",
      "type": "Method"
    },
    {
      "name": "String.prototype.anchor()",
      "desc": "The anchor() method creates an <a> HTML anchor element that is used as a hypertext target.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor",
      "type": "Method"
    },
    {
      "name": "String.prototype.big()",
      "desc": "The big() method creates a <big> HTML element that causes a string to be displayed in a big font.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.blink()",
      "desc": "The blink() method creates a <blink> HTML element that causes a string to blink.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.bold()",
      "desc": "The bold() method creates a <b> HTML element that causes a string to be displayed as bold.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.charAt()",
      "syntax": "str.charAt(index)",
      "params": {
        "index": "An integer between 0 and 1-less-than the length of the string."
      },
      "desc": "The charAt() method returns the specified character from a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt",
      "type": "Method"
    },
    {
      "name": "String.prototype.charCodeAt()",
      "desc": "The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points > 0x10000). If you want the entire code point value, use codePointAt().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",
      "type": "Method"
    },
    {
      "name": "String.prototype.codePointAt()",
      "desc": "The codePointAt() method returns a non-negative integer that is the Unicode code point value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt",
      "type": "Method"
    },
    {
      "name": "String.prototype.concat()",
      "desc": "The concat() method combines the text of two or more strings and returns a new string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat",
      "type": "Method"
    },
    {
      "name": "String.prototype.endsWith()",
      "desc": "The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
      "type": "Method"
    },
    {
      "name": "String.prototype.fixed()",
      "desc": "The fixed() method creates a <tt> HTML element that causes a string to be displayed in fixed-pitch font.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.fontcolor()",
      "desc": "The fontcolor() method creates a <font> HTML element that causes a string to be displayed in the specified font color.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.fontsize()",
      "desc": "The fontsize() method creates a <font> HTML element that causes a string to be displayed in the specified font size.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.includes()",
      "desc": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",
      "type": "Method"
    },
    {
      "name": "String.prototype.indexOf()",
      "desc": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf",
      "type": "Method"
    },
    {
      "name": "String.prototype.italics()",
      "desc": "The italics() method creates an <i> HTML element that causes a string to be italic.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.lastIndexOf()",
      "desc": "The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf",
      "type": "Method"
    },
    {
      "name": "String.prototype.link()",
      "desc": "The link() method creates a string representing the code for an <a> HTML element to be used as a hypertext link to another URL.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link",
      "type": "Method"
    },
    {
      "name": "String.prototype.localeCompare()",
      "desc": "The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare",
      "type": "Method"
    },
    {
      "name": "String.prototype.match()",
      "desc": "The match() method retrieves the matches when matching a string against a regular expression.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",
      "type": "Method"
    },
    {
      "name": "String.prototype.normalize()",
      "desc": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize",
      "type": "Method"
    },
    {
      "name": "String.prototype.padEnd()",
      "desc": "The padEnd() method pads the current string with a given string (eventually repeated) so that the resulting string reaches a given length. The pad is applied from the end (right) of the current string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "String.prototype.padStart()",
      "desc": "The padStart() method pads the current string with a given string (eventually repeated) so that the resulting string reaches a given length. The pad is applied from the start (left) of the current string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "String.prototype.repeat()",
      "desc": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",
      "type": "Method"
    },
    {
      "name": "String.prototype.replace()",
      "desc": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
      "type": "Method"
    },
    {
      "name": "String.prototype.search()",
      "desc": "The search() method executes a search for a match between a regular expression and this String object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search",
      "type": "Method"
    },
    {
      "name": "String.prototype.slice()",
      "desc": "The slice() method extracts a section of a string and returns a new string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
      "type": "Method"
    },
    {
      "name": "String.prototype.small()",
      "desc": "The small() method creates a <small> HTML element that causes a string to be displayed in a small font.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.split()",
      "desc": "The split() method splits a String object into an array of strings by separating the string into substrings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split",
      "type": "Method"
    },
    {
      "name": "String.prototype.startsWith()",
      "desc": "The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",
      "type": "Method"
    },
    {
      "name": "String.prototype.strike()",
      "desc": "The strike() method creates a <strike> HTML element that causes a string to be displayed as struck-out text.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.sub()",
      "desc": "The sub() method creates a <sub> HTML element that causes a string to be displayed as subscript.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.substr()",
      "desc": "The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr",
      "type": "Method"
    },
    {
      "name": "String.prototype.substring()",
      "desc": "The substring() method returns a subset of a string between one index and another, or through the end of the string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",
      "type": "Method"
    },
    {
      "name": "String.prototype.sup()",
      "desc": "The sup() method creates a <sup> HTML element that causes a string to be displayed as superscript.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "String.prototype.toLocaleLowerCase()",
      "desc": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
      "type": "Method"
    },
    {
      "name": "String.prototype.toLocaleUpperCase()",
      "desc": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
      "type": "Method"
    },
    {
      "name": "String.prototype.toLowerCase()",
      "desc": "The toLowerCase() method returns the calling string value converted to lowercase.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase",
      "type": "Method"
    },
    {
      "name": "String.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "String.prototype.toString()",
      "desc": "The toString() method returns a string representing the specified object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString",
      "type": "Method"
    },
    {
      "name": "String.prototype.toUpperCase()",
      "desc": "The toUpperCase() method returns the calling string value converted to uppercase.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
      "type": "Method"
    },
    {
      "name": "String.prototype.trim()",
      "desc": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim",
      "type": "Method"
    },
    {
      "name": "String.prototype.trimLeft()",
      "desc": "The trimLeft() method removes whitespace from the left end of a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft",
      "type": "Method"
    },
    {
      "name": "String.prototype.trimRight()",
      "desc": "The trimRight() method removes whitespace from the right end of a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight",
      "type": "Method"
    },
    {
      "name": "String.prototype.valueOf()",
      "desc": "The valueOf() method returns the primitive value of a String object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf",
      "type": "Method"
    },
    {
      "name": "String.prototype[@@iterator]()",
      "desc": "The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator",
      "type": "Method"
    },
    {
      "name": "String.raw()",
      "desc": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings (that is, the original, uninterpreted text).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",
      "type": "Method"
    },
    {
      "name": "Function.arguments",
      "desc": "The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Function.caller",
      "desc": "The function.caller property returns the function that invoked the specified function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller",
      "type": "Property"
    },
    {
      "name": "Function.displayName",
      "desc": "The function.displayName property returns the display name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName",
      "type": "Property"
    },
    {
      "name": "Function.length",
      "desc": "The length property specifies the number of arguments expected by the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
      "type": "Property"
    },
    {
      "name": "Function.name",
      "desc": "The function.name property returns the name of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
      "type": "Property"
    },
    {
      "name": "Function.prototype",
      "desc": "The Function.prototype property represents the Function prototype object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype",
      "type": "Property"
    },
    {
      "name": "Function.prototype.apply()",
      "desc": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
      "type": "Method"
    },
    {
      "name": "Function.prototype.bind()",
      "desc": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
      "type": "Method"
    },
    {
      "name": "Function.prototype.call()",
      "desc": "The call() method calls a function with a given this value and arguments provided individually.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
      "type": "Method"
    },
    {
      "name": "Function.prototype.isGenerator()",
      "desc": "The isGenerator() method determines whether or not a function is a generator.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource",
      "type": "Method"
    },
    {
      "name": "Function.prototype.toString()",
      "desc": "The toString() method returns a string representing the source code of the function.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.__proto__",
      "desc": "The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",
      "type": "Property",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.constructor",
      "desc": "Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
      "type": "Property"
    },
    {
      "name": "Object.prototype.__defineGetter__()",
      "desc": "The __defineGetter__ method binds an object's property to a function to be called when that property is looked up.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__defineSetter__()",
      "desc": "The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupGetter__()",
      "desc": "The __lookupGetter__ method returns the function bound as a getter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.__lookupSetter__()",
      "desc": "The __lookupSetter__ method returns the function bound as a setter to the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Object.prototype.hasOwnProperty()",
      "desc": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
      "type": "Method"
    },
    {
      "name": "Object.prototype.isPrototypeOf()",
      "desc": "The isPrototypeOf() method tests for an object in another object's prototype chain.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.propertyIsEnumerable()",
      "desc": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toLocaleString()",
      "desc": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toSource()",
      "desc": "The toSource() method returns a string representing the source code of the object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource",
      "type": "Method"
    },
    {
      "name": "Object.prototype.toString()",
      "desc": "The toString() method returns a string representing object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",
      "type": "Method"
    },
    {
      "name": "Object.prototype.unwatch()",
      "desc": "The unwatch() method removes a watchpoint set with the watch() method.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch",
      "type": "Method"
    },
    {
      "name": "Object.prototype.valueOf()",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",
      "type": "Method"
    },
    {
      "name": "Object.prototype.watch()",
      "desc": "The watch() method watches for a property to be assigned a value and runs a function when that occurs.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch",
      "type": "Method"
    },
    {
      "name": "Description",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Description"
    },
    {
      "name": "Properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Properties"
    },
    {
      "name": "Methods",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#See_also"
    }
  ]
  [
    {
      "name": "Properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#Properties"
    },
    {
      "name": "Constructor",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#Methods"
    },
    {
      "name": "Methods",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#Methods"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#Specifications"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text#See_also"
    },
    {
      "name": "Text()",
      "desc": "The Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text/Text",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "wholeText",
      "desc": "The Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order.  This allows to specify any text node and obtain all adjacent text as a single string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText",
      "type": "Property"
    },
    {
      "name": "splitText()",
      "desc": "The Text.splitText() method breaks the Textnode into two nodes at the specified offset, keeping both nodes in the tree as siblings.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText",
      "type": "Method"
    },
    {
      "name": "CharacterData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "Attr",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
    },
    {
      "name": "ByteString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ByteString"
    },
    {
      "name": "CDATASection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
    },
    {
      "name": "CharacterData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "ChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode"
    },
    {
      "name": "Comment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
    },
    {
      "name": "CustomEvent",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
    },
    {
      "name": "DOMConfiguration",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration"
    },
    {
      "name": "DOMError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
    },
    {
      "name": "DOMErrorHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMErrorHandler"
    },
    {
      "name": "DOMException",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
    },
    {
      "name": "DOMImplementation",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
    },
    {
      "name": "DOMImplementationList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationList"
    },
    {
      "name": "DOMImplementationRegistry",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationRegistry"
    },
    {
      "name": "DOMImplementationSource",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationSource"
    },
    {
      "name": "DOMLocator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMLocator"
    },
    {
      "name": "DOMObject",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMObject"
    },
    {
      "name": "DOMParser",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser"
    },
    {
      "name": "DOMPoint",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint"
    },
    {
      "name": "DOMRect",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
    },
    {
      "name": "DOMString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString"
    },
    {
      "name": "DOMTimeStamp",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
    },
    {
      "name": "DOMTokenList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "name": "DOMUserData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMUserData"
    },
    {
      "name": "Document",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "DocumentFragment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
    },
    {
      "name": "DocumentType",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
    },
    {
      "name": "Element",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
    },
    {
      "name": "ElementTraversal",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ElementTraversal"
    },
    {
      "name": "Entity",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Entity"
    },
    {
      "name": "EntityReference",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EntityReference"
    },
    {
      "name": "Event",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "HTMLCollection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
    },
    {
      "name": "MutationObserver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "NodeFilter",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter"
    },
    {
      "name": "NodeIterator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
    },
    {
      "name": "NodeList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
    },
    {
      "name": "NonDocumentTypeChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode"
    },
    {
      "name": "ProcessingInstruction",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
    },
    {
      "name": "PromiseResolver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver"
    },
    {
      "name": "Range",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
    },
    {
      "name": "TextDecoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"
    },
    {
      "name": "TextEncoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"
    },
    {
      "name": "TimeRanges",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges"
    },
    {
      "name": "TreeWalker",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker"
    },
    {
      "name": "TypeInfo",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TypeInfo"
    },
    {
      "name": "USVString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/USVString"
    },
    {
      "name": "UserDataHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/UserDataHandler"
    },
    {
      "name": "XMLDocument",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
    }
  ]
  [
    {
      "name": "Properties",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker#Properties"
    },
    {
      "name": "Methods",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker#Methods"
    },
    {
      "name": "Specifications",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker#Specification"
    },
    {
      "name": "Browser compatibility",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker#Browser_compatibility"
    },
    {
      "name": "See also",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker#See_also"
    },
    {
      "name": "currentNode",
      "desc": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode",
      "type": "Property"
    },
    {
      "name": "filter",
      "desc": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter",
      "type": "Property"
    },
    {
      "name": "root",
      "desc": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root",
      "type": "Property"
    },
    {
      "name": "whatToShow",
      "desc": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow",
      "type": "Property"
    },
    {
      "name": "firstChild()",
      "desc": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild",
      "type": "Method"
    },
    {
      "name": "lastChild()",
      "desc": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild",
      "type": "Method"
    },
    {
      "name": "nextNode()",
      "desc": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode",
      "type": "Method"
    },
    {
      "name": "nextSibling()",
      "desc": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling",
      "type": "Method"
    },
    {
      "name": "parentNode()",
      "desc": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode",
      "type": "Method"
    },
    {
      "name": "previousNode()",
      "desc": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode",
      "type": "Method"
    },
    {
      "name": "previousSibling()",
      "desc": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling",
      "type": "Method"
    },
    {
      "name": "Attr",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
    },
    {
      "name": "ByteString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ByteString"
    },
    {
      "name": "CDATASection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
    },
    {
      "name": "CSSPrimitiveValue",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue"
    },
    {
      "name": "CSSValue",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CSSValue"
    },
    {
      "name": "CSSValueList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList"
    },
    {
      "name": "CharacterData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
    },
    {
      "name": "ChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode"
    },
    {
      "name": "Comment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
    },
    {
      "name": "CustomEvent",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
    },
    {
      "name": "DOMConfiguration",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration"
    },
    {
      "name": "DOMError",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
    },
    {
      "name": "DOMErrorHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMErrorHandler"
    },
    {
      "name": "DOMException",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
    },
    {
      "name": "DOMImplementation",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
    },
    {
      "name": "DOMImplementationList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationList"
    },
    {
      "name": "DOMImplementationRegistry",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationRegistry"
    },
    {
      "name": "DOMImplementationSource",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementationSource"
    },
    {
      "name": "DOMLocator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMLocator"
    },
    {
      "name": "DOMObject",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMObject"
    },
    {
      "name": "DOMParser",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser"
    },
    {
      "name": "DOMPoint",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint"
    },
    {
      "name": "DOMRect",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
    },
    {
      "name": "DOMString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString"
    },
    {
      "name": "DOMTimeStamp",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
    },
    {
      "name": "DOMTokenList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "name": "DOMUserData",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DOMUserData"
    },
    {
      "name": "Document",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
    },
    {
      "name": "DocumentFragment",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
    },
    {
      "name": "DocumentType",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
    },
    {
      "name": "Element",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
    },
    {
      "name": "ElementTraversal",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ElementTraversal"
    },
    {
      "name": "Entity",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Entity"
    },
    {
      "name": "EntityReference",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EntityReference"
    },
    {
      "name": "Event",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
    },
    {
      "name": "EventTarget",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
    },
    {
      "name": "HTMLCollection",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
    },
    {
      "name": "MutationObserver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    },
    {
      "name": "Node",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
    },
    {
      "name": "NodeFilter",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter"
    },
    {
      "name": "NodeIterator",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
    },
    {
      "name": "NodeList",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
    },
    {
      "name": "NonDocumentTypeChildNode",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode"
    },
    {
      "name": "ProcessingInstruction",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
    },
    {
      "name": "PromiseResolver",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver"
    },
    {
      "name": "Range",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
    },
    {
      "name": "Text",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Text"
    },
    {
      "name": "TextDecoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"
    },
    {
      "name": "TextEncoder",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"
    },
    {
      "name": "TimeRanges",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges"
    },
    {
      "name": "TypeInfo",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/TypeInfo"
    },
    {
      "name": "USVString",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/USVString"
    },
    {
      "name": "UserDataHandler",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/UserDataHandler"
    },
    {
      "name": "XMLDocument",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
    }
  ]
  [
    {
      "name": "Summary",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Summary"
    },
    {
      "name": "Syntax",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Syntax"
    },
    {
      "name": "Example",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Example"
    },
    {
      "name": "Specification",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Specification"
    },
    {
      "name": "Window.applicationCache",
      "desc": "Returns a reference to the application cache object for the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache",
      "type": "Property"
    },
    {
      "name": "Window.caches",
      "desc": "The Window.caches read-only property returns the CacheStorage object associated with the current origin. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/caches",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.closed",
      "desc": "This read-only property indicates whether the referenced window is closed or not.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/closed",
      "type": "Property"
    },
    {
      "name": "Window.controllers",
      "desc": "Returns the XUL controllers of the chrome window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers",
      "type": "Property",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.crypto",
      "desc": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto",
      "type": "Property"
    },
    {
      "name": "Window.devicePixelRatio",
      "desc": "The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio",
      "type": "Property"
    },
    {
      "name": "Window.dialogArguments",
      "desc": "The dialogArguments property returns the parameters that were passed into the window.showModalDialog() method. This lets you determine what parameters were specified when the modal dialog was created.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/dialogArguments",
      "type": "Property"
    },
    {
      "name": "Window.frameElement",
      "desc": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement",
      "type": "Property"
    },
    {
      "name": "Window.frames",
      "desc": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frames",
      "type": "Property"
    },
    {
      "name": "Window.fullScreen",
      "desc": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen",
      "type": "Property"
    },
    {
      "name": "Window.history",
      "desc": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/history",
      "type": "Property"
    },
    {
      "name": "Window.indexedDB",
      "desc": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB",
      "type": "Property"
    },
    {
      "name": "Window.innerHeight",
      "desc": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight",
      "type": "Property"
    },
    {
      "name": "Window.innerWidth",
      "desc": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth",
      "type": "Property"
    },
    {
      "name": "Window.isSecureContext",
      "desc": "The Window.isSecureContext read-only property indicates whether a context is capable of using features that require secure contexts.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext",
      "type": "Property"
    },
    {
      "name": "Window.length",
      "desc": "Returns the number of frames (either <frame> or <iframe> elements) in the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/length",
      "type": "Property"
    },
    {
      "name": "Window.localStorage",
      "desc": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends—that is, when the browser is closed.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
      "type": "Property"
    },
    {
      "name": "Window.location",
      "desc": "The Window.location read-only property returns a Location object with information about the current location of the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/location",
      "type": "Property"
    },
    {
      "name": "Window.locationbar",
      "desc": "Returns the locationbar object, whose visibility can be checked.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar",
      "type": "Property"
    },
    {
      "name": "Window.menubar",
      "desc": "Returns the menubar object, whose visibility can be checked.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar",
      "type": "Property"
    },
    {
      "name": "Window.messageManager",
      "desc": "Returns the message manager object for this window. See The message manager for details.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/messageManager",
      "type": "Property"
    },
    {
      "name": "Window.mozAnimationStartTime",
      "desc": "Returns the time, in milliseconds since the epoch, at which animations started now should be considered to have started. This value should be used instead of, for example, Date.now(), because this value will be the same for all animations started in this window during this refresh interval, allowing them to remain in sync with one another.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozAnimationStartTime",
      "type": "Property",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.mozInnerScreenX",
      "desc": "Gets the X coordinate of the top-left corner of the window's viewport, in screen coordinates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX",
      "type": "Property"
    },
    {
      "name": "Window.mozInnerScreenY",
      "desc": "Gets the Y coordinate of the top-left corner of the window's viewport, in screen coordinates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY",
      "type": "Property"
    },
    {
      "name": "Window.mozPaintCount",
      "desc": "Returns the number of times the current document has been painted to the screen in this window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozPaintCount",
      "type": "Property"
    },
    {
      "name": "Window.name",
      "desc": "Gets/sets the name of the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/name",
      "type": "Property"
    },
    {
      "name": "Window.navigator",
      "desc": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator",
      "type": "Property"
    },
    {
      "name": "Window.onabort",
      "desc": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
      "type": "Property"
    },
    {
      "name": "Window.onafterprint",
      "desc": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
      "type": "Property"
    },
    {
      "name": "Window.onbeforeprint",
      "desc": "The onbeforeprint property sets and returns the onbeforeprint event handler code for the current window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint",
      "type": "Property"
    },
    {
      "name": "Window.onbeforeunload",
      "desc": "The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
      "type": "Property"
    },
    {
      "name": "Window.onblur",
      "desc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
      "type": "Property"
    },
    {
      "name": "Window.onchange",
      "desc": "The onchange property sets and returns the event handler for the change event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
      "type": "Property"
    },
    {
      "name": "Window.onclick",
      "desc": "The onclick property returns the click event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
      "type": "Property"
    },
    {
      "name": "Window.onclose",
      "desc": "An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose",
      "type": "Property"
    },
    {
      "name": "Window.oncontextmenu",
      "desc": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
      "type": "Property"
    },
    {
      "name": "Window.ondblclick",
      "desc": "The ondblclick property returns the onDblClick event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
      "type": "Property"
    },
    {
      "name": "Window.ondevicelight",
      "desc": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.ondevicemotion",
      "desc": "An event handler for the devicemotion events sent to the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion",
      "type": "Property"
    },
    {
      "name": "Window.ondeviceorientation",
      "desc": "An event handler for the deviceorientation events sent to the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation",
      "type": "Property"
    },
    {
      "name": "Window.ondeviceproximity",
      "desc": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceproximity",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.onerror",
      "desc": "An event handler for the error event. Error events are fired at various targets for different kinds of errors:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror",
      "type": "Property"
    },
    {
      "name": "Window.onfocus",
      "desc": "The onfocus property returns the onFocus event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
      "type": "Property"
    },
    {
      "name": "Window.onhashchange",
      "desc": "The hashchange event fires when a window's hash changes (see location.hash).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
      "type": "Property"
    },
    {
      "name": "Window.oninput",
      "desc": "An event handler for the input event on the window. The input event is raised when an <input> element value changes.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
      "type": "Property"
    },
    {
      "name": "Window.onkeydown",
      "desc": "The onkeydown property returns the onKeyDown event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
      "type": "Property"
    },
    {
      "name": "Window.onkeypress",
      "desc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
      "type": "Property"
    },
    {
      "name": "Window.onkeyup",
      "desc": "The onkeyup property returns the onKeyUp event handler code for the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
      "type": "Property"
    },
    {
      "name": "Window.onlanguagechange",
      "desc": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.onload",
      "desc": "An event handler for the load event of a window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
      "type": "Property"
    },
    {
      "name": "Window.onmousedown",
      "desc": "The onmousedown property returns the onmousedown event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
      "type": "Property"
    },
    {
      "name": "Window.onmousemove",
      "desc": "The onmousemove property returns the mousemove event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
      "type": "Property"
    },
    {
      "name": "Window.onmouseout",
      "desc": "The onmouseout property returns the onMouseOut event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
      "type": "Property"
    },
    {
      "name": "Window.onmouseover",
      "desc": "The onmouseover property returns the onMouseOver event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
      "type": "Property"
    },
    {
      "name": "Window.onmouseup",
      "desc": "The onmouseup property returns the onMouseUp event handler code on the current element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
      "type": "Property"
    },
    {
      "name": "Window.onmozbeforepaint",
      "desc": "An event handler for the MozBeforePaint event. This is used in concert with the window.mozRequestAnimationFrame() method to perform smooth, synchronized animations from JavaScript code.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint",
      "type": "Property"
    },
    {
      "name": "Window.onpaint",
      "desc": "An event handler for the paint event on the window. Not working in Gecko-based applications currently, see Notes section!",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onpaint",
      "type": "Property"
    },
    {
      "name": "Window.onpointercancel",
      "desc": "A global event handler for the pointercancel event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel",
      "type": "Property"
    },
    {
      "name": "Window.onpointerdown",
      "desc": "A global event handler for the pointerdown event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown",
      "type": "Property"
    },
    {
      "name": "Window.onpointerenter",
      "desc": "A global event handler for the pointerenter event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter",
      "type": "Property"
    },
    {
      "name": "Window.onpointerleave",
      "desc": "A global event handler for the pointerleave event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave",
      "type": "Property"
    },
    {
      "name": "Window.onpointermove",
      "desc": "A global event handler for the pointermove event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove",
      "type": "Property"
    },
    {
      "name": "Window.onpointerout",
      "desc": "A global event handler for the pointerout event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout",
      "type": "Property"
    },
    {
      "name": "Window.onpointerover",
      "desc": "A global event handler for the pointerover event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover",
      "type": "Property"
    },
    {
      "name": "Window.onpointerup",
      "desc": "A global event handler for the pointerup event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup",
      "type": "Property"
    },
    {
      "name": "Window.onpopstate",
      "desc": "An event handler for the popstate event on the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
      "type": "Property"
    },
    {
      "name": "Window.onreset",
      "desc": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
      "type": "Property"
    },
    {
      "name": "Window.onresize",
      "desc": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
      "type": "Property"
    },
    {
      "name": "Window.onscroll",
      "desc": "An event handler for scroll events on element.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
      "type": "Property"
    },
    {
      "name": "Window.onselect",
      "desc": "An event handler for the select event on the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
      "type": "Property"
    },
    {
      "name": "Window.onselectstart",
      "desc": "The GlobalEventHandlers.onselectstart property represents the event handler that is called when a selectstart event reaches this object.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.onstorage",
      "desc": "The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage",
      "type": "Property"
    },
    {
      "name": "Window.onsubmit",
      "desc": "An event handler for the submit event on the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
      "type": "Property"
    },
    {
      "name": "Window.ontouchcancel",
      "desc": "A global event handler for the touchcancel event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.ontouchmove",
      "desc": "A global event handler for the touchmove event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHanders.ontouchmove",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.ontouchstart",
      "desc": "A global event handler for the touchstart event.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.onunload",
      "desc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
      "type": "Property"
    },
    {
      "name": "Window.onuserproximity",
      "desc": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onuserproximity",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.opener",
      "desc": "Returns a reference to the window that opened this current window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/opener",
      "type": "Property"
    },
    {
      "name": "Window.outerHeight",
      "desc": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight",
      "type": "Property"
    },
    {
      "name": "Window.outerWidth",
      "desc": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth",
      "type": "Property"
    },
    {
      "name": "Window.parent",
      "desc": "A reference to the parent of the current window or subframe.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/parent",
      "type": "Property"
    },
    {
      "name": "Window.performance",
      "desc": "The Web Performance API allows web pages access to certain functions for measuring the performance of web pages and web applications, including the Navigation Timing API and high-resolution time data.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/performance",
      "type": "Property"
    },
    {
      "name": "Window.personalbar",
      "desc": "Returns the personalbar object, whose visibility can be toggled in the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar",
      "type": "Property"
    },
    {
      "name": "Window.screen",
      "desc": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screen",
      "type": "Property"
    },
    {
      "name": "Window.screenX",
      "desc": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX",
      "type": "Property"
    },
    {
      "name": "Window.screenY",
      "desc": "The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY",
      "type": "Property"
    },
    {
      "name": "Window.scrollbars",
      "desc": "Returns the scrollbars object, whose visibility can be checked.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars",
      "type": "Property"
    },
    {
      "name": "Window.scrollMaxX",
      "desc": "Returns the maximum number of pixels that the document can be scrolled horizontally.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX",
      "type": "Property"
    },
    {
      "name": "Window.scrollMaxY",
      "desc": "Returns the maximum number of pixels that the document can be scrolled vertically.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY",
      "type": "Property"
    },
    {
      "name": "Window.scrollX",
      "desc": "Returns the number of pixels that the document has already been scrolled horizontally.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX",
      "type": "Property"
    },
    {
      "name": "Window.scrollY",
      "desc": "Returns the number of pixels that the document has already been scrolled vertically.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY",
      "type": "Property"
    },
    {
      "name": "Window.self",
      "desc": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/self",
      "type": "Property"
    },
    {
      "name": "Window.sessionStorage",
      "desc": "The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage",
      "type": "Property"
    },
    {
      "name": "Window.sidebar",
      "desc": "Returns a sidebar object, which contains several methods for registering add-ons with browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sidebar",
      "type": "Property",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.speechSynthesis",
      "desc": "The speechSynthesis read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis",
      "type": "Property",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.status",
      "desc": "Sets the text in the status bar at the bottom of the browser or returns the previously set text.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/status",
      "type": "Property"
    },
    {
      "name": "Window.statusbar",
      "desc": "Returns the statusbar object, whose visibility can be toggled in the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar",
      "type": "Property"
    },
    {
      "name": "Window.toolbar",
      "desc": "Returns the toolbar object, whose visibility can be toggled in the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar",
      "type": "Property"
    },
    {
      "name": "Window.top",
      "desc": "Returns a reference to the topmost window in the window hierarchy.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/top",
      "type": "Property"
    },
    {
      "name": "Window.URL",
      "desc": "The Window.URL property returns an object that provides static methods used for creating and managing object URLs. It can also be called as a constructor to construct URL objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/URL",
      "type": "Property"
    },
    {
      "name": "Window.window",
      "desc": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/window",
      "type": "Property"
    },
    {
      "name": "Window.alert()",
      "desc": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/alert",
      "type": "Method"
    },
    {
      "name": "Window.atob()",
      "desc": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob",
      "type": "Method"
    },
    {
      "name": "Window.back()",
      "desc": "Returns the window to the previous item in the history. This was a Gecko-specific method. Use the standard history.back method instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/back",
      "type": "Method"
    },
    {
      "name": "Window.blur()",
      "desc": "Shifts focus away from the window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur",
      "type": "Method"
    },
    {
      "name": "Window.btoa()",
      "desc": "Creates a base-64 encoded ASCII string from a \"string\" of binary data.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa",
      "type": "Method"
    },
    {
      "name": "Window.cancelAnimationFrame()",
      "desc": "Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.cancelIdleCallback",
      "desc": "The Window.cancelIdleCallback() enables you to cancel a callback previously scheduled with Window.requestIdleCallback.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback",
      "type": "Method"
    },
    {
      "name": "Window.captureEvents()",
      "desc": "Registers the window to capture all events of the specified type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents",
      "type": "Method"
    },
    {
      "name": "Window.clearImmediate()",
      "desc": "This method clears the action specified by window.setImmediate.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate",
      "type": "Method"
    },
    {
      "name": "Window.clearInterval()",
      "desc": "Cancels repeated action which was set up using setInterval.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",
      "type": "Method"
    },
    {
      "name": "Window.clearTimeout()",
      "desc": "Clears the delay set by WindowTimers.setTimeout().",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout",
      "type": "Method"
    },
    {
      "name": "Window.close()",
      "desc": "The Window.close() method closes the current window, or the window on which it was called.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/close",
      "type": "Method"
    },
    {
      "name": "Window.confirm()",
      "desc": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",
      "type": "Method"
    },
    {
      "name": "Window.convertPointFromNodeToPage()",
      "desc": "The Window.convertPointFromNodeToPage() method converts a Point object from coordinates based on the given CSS node to coordinates based on the page.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromNodeToPage",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.createImageBitmap()",
      "desc": "The createImageBitmap method accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap",
      "type": "Method"
    },
    {
      "name": "Window.dump()",
      "desc": "Prints messages to the (native) console.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/dump",
      "type": "Method"
    },
    {
      "name": "Window.event",
      "desc": "window.event is a proprietary Microsoft Internet Explorer property which is only available while a DOM event handler is being called. Its value is the Event object currently being handled.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/event",
      "type": "Method"
    },
    {
      "name": "Window.fetch()",
      "desc": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch",
      "type": "Method",
      "warning": "This is an experimental API that should not be used in production code."
    },
    {
      "name": "Window.find()",
      "desc": "Finds a string in a window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/find",
      "type": "Method"
    },
    {
      "name": "Window.focus()",
      "desc": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus",
      "type": "Method"
    },
    {
      "name": "Window.forward()",
      "desc": "Moves the window one document forward in the history. This was a Gecko-specific method. Use the standard history.forward method instead.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/forward",
      "type": "Method"
    },
    {
      "name": "Window.getAttention()",
      "desc": "Attempts to get the user's attention. How this happens varies based on OS and window manager.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getAttention",
      "type": "Method"
    },
    {
      "name": "Window.getComputedStyle()",
      "desc": "The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle",
      "type": "Method"
    },
    {
      "name": "Window.getDefaultComputedStyle()",
      "desc": "getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling.  That is, only user-agent and user styles are taken into account.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/window/getDefaultComputedStyle",
      "type": "Method"
    },
    {
      "name": "Window.getSelection()",
      "desc": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection",
      "type": "Method"
    },
    {
      "name": "Window.home()",
      "desc": "Returns the window to the home page.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/home",
      "type": "Method"
    },
    {
      "name": "Window.importDialog()",
      "desc": "Because opening windows on mobile isn't necessarily appropriate, the Firefox Mobile team designed the importDialog() method to replace window.openDialog(). Instead of opening a new window, it merges the specified XUL dialog into the main window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/importDialog",
      "type": "Method"
    },
    {
      "name": "Window.matchMedia()",
      "desc": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia",
      "type": "Method"
    },
    {
      "name": "Window.minimize()",
      "desc": "Sets a window to minimized state (a way to undo it programatically is by calling window.moveTo()).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/minimize",
      "type": "Method"
    },
    {
      "name": "Window.moveBy()",
      "desc": "Moves the current window by a specified amount.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy",
      "type": "Method"
    },
    {
      "name": "Window.moveTo()",
      "desc": "Moves the window to the specified coordinates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo",
      "type": "Method"
    },
    {
      "name": "Window.open()",
      "desc": "Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/open",
      "type": "Method"
    },
    {
      "name": "Window.openDialog()",
      "desc": "window.openDialog() is an extension to window.open(). It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog",
      "type": "Method"
    },
    {
      "name": "Window.postMessage()",
      "desc": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",
      "type": "Method"
    },
    {
      "name": "Window.print()",
      "desc": "Opens the Print Dialog to print the current document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/print",
      "type": "Method"
    },
    {
      "name": "Window.prompt()",
      "desc": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",
      "type": "Method"
    },
    {
      "name": "Window.releaseEvents()",
      "desc": "Releases the window from trapping events of a specific type.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents",
      "type": "Method"
    },
    {
      "name": "Window.requestAnimationFrame()",
      "desc": "You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs or in hidden <iframe>s in order to improve performance and battery life.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame",
      "type": "Method"
    },
    {
      "name": "Window.requestIdleCallback",
      "desc": "The Window.requestIdleCallback() method enables the scheduling of tasks during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback",
      "type": "Method"
    },
    {
      "name": "Window.resizeBy()",
      "desc": "Resizes the current window by a certain amount.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy",
      "type": "Method"
    },
    {
      "name": "Window.resizeTo()",
      "desc": "Dynamically resizes window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo",
      "type": "Method"
    },
    {
      "name": "Window.restore()",
      "desc": "This method is currently not working, but you can use:",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/restore",
      "type": "Method"
    },
    {
      "name": "Window.scroll()",
      "desc": "Scrolls the window to a particular place in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll",
      "type": "Method"
    },
    {
      "name": "Window.scrollBy()",
      "desc": "Scrolls the document in the window by the given amount.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy",
      "type": "Method"
    },
    {
      "name": "Window.scrollByLines()",
      "desc": "Scrolls the document by the given number of lines.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines",
      "type": "Method"
    },
    {
      "name": "Window.scrollByPages()",
      "desc": "Scrolls the current document by the specified number of pages.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.scrollTo()",
      "desc": "Scrolls to a particular set of coordinates in the document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo",
      "type": "Method"
    },
    {
      "name": "Window.setCursor()",
      "desc": "Changes the cursor for the current window.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setCursor",
      "type": "Method"
    },
    {
      "name": "Window.setImmediate()",
      "desc": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate",
      "type": "Method"
    },
    {
      "name": "Window.setInterval()",
      "desc": "Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. Returns an intervalID.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",
      "type": "Method"
    },
    {
      "name": "Window.setTimeout()",
      "desc": "Calls a function or executes a code snippet after a specified delay.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout",
      "type": "Method"
    },
    {
      "name": "Window.showModalDialog()",
      "desc": "The Window.showModalDialog() creates and displays a modal dialog box containing a specified HTML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog",
      "type": "Method",
      "warning": "This deprecated API should no longer be used, but will probably still work."
    },
    {
      "name": "Window.sizeToContent()",
      "desc": "The Window.sizeToContent() method sizes the window according to its content. In order for it to work, the DOM content should be loaded when this function is called, for example once the DOMContentLoaded event has been thrown.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent",
      "type": "Method",
      "warning": "This API has not been standardized."
    },
    {
      "name": "Window.stop()",
      "desc": "This method stops window loading.",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/stop",
      "type": "Method"
    },
    {
      "name": "Window.updateCommands()",
      "desc": "Updates the state of commands of the current chrome window (UI).",
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands",
      "type": "Method"
    }
  ]
  [
    {
      "name": "Abstraction",
      "desc": "Abstraction in computer programming is a way to reduce complexity and allow efficient design and implementation in complex software systems. It hides the technical complexity of systems behind simpler APIs.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Abstraction"
    },
    {
      "name": "Accessibility",
      "desc": "Web Accessibility (A11Y) refers to best practices for keeping a website usable despite physical and technical restrictions. Web accessibility is formally defined and discussed at the W3C through the Web Accessibility Initiative (WAI).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Accessibility"
    },
    {
      "name": "Adobe Flash",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Adobe_Flash"
    },
    {
      "name": "AJAX",
      "desc": "AJAX (Asynchronous JavaScript And XML) is a programming practice of combining HTML, CSS, JavaScript, the DOM, and the XMLHttpRequest object to build complex webpages that update dynamically without entirely reloading.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/AJAX"
    },
    {
      "name": "Algorithm",
      "desc": "An algorithm is a self-contained series of instructions that perform a function.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Algorithm"
    },
    {
      "name": "API",
      "desc": "An API (Application Programming Interface) is a set of features and rules allowing interaction between the software providing the API and other software components. In Web development, API commonly means a set of standard methods, properties, events, and URLs for interacting with Web content.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/API"
    },
    {
      "name": "Apple Safari",
      "desc": "Safari is a Web browser developed by Apple and bundled with both Mac OS X and iOS. It's based on the open source WebKit engine.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Apple_Safari"
    },
    {
      "name": "Application Context",
      "desc": "An application context is a top-level browsing context that has a manifest applied to it.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/application_context"
    },
    {
      "name": "Argument",
      "desc": "An argument is a value (primitive or object) passed as input to a function.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Argument"
    },
    {
      "name": "ARIA",
      "desc": "ARIA (Accessible Rich Internet Applications) is a W3C specification for adding semantics and other metadata to HTML to cater to users of assistive technology.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ARIA"
    },
    {
      "name": "ARPA",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ARPA"
    },
    {
      "name": "Arpanet",
      "desc": "The ARPAnet (advanced research projects agency network) was an early computer network, constructed in 1969 as a robust medium to transmit sensitive military data and to connect leading research groups throughout the United States. ARPAnet first ran NCP (network control protocol) and subsequently the first version of the Internet protocol or TCP/IP suite, making ARPAnet a prominent part of the nascent Internet. ARPAnet was closed in early 1990.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Arpanet"
    },
    {
      "name": "Array",
      "desc": "An array is an ordered collection of data (either primitive or object). Based on its place in the array, each data item has a numeric index through which you can access the corresponding value. In JavaScript, arrays are also objects that can be manipulated with various methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/array"
    },
    {
      "name": "ASCII",
      "desc": "ASCII (American Standard Code for Information Interchange) is one of the most popular coding method used by computers for converting letters, numbers, punctuation and control codes into digital form. Since 2007, UTF-8 superseded it on the Web.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ASCII"
    },
    {
      "name": "Asynchronous",
      "desc": "Technical review completed. Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Asynchronous"
    },
    {
      "name": "ATAG",
      "desc": "ATAG (Authoring Tool Accessibility Guidelines) is a W3C recommendation for building accessible-authoring tools that produce accessible contents.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ATAG"
    },
    {
      "name": "Attribute",
      "desc": "An attribute extends a tag, changing tag behavior or providing metadata. An attribute always has the form name=value (giving the attribute's identifier and the attribute's associated value).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Attribute"
    },
    {
      "name": "Bandwidth",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Bandwidth"
    },
    {
      "name": "BiDi",
      "desc": "BiDi (BiDirectional) refers to a document containing both right-to-left and left-to-right text. Even when both directionalities occur in the same paragraph, the text in each language must appear in its proper directionality.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/BiDi"
    },
    {
      "name": "Blink",
      "desc": "Blink is an open-source browser layout engine developed by Google as part of Chromium (and therefore part of Chrome as well). Specifically, Blink is a fork of the WebCore library in WebKit, which handles layout, rendering, and DOM.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Blink"
    },
    {
      "name": "Block",
      "desc": "The term block can have several meanings depending on the context. It may refer to:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Block"
    },
    {
      "name": "Block (CSS)",
      "desc": "A block on a webpage is an HTML element that appears underneath the preceding element and above the following element. For example, <p> is by default a block-level element, whereas <a> is not (i.e., by default you can put a link in the middle of a paragraph; the link doesn't have to start its own line). Using display you can change whether an element displays inline or as a block (among many other options).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Block/CSS"
    },
    {
      "name": "Block (scripting)",
      "desc": "In JavaScript, a block is a collection of related statements enclosed in braces (\\\"{}\\\"). For example, you can put a block of statements after if (condition), indicating that the interpreter must skip the whole block if the condition is false.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Block/Scripting"
    },
    {
      "name": "Boolean",
      "desc": "In computer science, a boolean is a logical data type that can have only the values true or false.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Boolean"
    },
    {
      "name": "Boot2Gecko",
      "desc": "Boot2Gecko (B2G) is the engineering codename for Firefox OS and refers to builds that haven't yet received official Firefox OS branding. (Firefox OS was also often called Boot2Gecko before the project had an official name.)",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Boot2Gecko"
    },
    {
      "name": "Bounding Box",
      "desc": "The bounding box of an element is the tightest fitting rectangle aligned with the axes of that element's user coordinate system that entirely encloses it and its descendants.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/bounding_box"
    },
    {
      "name": "Browser",
      "desc": "A Web browser is a program that retrieves and displays pages from the Web, and lets users access further pages through hyperlinks.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Browser"
    },
    {
      "name": "Browsing context",
      "desc": "A browsing context is the environment in which a browser displays a Document (normally a tab nowadays, but possibly also a window or a frame within a page).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context"
    },
    {
      "name": "Cacheable",
      "desc": "A cacheable response is an HTTP response that can be cached, that is stored to be retrieved and used later, saving a new request to the server. Not all HTTP responses can be cached, there are the following constraints for an HTTP response to be cached:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/cacheable"
    },
    {
      "name": "CalDAV",
      "desc": "CalDAV (Calendaring extensions to WebDAV) is a protocol standardized by the IETF and used to remotely access calendar data from a server.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CalDAV"
    },
    {
      "name": "Call stack",
      "desc": "A call stack is a mechanism for an interpreter to keep track of its place in a script that calls functions from within functions.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"
    },
    {
      "name": "Canvas",
      "desc": "The HTML <canvas> element provides an empty graphic zone on which specific JavaScript APIs can draw (such as Canvas 2D or WebGL).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Canvas"
    },
    {
      "name": "Card sorting",
      "desc": "Card sorting is a simple technique used in Information architecture whereby people involved in the design of a website (or other type of product) are invited to write down the content / services / features they feel the product should contain, and then organize those features into categories or groupings. This can be used for example to work out what should go on each page of a website. The name comes from the fact that often card sorting is carried out by literally writing the items to sort onto cards, and then arranging the cards into piles.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Card_sorting"
    },
    {
      "name": "CardDAV",
      "desc": "CardDAV (vCard Extension to WebDAV) is a protocol standardized by the IETF and used to remote-access or share contact information over a server.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CardDAV"
    },
    {
      "name": "CDN",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CDN"
    },
    {
      "name": "Certificate authority",
      "desc": "A certificate authority (CA) is an organization that signs digital certificates and their associated public keys. This certifies that an organization that requested a digital certificate (e.g., Mozilla Corporation) is authorized to request a certificate for the subject named in the certificate (e.g., mozilla.org).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Certificate_authority"
    },
    {
      "name": "Certified",
      "desc": "Certified means that an application, content or data transmission has successfully undergone evaluation by professionals with expertise in the relevant field, thereby indicating completeness, security and trustworthiness.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Certified"
    },
    {
      "name": "Character",
      "desc": "A character is either a symbol (letters, numbers, punctuation) or non-printing \"control\" (e.g., carriage return or soft hyphen).  UTF-8 is the most common character set and includes the graphemes of the most popular human languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Character"
    },
    {
      "name": "character encoding",
      "desc": "Character encoding is a set of representation for characters in an encoding system.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/character_encoding"
    },
    {
      "name": "Chrome",
      "desc": "In a browser, the chrome is any visible aspect of a browser aside from the webpages themselves (e.g., toolbars, menu bar, tabs). This should not to be confused with the Google Chrome browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Chrome"
    },
    {
      "name": "CIA",
      "desc": "CIA (Confidentiality, Integrity, Availability) (also called the CIA triad or AIC triad) is a model that guides an organization's policies for information security.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CIA"
    },
    {
      "name": "Cipher",
      "desc": "In cryptography, a cipher is an algorithm that can encode cleartext to make it unreadable, and to decode it back.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cipher"
    },
    {
      "name": "Cipher suite",
      "desc": "A cipher suite is a combination of a key exchange algorithm, authentication method, bulk encryption cipher, and message authentication code.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cipher_suite"
    },
    {
      "name": "Ciphertext",
      "desc": "In cryptography, a ciphertext is a scrambled message that conveys information but is not legible unless decrypted with the right cipher and the right secret (usually a key), reproducing the original cleartext. A ciphertext's security, and therefore the secrecy of the contained information, depends on using a secure cipher and keeping the key secret.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Ciphertext"
    },
    {
      "name": "Class",
      "desc": "In object-oriented programming, a class defines an object's characteristics. Class is a template definition of an object's properties and methods, the \"blueprint\" from which other more specific instances of the object are drawn.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Class"
    },
    {
      "name": "Closure",
      "desc": "The binding which defines the scope of execution. In JavaScript, functions create a closure context.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Closure"
    },
    {
      "name": "CMS",
      "desc": "A CMS (Content Management System) is software that allows users to publish, organize, change, or remove various kinds of content, not only text but also embedded images, video, audio, and interactive code.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CMS"
    },
    {
      "name": "Codec",
      "desc": "A codec  (a derivative from \"coder-decoder\") is a computer program that encodes or decodes a data stream.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Codec"
    },
    {
      "name": "Compile",
      "desc": "Compiling is the process of transforming a computer program in a given programming language into the same program written in another language (normally a binary language that the computer can execute).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Compile"
    },
    {
      "name": "Compile time",
      "desc": "The compile time is the time from when the program is first loaded until the program is parsed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Compile_time"
    },
    {
      "name": "Computer Programming",
      "desc": "Programming is a process that formulates the solution of a computing problem, or automates a repetitive task, as a series of sequential instructions in an executable program.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Computer_Programming"
    },
    {
      "name": "Conditional",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Conditional"
    },
    {
      "name": "Constant",
      "desc": "A constant is a value that the programmer cannot change, for example numbers (1, 2, 42). With variables, on the other hand, the programmer can assign a new value to a variable name already in use.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Constant"
    },
    {
      "name": "Constructor",
      "desc": "A constructor belongs to a particular class object that is instantiated. The constructor initializes this object and can provide access to its private information. The concept of a constructor can be applied to most object-oriented programming languages. Essentially, a constructor in JavaScript is usually declared at the instance of a class.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Constructor"
    },
    {
      "name": "Control flow",
      "desc": "The control flow is the order in which the computer executes statements in a script.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Control_flow"
    },
    {
      "name": "Cookie",
      "desc": "A cookie is a small stub of information left by a website on a visitor's computer through the web browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cookie"
    },
    {
      "name": "Copyleft",
      "desc": "Copyleft is a term, usually referring to a license, used to indicate that such license requires that redistribution of said work is subject to the same license as the original. Examples of copyleft licenses are the GNU GPL (for software) and the Creative Commons SA (Share Alike) licenses (for works of art).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Copyleft"
    },
    {
      "name": "CORS",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CORS"
    },
    {
      "name": "Crawler",
      "desc": "A web crawler is a program, often called a bot or robot, which systematically browses the Web to collect data from webpages.  Typically search engines use crawlers to build indexes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Crawler"
    },
    {
      "name": "CRLF",
      "desc": "CR and LF are control characters or bytecode that can be used to mark a line break in a text file.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CRLF"
    },
    {
      "name": "Cross-site scripting",
      "desc": "Technical review completed. Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting"
    },
    {
      "name": "CRUD",
      "desc": "CRUD (Create, Read, Update, Delete) is an acronym for ways one can operate on stored data. It is a mnemonic for the four basic functions of persistent storage.  CRUD typically refers to operations performed in a database or datastore, but it can also apply to higher level functions of an application such as soft deletes where data is not actually deleted but marked as deleted via a status.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CRUD"
    },
    {
      "name": "Cryptanalysis",
      "desc": "Cryptanalysis is the branch of cryptography that studies how to break codes and cryptosystems. Cryptanalysis creates techniques to break ciphers, in particular by methods more efficient than a brute-force search. In addition to traditional methods like frequency analysis and index of coincidence, cryptanalysis includes more recent methods, like linear cryptanalysis or differential cryptanalysis, that can break more advanced ciphers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cryptanalysis"
    },
    {
      "name": "Cryptographic hash function",
      "desc": "A cryptographic hash function is a cryptographic primitive transforming a message of arbitrary size into a message of fixed size, called a digest. Cryptographic hash functions are used for authentication, digital signatures, and message authentication codes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cryptographic_hash_function"
    },
    {
      "name": "Cryptography",
      "desc": "Cryptography, or cryptology, is the science that studies how to encode and transmit messages securely. Cryptography designs and studies algorithms used to encode and decode messages in an insecure environment, and their applications.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Cryptography"
    },
    {
      "name": "CSP",
      "desc": "A CSP (Content Security Policy) is used to detect and mitigate certain types of website related attacks like XSS and data injections.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CSP"
    },
    {
      "name": "CSRF",
      "desc": "CSRF (Cross-Site Request Forgery) is an attack that impersonates a trusted user and sends a website unwanted commands. This can be done, for example, by including malicious parameters in a URL behind a link that purports to go somewhere else.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CSRF"
    },
    {
      "name": "CSS",
      "desc": "CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CSS"
    },
    {
      "name": "CSS Selector",
      "desc": "A CSS selector is a pattern rule that matches style rules to a specific element (or elements). The selector begins a rule set and precedes definitions of how the element(s) should look.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector"
    },
    {
      "name": "Data structure",
      "desc": "Data structure is a particular way of organizing data so that it can be used efficiently",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Data_structure"
    },
    {
      "name": "Decryption",
      "desc": "In cryptography, decryption is the conversion of ciphertext into cleartext.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Decryption"
    },
    {
      "name": "Denial of Service",
      "desc": "DOS (Denial of service) is an attack on computers or networks that restricts or prevents legitimate use. In a DOS attack, an attacker uses a flood of packets to slow down or crash the target system or an entire network.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Denial_of_Service"
    },
    {
      "name": "DHTML",
      "desc": "DHTML (Dynamic HTML) refers to the code behind interactive webpages that need no plugins like Flash or Java. DHTML aggregates the combined functionality of HTML, CSS, the DOM, and JavaScript.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/DHTML"
    },
    {
      "name": "Digest",
      "desc": "A digest is a small value generated by a hash function from a whole message. Ideally, a digest is quick to calculate, irreversible, and unpredictable, and therefore indicates whether someone has tampered with a given message.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Digest"
    },
    {
      "name": "Digital certificate",
      "desc": "A digital certificate is a data file that binds a publicly known cryptographic key to an organization.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Digital_certificate"
    },
    {
      "name": "Distributed Denial of Service",
      "desc": "A Distributed Denial-of-Dervice (DDoS) is an attack in which many compromised systems are made to attack a single target, in order to swamp server resources and block legitimate users.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Distributed_Denial_of_Service"
    },
    {
      "name": "DNS",
      "desc": "DNS (Domain Name System) translates easy-to-recall domain names to the numerical IP addresses needed to find a particular computer service on the Internet or private network.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/DNS"
    },
    {
      "name": "Doctype",
      "desc": "<!DOCTYPE> informs the browser which version of HTML (or XML) you used to write the document. Doctype is a declaration, not a tag; you can also refer to it as \"document type declaration\", or \"DTD\" for short.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Doctype"
    },
    {
      "name": "document environment",
      "desc": "When the JavaScript global environment is a window or an iframe, it is called a document environment. A global environment is an environment that doesn't have an outer environment.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/document_environment"
    },
    {
      "name": "DOM",
      "desc": "The DOM (Document Object Model) is an API that represents and interacts with any HTML or XML document. The DOM is a document model loaded in the browser and representing the document as a node tree, where each node represents part of the document (e.g. an element, text string, or comment).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/DOM"
    },
    {
      "name": "Domain",
      "desc": "A domain is the part of a computer network in which one entity controls the data processing resources, for example a website.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Domain"
    },
    {
      "name": "Domain name",
      "desc": "A domain name is a website's address on the Internet. Domain names are used in URLs to identify to which server belong a specific webpage. The domain name consists of a hierarchial sequence of names (labels) separated by periods (dots) and ending with an extension.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Domain_name"
    },
    {
      "name": "Dominator",
      "desc": "In graph theory, node A dominates node B if every path from the root node to B passes through A.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Dominator"
    },
    {
      "name": "DoS attack",
      "desc": "DoS (Denial of Service) is a network attack that prevents legitimate use of server resources by flooding the server with requests.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/DOS_attack"
    },
    {
      "name": "DTD",
      "desc": "<!DOCTYPE> informs the browser which version of HTML (or XML) you used to write the document. Doctype is a declaration, not a tag; you can also refer to it as \"document type declaration\", or \"DTD\" for short.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/DTD"
    },
    {
      "name": "Dynamic typing",
      "desc": "Dynamically-typed languages are those (like JavaScript) where the interpreter assigns variables a type at runtime based on the variable's value at the time.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Dynamic_typing"
    },
    {
      "name": "ECMA",
      "desc": "Ecma International (formally European Computer Manufacturers Association) is a non-profit organization that develops standards in computer hardware, communications, and programming languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ECMA"
    },
    {
      "name": "ECMAScript",
      "desc": "ECMAScript is the scripting language on which JavaScript is based. Ecma International is in charge of standardizing ECMAScript.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ECMAScript"
    },
    {
      "name": "Element",
      "desc": "An element is a part of a webpage. In XML and HTML, an element may contain a data item or a chunk of text or an image, or perhaps nothing. A typical element includes an opening tag with some attributes, a content, and a closing tag:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Element"
    },
    {
      "name": "Empty element",
      "desc": "An empty element is an element from HTML, SVG, or MathML that cannot have any child nodes (i.e., nested element or text inside an element).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Empty_element"
    },
    {
      "name": "Encapsulation",
      "desc": "Encapsulation is the packing of data and functions into one component (for example, a class) and then controlling access to that component to make a \"blackbox\" out of the object. Because of this, a user of that class only needs to know its interface (that is, the data and functions exposed outside the class), not the hidden implementation.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Encapsulation"
    },
    {
      "name": "Encryption",
      "desc": "In cryptography, encryption is the conversion of cleartext into a coded text or ciphertext. A ciphertext is intended to be unreadable by unauthorized readers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Encryption"
    },
    {
      "name": "Endianness",
      "desc": "\"Endian\" and \"endianness\" (or \"byte-order\") describe how computers organize the bytes that make up numbers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Endianness"
    },
    {
      "name": "Engine",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Engine"
    },
    {
      "name": "Entity",
      "desc": "An HTML entity is a string that begins with '&' and ends with ';'. Entities can be used to represent any character in HTML.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Entity"
    },
    {
      "name": "Entity header",
      "desc": "An entity header is an HTTP header describing the content of the body of the message. Entity headers are used in both, HTTP requests and responses. Headers like Content-Length, Content-Language, Content-Encoding are entity headers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Entity_header"
    },
    {
      "name": "event",
      "desc": "Events are things generated by DOM elements and can be handled by a Javascript code.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/event"
    },
    {
      "name": "Exception",
      "desc": "An exception is a condition that interrupts normal code execution. In JavaScript syntax errors are a very common source of exceptions.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Exception"
    },
    {
      "name": "Expando",
      "desc": "Expando properties are properties added to DOM nodes with JavaScript but not part of the object's DOM specification:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Expando"
    },
    {
      "name": "Falsy",
      "desc": "A falsy value is a value that translates to false when evaluated in a Boolean context.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Falsy"
    },
    {
      "name": "Firefox OS",
      "desc": "Firefox OS is Mozilla's mobile operating system, based on Linux and Firefox's powerful Gecko rendering engine. Firefox OS consists mainly of Gaia, Gecko, and Gonk.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Firefox_OS"
    },
    {
      "name": "firewall",
      "desc": "A firewall is a system that filters network connection. It can either let them pass or block them, according to some specified rules. For example it can block incoming connection to a certain port or outgoing connections to a certain IP address.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/firewall"
    },
    {
      "name": "Forbidden header name",
      "desc": "A forbidden header name is an HTTP header name that cannot be modified programmatically.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name"
    },
    {
      "name": "Forbidden response header name",
      "desc": "A forbidden response header name is an HTTP header name (either `Set-Cookie` or `Set-Cookie2`) that cannot be modified programmatically.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_response_header_name"
    },
    {
      "name": "FTP",
      "desc": "FTP (File Transfer Protocol) is the standard network protocol for transferring files from one host to another over the Internet through TCP.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/FTP"
    },
    {
      "name": "FTU",
      "desc": "FTU (First Time Use) is the app that loads when you run a newly-installed version of Gecko on a Firefox OS device.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/FTU"
    },
    {
      "name": "Function",
      "desc": "A function is a code snippet that can be called by other code or by itself, or a variable that refers to the function. When a function is called, arguments are passed to the function as input, and the function can optionally return an output. A function in JavaScript is also an object.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Function"
    },
    {
      "name": "Gaia",
      "desc": "The user interface and default application suite of the Firefox OS platform.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Gaia"
    },
    {
      "name": "Garbage collection",
      "desc": "Garbage collection is a term used in computer programming to describe the process of finding and deleting objects which are no longer being referenced by other objects.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Garbage_collection"
    },
    {
      "name": "Gecko",
      "desc": "Gecko is the layout engine developed by the Mozilla Project and used in many apps/devices, including Firefox and Firefox OS.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Gecko"
    },
    {
      "name": "General header",
      "desc": "A general header is an HTTP header that can be used for both, request and response messages, but don't apply to the content itself. Depending on the context they are used in, general headers are either response or request headers. However, they are not entity headers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/General_header"
    },
    {
      "name": "GIF",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/gif"
    },
    {
      "name": "GIJ",
      "desc": "Gaia integration Testing. Marionette- and JavaScript- based. See GIJ.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/GIJ"
    },
    {
      "name": "Git",
      "desc": "Git is a free, open-source, distributed Source Code Management (SCM) system. It facilitates handling code bases with distributed development teams. What sets it apart from previous SCM systems is the ability to do common operations (branching, committing, etc.) on your local development machine, without having to change the master repository or even having write access to it.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Git"
    },
    {
      "name": "Global attribute",
      "desc": "Global attributes are attributes that can be used on all elements (though sometimes without effect on some elements).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Global_attribute"
    },
    {
      "name": "Global object",
      "desc": "A global object is an object that always exists in the global scope.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Global_object"
    },
    {
      "name": "Global scope",
      "desc": "The scope that is visible in all other scopes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Global_scope"
    },
    {
      "name": "Global variable",
      "desc": "A global variable is a  variable that is declared in the global scope in other words, a variable that is visible from all other scopes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Global_variable"
    },
    {
      "name": "Gonk",
      "desc": "Gonk is the lower-level operating system of Firefox OS and consists of a Linux kernel (based on the Android Open Source Project (AOSP)) and userspace hardware abstraction layer (HAL).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Gonk"
    },
    {
      "name": "Google Chrome",
      "desc": "Google Chrome is a free Web browser developed by Google. It's based on the Chromium open source project. Some key differences are described on the Chromium wiki. For a layout engine, both browsers use a fork of WebKit called Blink. Note that the iOS version of Chrome uses that platform's rendering engine, not Blink.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Google_Chrome"
    },
    {
      "name": "GPL",
      "desc": "The (GNU) GPL (General Public License) is a copyleft free software license published by the Free Software Foundation. Users of a GPL-licensed program are granted the freedom to use it, read the source code, modify it and redistribute the changes they made, provided they redistribute the program (modified or unmodified) under the same license.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/GPL"
    },
    {
      "name": "Guard",
      "desc": "Guard is a feature of Headers objects (as defined in the Fetch spec, which affects whether methods such as set() and append() can change the header's contents. For example, immutable guard means that headers can't be changed. For more information, read Fetch basic concepts: guard.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Guard"
    },
    {
      "name": "hash",
      "desc": "The hash function takes a variable length message input and produces a fixed-length hash output. It is commonly in the form of a 128-bit \"fingerprint\" or \"message digest\". Hashes are also very useful for cryptography by insuring the integrity of transmitted data. It's the building block for HMAC's that provide message authentication.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/hash"
    },
    {
      "name": "Head",
      "desc": "The Head is the part of an HTML document that contains metadata about that document, such as author, description, and links to CSS or JavaScript files that should be applied to the HTML.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Head"
    },
    {
      "name": "Header",
      "desc": "An HTTP header is a field of an HTTP request or response that passes additional information, altering or precising the semantics of the message or of the body. Headers are case-insensitive, begins at the start of a line and are immediately followed by a ':' and a value depending of the header itself. The value finish at the next CR or at the end of the message.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Header"
    },
    {
      "name": "High-level programming language",
      "desc": "A high-level programming language has a significant abstraction from the details of computer operation. It is designed to be easily understood by humans and for this reason they must be translated by another software. Unlike low-level programming languages, it may use natural language elements, or may automate (or even entirely hide) significant areas of computing systems, making the process of developing simpler and more understandable relative to a lower-level language. The amount of abstraction provided defines how \"high-level\" a programming language is.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/High-level_programming_language"
    },
    {
      "name": "Hoisting",
      "desc": "In JavaScript, functions and variables are hoisted. Hoisting is JavaScript's behavior of moving declarations to the top of a scope (the global scope or the current function scope).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"
    },
    {
      "name": "Host",
      "desc": "A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Host"
    },
    {
      "name": "Hotlink",
      "desc": "A hotlink (also known as inline link) is an object (typically an image) directly linked to another object on another site. For example, an image hosted on site1.com is shown directly on site2.com.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Hotlink"
    },
    {
      "name": "HTML",
      "desc": "HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/HTML"
    },
    {
      "name": "HTML5",
      "desc": "The latest stable release of HTML, HTML5 takes HTML from a simple markup for structuring a document to a full app development platform. Among other features, HTML5 includes new elements and JavaScript APIs to enhance storage, multimedia, and hardware access.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/HTML5"
    },
    {
      "name": "HTTP",
      "desc": "HTTP (HyperText Transfer Protocol) is the basic protocol that enables file transfer on the Web. HTTP is textual (all communication is done in plain text) and stateless (no communication is aware of previous communications).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/HTTP"
    },
    {
      "name": "HTTPS",
      "desc": "HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually use SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safly exchange sensitive data with a server, for example for banking activities or online shopping.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/https"
    },
    {
      "name": "Hyperlink",
      "desc": "Hyperlinks connect webpages or data items to one another. In HTML, <a> elements define hyperlinks from a spot on a webpage (like a text string or image) to another spot on some webpage (even the same page).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Hyperlink"
    },
    {
      "name": "Hypertext",
      "desc": "Hypertext is text that contains links to other texts, as opposed to a single linear flow like in a novel.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Hypertext"
    },
    {
      "name": "I18N",
      "desc": "i18n (from \"internationalization\", a 20-letter word) is the best practice that enables products or services to be readily adapted to any target culture.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/I18N"
    },
    {
      "name": "IANA",
      "desc": "IANA (Internet Assigned Numbers Authority) is a subsidiary of ICANN charged with recording and/or assigning domain names, IP addresses, and other names and numbers used by Internet protocols.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IANA"
    },
    {
      "name": "ICANN",
      "desc": "ICANN (Internet Corporation of Assigned Names and Numbers) is an international nonprofit that maintains the domain name system and the record of IP addresses.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ICANN"
    },
    {
      "name": "ICE",
      "desc": "ICE (Interactive Connectivity Establishment) is a framework used by WebRTC (among other technologies) for connecting two peers to each other, regardless of network topology (usually for audio and/or video chat). This protocol lets two peers find and establish a connection with one another even though they may both be using Network Address Translator (NAT) to share a global IP address with other devices on their respective local networks.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ICE"
    },
    {
      "name": "IDE",
      "desc": "An Integrated Development Environment (IDE) or Interactive Development environment is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools and a debugger.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IDE"
    },
    {
      "name": "Idempotent",
      "desc": "An HTTP method is idempotent if an identical request can be made once or several times in a row with the same effect while leaving the server in the same state. In other words, an idempotent method should not have any side-effects (except for keeping statistics). Implemented correctly, the GET, HEAD, PUT, and DELETE method are idempotent, but not the POST method. All safe methods are also idempotent.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Idempotent"
    },
    {
      "name": "Identifier",
      "desc": "A sequence of characters in the code that identifies a variable, function, or property.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Identifier"
    },
    {
      "name": "IDL",
      "desc": "An IDL (Interface Description Language) is a generic language used to specified objects' interfaces apart from any specific programming language.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IDL"
    },
    {
      "name": "IETF",
      "desc": "The Internet Engineering Task Force (IETF) is a worldwide organization that drafts specifications governing the mechanisms behind the Internet, especially the TCP/IP or Internet Protocol Suite.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IETF"
    },
    {
      "name": "IIFE",
      "desc": "IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IIFE"
    },
    {
      "name": "IMAP",
      "desc": "IMAP (Internet Message Access Protocol) is a protocol used to retrieve and store emails. More recent than POP3, IMAP allows folders and rules on the server.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IMAP"
    },
    {
      "name": "Immutable",
      "desc": "An immutable object is one whose content cannot be changed.\n An object can be immutable for various reasons, for example:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Immutable"
    },
    {
      "name": "Index",
      "desc": "Found 356 pages:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Index"
    },
    {
      "name": "IndexedDB",
      "desc": "IndexedDB is a Web API for storing large data structures within browsers and indexing them for high-performance searching. Like an SQL-based RDBMS, IndexedDB is a transactional database system. However, it uses JavaScript objects rather than fixed columns tables to store data.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IndexedDB"
    },
    {
      "name": "Information architecture",
      "desc": "Information architecture, as applied to web design and development, is the practice of organizing the information / content / functionality of a web site so that it presents the best user experience it can, with information and services being easily usable and findable.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Information_architecture"
    },
    {
      "name": "Inheritance",
      "desc": "Inheritance is a major feature of object-oriented programming.  Data abstraction can be carried up several levels, that is, classes can have superclasses and subclasses.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Inheritance"
    },
    {
      "name": "Instance",
      "desc": "An object created by a constructor is an instance of that constructor.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Instance"
    },
    {
      "name": "Internet",
      "desc": "The Internet is a worldwide network of networks that uses the Internet protocol suite (also named TCP/IP from its two most important protocols).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Internet"
    },
    {
      "name": "IP Address",
      "desc": "An IP address is a number assigned to every device connected to a network that uses the Internet protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IP_Address"
    },
    {
      "name": "IPv4",
      "desc": "IPv4 is the fourth version of the communication protocol underlying the Internet and the first version to be widely deployed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IPv4"
    },
    {
      "name": "IPv6",
      "desc": "IPv6 is the current version of the communication protocol underlying the Internet. Slowly IPv6 is replacing IPv4, among other reasons because IPv6 allows for many different IP addresses.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IPv6"
    },
    {
      "name": "IRC",
      "desc": "IRC (Internet Relay Chat) is a worldwide chat system requiring an Internet connection and an IRC client, which sends and receives messages via the IRC server.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/IRC"
    },
    {
      "name": "ISO",
      "desc": "Technical review completed. Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ISO"
    },
    {
      "name": "ISP",
      "desc": "An ISP (Internet Service Provider) sells Internet access, and sometimes email, web hosting, and voice over IP, either by a dial-up connection over a phone line (formerly more common), or through a broadband connection such as a cable modem or DSL service.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ISP"
    },
    {
      "name": "Jank",
      "desc": "Jank refers to sluggishness in a user interface, usually caused by executing long tasks on the main thread, blocking rendering, or expending too much processor power on background processes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Jank"
    },
    {
      "name": "Java",
      "desc": "Java is an object-oriented, class-based, portable  computer programming language designed for minimal implementation dependencies.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Java"
    },
    {
      "name": "JavaScript",
      "desc": "JavaScript (JS) is a programming language mostly used client-side to dynamically script webpages, but often also server-side.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/JavaScript"
    },
    {
      "name": "JPEG",
      "desc": "JPEG (Joint Photographic Experts Group) is a commonly used method of lossy compression for digital images.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/jpeg"
    },
    {
      "name": "JSON",
      "desc": "The JavaScript Object Notation (JSON) is a data-interchange format.  Although not a strict subset, JSON closely resembles a subset of JavaScript syntax. Though many programming languages support JSON, JSON is especially useful for JavaScript-based apps, including websites and browser extensions.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/JSON"
    },
    {
      "name": "Key",
      "desc": "A key is a piece of information used by a cipher for encryption and/or decryption.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Key"
    },
    {
      "name": "Keyword",
      "desc": "A keyword is a word or phrase that describes content.  Online keywords are used as queries for search engines or as words identifying content on websites.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Keyword"
    },
    {
      "name": "LGPL",
      "desc": "LGPL (GNU Lesser General Public License) is a free software license published by the Free Software Foundation. The LGPL provides a more permissive alternative for the strictly copyleft GPL. While any derivative work using a GPL-licensed program must be released under the same terms (free to use, share, study, and modify), the LGPL only requires the LGPL-licensed component of the derivative program to continue using the LGPL, not the whole program. LGPL is usually used to license shared components such as libraries (.dll, .so, .jar, etc.).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/LGPL"
    },
    {
      "name": "Ligature",
      "desc": "A ligature is a joining of two characters into one shape. For example, in French \"œ\" is a ligature of \"oe\".",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Ligature"
    },
    {
      "name": "Local scope",
      "desc": "Local scope is a characteristic of variables that makes them local (i.e., the variable name is only bound to its value within a scope which is not the global scope).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Local_scope"
    },
    {
      "name": "Local variable",
      "desc": "A variable whose name is bound to its value only within a local scope.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Local_variable"
    },
    {
      "name": "Locale",
      "desc": "Locale is a set of language- or country-based preferences for a user interface.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Locale"
    },
    {
      "name": "Localization",
      "desc": "Localization (l10n) is the process of adapting a software user interface to a specific culture.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Localization"
    },
    {
      "name": "loop",
      "desc": "A loop is a sequence of instructions that is continually repeated until a certain condition is met in computer programming. An example would be the process of getting an item of data and changing it, and then making sure some condition is checked such as, if a counter has reached a prescribed number.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/loop"
    },
    {
      "name": "ltr",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ltr"
    },
    {
      "name": "MathML",
      "desc": "MathML (an XML application) is an open standard for representing mathematical expressions in webpages.  In 1998 the W3C first recommended MathML for representing mathematical expressions in the browser. MathML has other applications also including scientific content and voice synthesis.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/MathML"
    },
    {
      "name": "Metadata",
      "desc": "Metadata is — in its very simplest definition — data that describes data. For example, an HTML document is data, but HTML can also contain metadata in its <head> element that describes the document — for example who wrote it, and its summary.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Metadata"
    },
    {
      "name": "Method",
      "desc": "A method is a function which is a property of an object. It exist two kind of methods: Instance Method which are built-in tasks performed by an object instance, or Static Methods which are tasks that can be performed without the need of an object instance.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Method"
    },
    {
      "name": "Microsoft Edge",
      "desc": "Microsoft Edge is a free-of-cost graphical Web browser bundled with Microsoft Windows and developed by Microsoft since 2014. Initially known as Spartan, Edge replaced the longstanding Microsoft browser Internet Explorer.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Microsoft_Edge"
    },
    {
      "name": "Microsoft Internet Explorer",
      "desc": "Internet Explorer (or IE) is a free graphical browser maintained by Microsoft for legacy enterprise uses. Microsoft Edge is currently the default Windows browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Microsoft_Internet_Explorer"
    },
    {
      "name": "mime",
      "desc": "MIME Multipurpose internet mail extensions supports text in other forms beside ASCII and non-text attachments such as audio, video and images.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/mime"
    },
    {
      "name": "MIME type",
      "desc": "A MIME type (now properly called \"media type\", but also sometimes \"content type\") is a string sent along with a file indicating the file type (for example, a sound file might be labeled audio/ogg, or an image file image/png). It serves the same purpose as filename extensions traditionally do on Windows.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/MIME_type"
    },
    {
      "name": "Mixin",
      "desc": "A mixin is a coherent set of methods and properties implemented by other interfaces and classes. The properties and methods are then part of the new interface in the same way as any specific properties and methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Mixin"
    },
    {
      "name": "Mobile First",
      "desc": "Mobile first, a development of progressive enhancement, is a design philosophy that values focused, mobile-ready websites over complex, demanding ones.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Mobile_First"
    },
    {
      "name": "Modern web apps",
      "desc": "See Progressive web apps",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Modern_web_apps"
    },
    {
      "name": "Modularity",
      "desc": "The term Modularity refers to the degree to which a system's components may be separated and recombined, it is also division of a software package into logical units. The advantage of a modular system is that one can reason the parts independently",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/modularity"
    },
    {
      "name": "Mozilla Firefox",
      "desc": "Mozilla Firefox is a free open-source browser whose development is overseen by the Mozilla Corporation. Firefox runs on Windows, OS X, Linux, and Android.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Mozilla_Firefox"
    },
    {
      "name": "Mutable",
      "desc": "Mutable is a type of variable that can be changed. In JavaScript, only objects and arrays are mutable, not primitive values.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Mutable"
    },
    {
      "name": "Namespace",
      "desc": "Namespace is a context for identifiers, a logical grouping of names used in a program. Within the same context and same scope,  an identifier must uniquely identify an entity.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Namespace"
    },
    {
      "name": "NaN",
      "desc": "NaN (Not a Number) is a numeric data type that means an undefined value or value that cannot be represented, especially results of floating-point calculations.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/NaN"
    },
    {
      "name": "NAT",
      "desc": "NAT (Network Address Translation) is a technique for letting multiple computers share an IP address. NAT assigns unique addresses to each computer on the local network and adjusts incoming/outgoing network traffic to send data to the right place.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/NAT"
    },
    {
      "name": "Native",
      "desc": "A native application has been compiled to run on the hardware-software combination customary to the targeted architecture.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Native"
    },
    {
      "name": "Netscape Navigator",
      "desc": "Netscape Navigator or Netscape was a leading browser in the 1990s.  Netscape was based on Mosaic and the Netscape team was led by Marc Andreessen, a programmer who also wrote code for Mosaic.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Netscape_Navigator"
    },
    {
      "name": "NNTP",
      "desc": "NNTP (Network News Transfer Protocol) is a protocol used to transfer Usenet messages from client to server or between servers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/NNTP"
    },
    {
      "name": "Node",
      "desc": "The term node can have several meanings depending on the context. It may refer to:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Node"
    },
    {
      "name": "Node (DOM)",
      "desc": "Technical review completed. Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Node/DOM"
    },
    {
      "name": "Node (networking)",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Node/networking"
    },
    {
      "name": "Node.js",
      "desc": "Node.js is a cross-platform JavaScript runtime environment that allows developers to build server-side and network applications with JavaScript.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Node.js"
    },
    {
      "name": "non-normative",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/non-normative"
    },
    {
      "name": "Normative",
      "desc": "Normative is a word commonly used in software specifications to denote sections that are standardized and must be followed as a rule. Specifications might also contain sections that are marked as non-normative or informative, which means those are provided there for the purpose of helping the reader understand the specifications better or to showcase an example or best practice, which need not be followed as a rule.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Normative"
    },
    {
      "name": "Null",
      "desc": "In computer science, a null value represents a reference that points, generally intentionally, to a nonexistent or invalid object or address. The meaning of a null reference varies among language implementations.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Null"
    },
    {
      "name": "Number",
      "desc": "In JavaScript, Number is a numeric data type in the double-precision 64-bit floating point format (IEEE 754). In other programming languages different numeric types can exist, for examples: Integers, Floats, Doubles, or Bignums.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Number"
    },
    {
      "name": "Object",
      "desc": "Object refers to a data structure containing data and instructions for working with the data. Objects sometimes refer to real-world things, for example a car or map object in a racing game. JavaScript, Java, C++, Python, and Ruby are examples of object-oriented programming languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Object"
    },
    {
      "name": "Object reference",
      "desc": "A link to an object. Object references can be used exactly like the linked objects. The concept of object references arises when assigning the same object to more than one property. Rather than holding a copy of the object, each assigned property holds object references that link to the same object, so that when the object changes all properties referring to the object reflect the change.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Object_reference"
    },
    {
      "name": "OOP",
      "desc": "OOP (Object-Oriented Programming) is an approach in programming in which data is encapsulated within objects and the object itself is operated on, rather than its component parts.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/OOP"
    },
    {
      "name": "OpenGL",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/OpenGL"
    },
    {
      "name": "OpenSSL",
      "desc": "OpenSSL is an open-source implementation of SSL and TLS.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/OpenSSL"
    },
    {
      "name": "Opera Browser",
      "desc": "Opera is the fifth most used web browser, publicly released in 1996 and initially running on Windows only. Opera uses Blink as its layout engine since 2013 (before that, Presto). Opera also exists in mobile and tablet versions.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Opera_Browser"
    },
    {
      "name": "Operand",
      "desc": "An operand is the part of an instruction representing the data manipulated by the operator. For example, when you add two numbers, the numbers are the operand and \"+\" is the operator.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Operand"
    },
    {
      "name": "Operator",
      "desc": "Reserved syntax consisting of punctuation or alphanumeric characters that carrying out built-in functionality.  For example, in JavaScript the addition operator (\"+\") adds numbers together and concatenates strings, whereas the\"not\" operator (\"!\") negates an expression — for example making a true statement return false.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Operator"
    },
    {
      "name": "Origin",
      "desc": "The origin of web content is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port match.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Origin"
    },
    {
      "name": "OTA",
      "desc": "Over The Air (OTA) refers to automatic updating of software on connected devices from a central server. All device owners receiving a given set of updates are on the same \"channel\", and each device often can access several channels (e.g. for production or engineering builds).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/OTA"
    },
    {
      "name": "OWASP",
      "desc": "OWASP (Open Web Application Security Project) is a non-profit organization and worldwide network that works for security in Free Software, especially on the Web.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/OWASP"
    },
    {
      "name": "P2P",
      "desc": "P2P (Peer-to-peer) is a computer networking architecture in which all participating nodes (peers) have equal privileges and share the workload. P2P differs from a client-server network architecture, where multiple client nodes connect to centralized servers for services.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/P2P"
    },
    {
      "name": "PAC",
      "desc": "A Proxy Auto-Configuration file (PAC file) is a file which contains a function, FindProxyForURL(), which is used by the browser to determine whether requests (including HTTP, HTTPS, and FTP) should go directly to the destination or if they need to be forwarded through a web proxy server.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/PAC"
    },
    {
      "name": "Parameter",
      "desc": "A parameter is a named variable passed into a function. Parameter variables are used to import arguments into functions.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Parameter"
    },
    {
      "name": "Parent object",
      "desc": "The object to which a given property belongs.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Parent_object"
    },
    {
      "name": "Parse",
      "desc": "Parsing means analyzing and converting a program into an internal format that a runtime environment can actually run, for example the JavaScript engine inside browsers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Parse"
    },
    {
      "name": "Parser",
      "desc": "A parser is the module of a compiler or interpreter that parses a source code file.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Parser"
    },
    {
      "name": "PDF",
      "desc": "PDF (Portable Document Format) is a file format used to share documentation without depending on any particular software implementation, hardware platform, or operating system. PDF provides a digital image of a printed document, and keeps the same appearance when printed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/PDF"
    },
    {
      "name": "Percent-encoding",
      "desc": "Percent-encoding is a mechanism to encode 8-bit characters that have specific meaning in the context of URLs. It is sometimes called URL encoding. The encoding consists of substitution: A '%' followed by the hexadecimal representation of the ASCII value of the replace character.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding"
    },
    {
      "name": "PHP",
      "desc": "PHP is a server-side scripting language for building web apps and dynamic websites.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/PHP"
    },
    {
      "name": "Pixel",
      "desc": "A pixel is the smallest building block of a graphical display like a computer screen.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Pixel"
    },
    {
      "name": "Placeholder names",
      "desc": "Placeholder names are commonly used in cryptography to indicate the participants in a conversation, without resorting to terminology such as \"Party A,\" \"eavesdropper,\" and \"malicious attacker.\"",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Placeholder_names"
    },
    {
      "name": "Plaintext",
      "desc": "Plaintext refers to information that is being used as an input to an encryption algorithm, or to ciphertext that has been decrypted.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Plaintext"
    },
    {
      "name": "PNG",
      "desc": "PNG (Portable Network Graphics) is a graphics file format that supports lossless data compression.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/PNG"
    },
    {
      "name": "Polyfill",
      "desc": "A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"
    },
    {
      "name": "Polymorphism",
      "desc": "Polymorphism is the presentation of one interface for multiple data types.\n For example, integers, floats, and doubles are implicitly polymorphic: regardless of their different types, they can all be added, subtracted, multiplied, and so on.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Polymorphism"
    },
    {
      "name": "POP3",
      "desc": "POP3 (Post Office Protocol) is a very common protocol for getting emails from a mail server over a glossary(\"TCP\"} connection. POP3 does not support folders, unlike the more recent IMAP4, which is harder to implement because of its more complex structure.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/POP"
    },
    {
      "name": "Port",
      "desc": "For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Port"
    },
    {
      "name": "Presto",
      "desc": "Presto was the proprietary browser layout engine used to power the Opera browser until version 15. Since then, the Opera browser is based on Chromium, which uses the Blink layout engine.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Presto"
    },
    {
      "name": "Primitive",
      "desc": "A primitive (primitive value, primitive data type) is data that is not an object and has no methods. In JavaScript, there are 6 primitive data types: string, number, boolean, null, undefined, symbol (new in ECMAScript 2015).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
    },
    {
      "name": "Privileged",
      "desc": "Users are said to be privileged when they are granted additional rights to a system, or given ultimate access to content in a higher priority level when compared to normal users.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Privileged"
    },
    {
      "name": "Progressive Enhancement",
      "desc": "Progressive enhancement is a design philosophy that delivers a first-class experience in restricted scenarios, serving up essential content and functionality to everyone and adding optional features as needed. It is more like a strategy and a plan in web-design which gives special importance to accessiblity and many scripting technologies. It is a very useful technique that allows Web developers to focus on developing the best possible websites while balancing the issues in those websites being accessed by multiple unknown user-agents.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement"
    },
    {
      "name": "Progressive web apps",
      "desc": "Progressive web apps is a term used to describe the modern state of web app development. This involves taking standard web sites/apps that enjoy all the best parts of the Web — such as discoverability via search engines, being linkable via URLs, and working across multiple form factors — and supercharging them with modern APIs (such as Service Workers and Push) and features that confer other benefits more commonly attributed to native apps.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Progressive_web_apps"
    },
    {
      "name": "Property",
      "desc": "The term property can have several meanings depending on the context. It may refer to:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/property"
    },
    {
      "name": "Property (CSS)",
      "desc": "A CSS property is a characteristic (like color) whose associated value defines one aspect of how the browser should display the element.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/property/CSS"
    },
    {
      "name": "Property (JavaScript)",
      "desc": "A property is a characteristic of an object, often describing attributes associated with a data structure. There are two kinds of properties:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/property/JavaScript"
    },
    {
      "name": "Protocol",
      "desc": "A protocol is a system of rules that define how data is exchanged within or between computers.  Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Protocol"
    },
    {
      "name": "Prototype",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Prototype"
    },
    {
      "name": "Pseudo-class",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Pseudo-class"
    },
    {
      "name": "Pseudo-element",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Pseudo-element"
    },
    {
      "name": "Python",
      "desc": "Python is a high level general-purpose programming language. It uses a multi-paradigm approach, meaning it supports procedural, object-oriented and some functional programming constructs.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Python"
    },
    {
      "name": "Random Number Generator",
      "desc": "A PRNG (pseudorandom number generator) is an algorithm that outputs numbers in a complex, seemingly unpredictable pattern. Truly random numbers (say, from a radioactive source) are utterly unpredictable, whereas all algorithms are predictable, and a PRNG returns the same numbers when passed the same starting parameters or seed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RNG"
    },
    {
      "name": "Raptor",
      "desc": "Raptor: New Performance Tools for Gaia",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Raptor"
    },
    {
      "name": "RDF",
      "desc": "RDF (Resource Description Framework) is a language developed by W3C for representing information on the World Wide Web, such as Webpages. RDF provides a standard way of encoding resource information so that it can be exchanged in a fully automated way between applications.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RDF"
    },
    {
      "name": "Recursion",
      "desc": "An act of a function calling itself. Recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (continues recursion).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Recursion"
    },
    {
      "name": "Reference",
      "desc": "In the context of objects, an object reference. Otherwise, the JavaScript reference itself. In computing a reference is a value that indirectly accesses data to retrieve a variable or a record in a computers memory or other storage device.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Reference"
    },
    {
      "name": "Reflow",
      "desc": "Reflow happens when a browser must process and draw part or all of a webpage again, such as after an update on an interactive site.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Reflow"
    },
    {
      "name": "Regular expression",
      "desc": "Regular expressions (or regex) are rules that govern which sequences of characters come up in a search.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Regular_expression"
    },
    {
      "name": "Rendering engine",
      "desc": "A rendering engine is software that draws text and images on the screen. The engine draws structured text from a document (often HTML), and formats it properly based on the given style declarations (often given in CSS). Examples of layout engines: Blink, Gecko, Edge, WebKit.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Rendering_engine"
    },
    {
      "name": "Repo",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Repo"
    },
    {
      "name": "Request header",
      "desc": "A request header is an HTTP header that can be used in an HTTP request, and that doesn't relate to the content of the message. Request headers, like Accept, Accept-*, or If-* allow to perform conditional requests; others like Cookie, User-Agent or Referer precise the context so that the server can tailor the answer.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Request_header"
    },
    {
      "name": "Response header",
      "desc": "A response header is an HTTP header that can be used in an HTTP request and that doesn't relate to the content of the message. Response headers, like Age, Location or Server are used to give a more detailed context of the response.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Response_header"
    },
    {
      "name": "Responsive web design",
      "desc": "Responsive Web Design (RWD) is a Web development concept focusing on making sites look and behave optimally on all personal computing devices, from desktop to mobile.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Responsive_web_design"
    },
    {
      "name": "REST",
      "desc": "Representational State Transfer (REST) refers to a group of software architecture design constraints that bring about efficient, reliable, and scalable systems.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/REST"
    },
    {
      "name": "RGB",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RGB"
    },
    {
      "name": "RIL",
      "desc": "RIL (Radio Interface Layer) is a mobile operating system component which communicates between the device's software and the device's phone, radio, or modem hardware.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RIL"
    },
    {
      "name": "Robots.txt",
      "desc": "Robots.txt is a file which is usually placed in the root of any website. It decides whether crawlers are permitted or forbidden access to the web site.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Robots.txt"
    },
    {
      "name": "RSS",
      "desc": "RSS (Really Simple Syndication) refers to several XML document formats designed for publishing site updates. When you subscribe to a website's RSS feed, the website sends information and updates to your RSS reader in an RSS document called a feed, so you don't need to check all your favorite websites manually.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RSS"
    },
    {
      "name": "RTF",
      "desc": "RTF (Rich Text Format) is a plain-text-based file format with support for formatting instructions (like bold or italic).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/RTF"
    },
    {
      "name": "rtl",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/rtl"
    },
    {
      "name": "Ruby",
      "desc": "Ruby is an open-source programming language. In a Web context, Ruby is often used server-side with the Ruby On Rails (ROR) framework to produce websites/apps.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Ruby"
    },
    {
      "name": "Safe",
      "desc": "An HTTP method is safe if it doesn't alter the state of the server. In other words, a method is safe if it leads to a read-only operation. Several common HTTP methods are safe: GET, HEAD, or OPTIONS. All safe methods are also idempotent as well as some, but not all, unsafe methods like PUT, or DELETE.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/safe"
    },
    {
      "name": "SCM",
      "desc": "SCM (Source Control Management) is a system for managing source code. Usually it refers to the use of software to handle versioning of source files. A programmer can modify source code files without being afraid of editing out useful stuff, because a SCM keeps track of how the source code has changed and who made the changes.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SCM"
    },
    {
      "name": "Scope",
      "desc": "The current context of execution. The context in which values and expressions are \"visible,\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then it is unavailable for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Scope"
    },
    {
      "name": "SCTP",
      "desc": "SCTP (Stream Control Transmission Protocol) is an IETF standard for a transport protocol which enables the reliable, in-order transmission of messages while offering congestion control, multi-homing, and other features to improve reliability and stability of the connection. It's used for sending traditional telephone calls over the Internet, but is also used for WebRTC data.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SCTP"
    },
    {
      "name": "SDP",
      "desc": "SDP (Session Description Protocol) is the standard describing a peer-to-peer connection. SDP contains the codec, source address, and timing information of audio and video.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SDP"
    },
    {
      "name": "Search engine",
      "desc": "A search engine is a software system that collects information from the World Wide Web and presents it to users who are looking for specific information.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Search_engine"
    },
    {
      "name": "Second-level Domain",
      "desc": "An SLD (Second Level Domain) is a domain that is hierarchically directly below a TLD.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Second-level_Domain"
    },
    {
      "name": "Semantics",
      "desc": "In programing, Semantics refers to the meaning of a piece of code — for example \"what effect does running that line of JavaScript have?\", or \"what purpose or role does that HTML element have\" (rather than \"what does it look like?\".)",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Semantics"
    },
    {
      "name": "SEO",
      "desc": "SEO (Search Engine Optimization) is the process of making a website more visible in search results, also termed improving search rankings.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SEO"
    },
    {
      "name": "Server",
      "desc": "A hardware server is a shared computer on a network that provides services to clients.  A software server is a program that provides services to client programs.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Server"
    },
    {
      "name": "Session Hijacking",
      "desc": "Session hijacking occurs when an attacker takes over a valid session between two computers. The attacker steals a valid session ID in order to break into the system and snoop data.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Session_Hijacking"
    },
    {
      "name": "SGML",
      "desc": "The Standard Generalized Markup Language (SGML) is an ISO specification made for defining declarative markup languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SGML"
    },
    {
      "name": "Shim",
      "desc": "A shim is a piece of code used to correct the behavior of code that already exists, usually by adding new API that works around the problem. This differs from a polyfill, which implements a new API that is not supported by the stock browser as shipped.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Shim"
    },
    {
      "name": "Signature",
      "desc": "The term signature can have several meanings depending on the context. It may refer to:",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Signature"
    },
    {
      "name": "Signature (functions)",
      "desc": "A function signature (or type signature, or method signature) defines input and output of functions or methods.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function"
    },
    {
      "name": "Signature (security)",
      "desc": "A signature, or digital signature, is a protocol showing that a message is authentic.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Signature/Security"
    },
    {
      "name": "SIMD",
      "desc": "SIMD (pronounced \"seem-dee\") is short for Single Instruction/Multiple Data which is one classification of computer architectures. SIMD allows one same operation to be performed on multiple data points resulting in data level parallelism and thus performance gains, for example for 3D graphics and video processing, physics simulations or cryptography, and other domains.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SIMD"
    },
    {
      "name": "Simple header",
      "desc": "A simple header is an HTTP header. Its name is either Accept, Accept-Language, Content-Language, or `Content-Type`. The MIME type of its parsed value (ignoring parameters) is either application/x-www-form-urlencoded, multipart/form-data, or text/plain.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Simple_header"
    },
    {
      "name": "SISD",
      "desc": "SISD is short for Single Instruction/Single Data which is one classification of computer architectures. In SISD architecture, a single processor executes a single instruction and operates on a single data point in memory.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SISD"
    },
    {
      "name": "SLD",
      "desc": "An SLD (Second Level Domain) is a domain that is hierarchically directly below a TLD.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SLD"
    },
    {
      "name": "Sloppy mode",
      "desc": "ECMAScript 5 and later let scripts opt in to a new strict mode, which alters the semantics of JavaScript in several ways to improve its resiliency and which make it easier to understand what's going on when there are problems.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode"
    },
    {
      "name": "Slug",
      "desc": "Slug, in the context of MDN, is the portion of the page's URL following \"<locale>/docs/\".",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Slug"
    },
    {
      "name": "Smoke Test",
      "desc": "A smoke test consists of functional or unit tests of critical software functionality. Smoke testing comes before further, in-depth testing.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Smoke_Test"
    },
    {
      "name": "SMTP",
      "desc": "SMTP (Simple Mail Transfer Protocol) is a protocol used to send a new email.  Like POP3 and NNTP, it is a state machine-driven protocol.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SMTP"
    },
    {
      "name": "SOAP",
      "desc": "SOAP (Simple Object Access Protocol) is a protocol for transmitting data in XML format. Firefox removed support for SOAP in 2008.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SOAP"
    },
    {
      "name": "Specification",
      "desc": "A specification is a document that lays out in detail what functionality or attributes a product must include before delivery.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Specification"
    },
    {
      "name": "SQL",
      "desc": "SQL (Structured Query Language) is a descriptive computer language designed for updating, retrieving, and calculating data in table-based databases.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SQL"
    },
    {
      "name": "SQL Injection",
      "desc": "SQL injection takes advantage of Web apps that fail to validate user input. Hackers can maliciously pass SQL commands through the Web app for execution by a backend database.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SQL_Injection"
    },
    {
      "name": "Stacking context",
      "desc": "Stacking context refers to how elements on a webpage appear to sit on top of other elements, just as you can arrange index cards on your desk to lie side-by-side or overlap each other.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Stacking_context"
    },
    {
      "name": "State machine",
      "desc": "A state machine is a mathematical abstraction used to design algorithms. A state machine reads a set of inputs and changes to a different state based on those inputs.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/State_machine"
    },
    {
      "name": "Statement",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Statement"
    },
    {
      "name": "Static typing",
      "desc": "A statically-typed language is a language (such as Java, C, or C++) where variable types are known at compile time and must be expressly indicated by the programmer.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Static_typing"
    },
    {
      "name": "String",
      "desc": "In any computer programming language, a string is a sequence of characters used to represent text.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/String"
    },
    {
      "name": "STUN",
      "desc": "STUN (Session Traversal Utilities for NAT) is an auxiliary protocol for transmitting data around a NAT (Network Address Translator). STUN returns the IP address, port, and connectivity status of a networked computer behind a NAT.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/STUN"
    },
    {
      "name": "SVG",
      "desc": "Scalable Vector Graphics (SVG) is a 2D vector image format based on an XML syntax.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SVG"
    },
    {
      "name": "SVN",
      "desc": "Apache Subversion (SVN) is a free source control management (SCM) system. It allows developers to keep a history of text and code modifications. Although SVN can also handle binary files, we do not recommend that you use it for such files.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/SVN"
    },
    {
      "name": "Symbol",
      "desc": "A Symbol is a primitive data type whose instances are unique and immutable. In some programming languages they are also called atoms.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Symbol"
    },
    {
      "name": "Synchronous",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Synchronous"
    },
    {
      "name": "Syntax",
      "desc": "Syntax specifies the required combination and sequence of characters making up correctly structured code. Syntax varies from language to language (e.g., syntax is different in HTML and JavaScript). Syntax applies both to programming languages (commands to the computer) and markup languages (document structure information).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Syntax"
    },
    {
      "name": "Syntax error",
      "desc": "An exception caused by the incorrect use of a pre-defined syntax. Syntax errors are detected while compiling or parsing source code.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Syntax_error"
    },
    {
      "name": "Tag",
      "desc": "In HTML a tag is used for creating an element.  The name of an HTML element is the name used in angle brackets such as <p> for paragraph.  Note that the end tag's name is preceded by a slash character, \"</p>\", and that in empty elements the end tag is neither required nor allowed. If attributes are not mentioned, default values are used in each case.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Tag"
    },
    {
      "name": "TCP",
      "desc": "TCP (Transmission Control Protocol) is an important network protocol that lets two hosts connect and exchange data streams.  TCP guarantees the delivery of data and packets in the same order as they were sent.  Vint Cerf and Bob Kahn, who were DARPA scientists at the time, designed TCP in the 1970s.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/TCP"
    },
    {
      "name": "Telnet",
      "desc": "Telnet is a command line tool and an underlying TCP/IP protocol for accessing remote computers.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Telnet"
    },
    {
      "name": "test",
      "desc": "test rate",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/test"
    },
    {
      "name": "Three js",
      "desc": "three.js is a JavaScript-based WebGL engine that can run GPU-powered games and other graphics-powered apps straight from the browser. The three.js library provides many features and APIs for drawing 3D scenes in your browser.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Three_js"
    },
    {
      "name": "TLD",
      "desc": "A TLD (top-level domain) is the most generic domain in the Internet's hierarchical DNS (domain name system). A TLD is the final component of a domain name, for example, \"org\" in developer.mozilla.org.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/TLD"
    },
    {
      "name": "TLS",
      "desc": "Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/TLS"
    },
    {
      "name": "Trident",
      "desc": "Trident (or MSHTML) is a layout engine that powers Internet Explorer.  A Trident fork called EdgeHTML has replaced Trident in Spartan and Internet Explorer 11.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Trident"
    },
    {
      "name": "Truthy",
      "desc": "In JavaScript, a truthy value is a value that translates to true when evaluated in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, \"\", null, undefined, and NaN).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Truthy"
    },
    {
      "name": "TURN",
      "desc": "TURN (Traversal Using Relays around NAT) is a protocol enabling a computer to receive and send data from behind a Network Address Translator (NAT) or firewall.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/TURN"
    },
    {
      "name": "Type",
      "desc": "Type is a characteristic of a value affecting which operations on that value are valid. For example, an integer can be multiplied by an integer, but not by a string.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Type"
    },
    {
      "name": "Type Conversion",
      "desc": "Type conversion (or typecasting) means transfer of data from one data type to another. Implicit conversion happens when the compiler automatically assigns data types, but the source code can also explicitly require a conversion to take place.  Simple examples: given the instruction 5+2.0, the integer 5 is implicitly typecasted into floating point, but given the instruction Number(\"0x11\"), the string \"0x11\" is explicitly typecasted as the number 17.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion"
    },
    {
      "name": "UDP",
      "desc": "UDP (User Datagram Protocol) is a long standing protocol used together with IP for sending data when transmission speed and efficiency matter more than security and reliability.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/UDP"
    },
    {
      "name": "UI",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/UI"
    },
    {
      "name": "undefined",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/undefined"
    },
    {
      "name": "URI",
      "desc": "A URI (Uniform Resource Identifier) is a string that refers to a resource. The most common are URLs, which identify the resource by giving its location on the Web. URNs, by contrast, refer to a resource by a name, in a given namespace, e.g. the ISBN of a book.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/URI"
    },
    {
      "name": "URL",
      "desc": "Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/URL"
    },
    {
      "name": "URN",
      "desc": "URN (Uniform Resource Name) is a URI in a standard format, referring to a resource without specifying its location or whether it exists. This example comes from RFC3986:  urn:oasis:names:specification:docbook:dtd:xml:4.1.2",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/URN"
    },
    {
      "name": "Usenet",
      "desc": "Usenet is an internet discussion system where each post is duplicated on many servers. The equivalent of Internet forums in its day, Usenet functioned like a bulletin board system.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Usenet"
    },
    {
      "name": "User agent",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/User_agent"
    },
    {
      "name": "UTF-8",
      "desc": "UTF-8 (UCS Transformation Format 8) is the World Wide Web's most common character encoding. Each character is represented by one to four bytes. UTF-8 is backward-compatible with ASCII and can represent any standard Unicode character.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/UTF-8"
    },
    {
      "name": "UX",
      "desc": "UX is an acronym that stands for User eXperience. It is the study of the interaction between users and a system. Its goal is to make a system easy to interact with from the user's point of view.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/UX"
    },
    {
      "name": "Validator",
      "desc": "A validator is a program that checks for syntax errors in code. Validators can be created for any format or language, but in our context we speak of tools that check HTML, CSS, and XML.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Validator"
    },
    {
      "name": "Value",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Value"
    },
    {
      "name": "Variable",
      "desc": "A variable is a named location for storing a value. That way an unpredictable value can be accessed through a predetermined name.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Variable"
    },
    {
      "name": "Vendor Prefix",
      "desc": "Browser vendors sometimes add prefixes to experimental or nonstandard CSS properties, so developers can experiment but changes in browser behavior don't break the code during the standards process. Developers should wait to include the unprefixed property until browser behavior is standardized.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix"
    },
    {
      "name": "Viewport",
      "desc": "A viewport represents a polygonal (normally rectangular) area in computer graphics that is currently being viewed. In web browser terms, it refers to the part of the browser that is taken up by visible website content.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Viewport"
    },
    {
      "name": "VoIP",
      "desc": "VoIP (Voice over Internet Protocol) is a technology used to transmit voice messages over IP (Internet Protocol) networks. Common VoIP packages include Skype, Msn Messenger, Yahoo and many more. Everything transferrred through VoIP is digital. It is also known as IP telephony, or broadband telephony. The main reason for using VoIP technology is because of cost.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/VoIP"
    },
    {
      "name": "W3C",
      "desc": "The World Wide Web Consortium (W3C) is an international body that maintains Web-related rules and frameworks.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/W3C"
    },
    {
      "name": "WAI",
      "desc": "WAI or Web Accessibility Initiative is an effort by the World Wide Web Consortium (W3C) to improve accessibility for people with various challenges, who may need a nonstandard browser or devices.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WAI"
    },
    {
      "name": "WCAG",
      "desc": "Web Content Accessibility Guidelines (WCAG) are a recommandation published by the Web Accessibility Initiative group at the W3C. They outline a set of guidelines for making content accessible primarily for people with disabilities but also for limited-resource devices such as mobile phones.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WCAG"
    },
    {
      "name": "Web standards",
      "desc": "Web standards are rules established by international standards bodies and defining how how the Web works (and sometimes controlling the Internet as well).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Web_standards"
    },
    {
      "name": "WebDAV",
      "desc": "WebDAV  (Web Distributed Authoring and Versioning) is an HTTP Extension that lets web developers update their content remotely from a client.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebDAV"
    },
    {
      "name": "WebGL",
      "desc": "WebGL (Web Graphics Library) is a JavaScript API that draws interactive 2D and 3D graphics.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebGL"
    },
    {
      "name": "WebIDL",
      "desc": "WebIDL is a language for building interfaces in Web applications.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebIDL"
    },
    {
      "name": "WebKit",
      "desc": "WebKit is a framework that displays properly-formatted webpages based on their markup. Apple Safari depends on WebKit, and so do many mobile browsers (since WebKit is highly portable and customizable).",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebKit"
    },
    {
      "name": "WebM",
      "desc": "WebM is royatly free and is an open web video format natively supported in Mozilla Firefox.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/webm"
    },
    {
      "name": "WebP",
      "desc": "WebP is a lossless and lossy compression image format developed by Google.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/webp"
    },
    {
      "name": "WebRTC",
      "desc": "WebRTC (Web Real-Time Communication) is an API that can be used by video-chat, voice-calling, and P2P-file-sharing Web apps.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebRTC"
    },
    {
      "name": "WebSockets",
      "desc": "WebSocket is a protocol that allows for a persistent TCP connection between server and client so they can exchange data at any time.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WebSockets"
    },
    {
      "name": "WHATWG",
      "desc": "The WHATWG (Web Hypertext Application Technology Working Group) is an organization that maintains and develops HTML and APIs for Web applications. Former employees of Apple, Mozilla, and Opera established WHATWG in 2004.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/WHATWG"
    },
    {
      "name": "World Wide Web",
      "desc": "The World Wide Web—commonly referred to as WWW, W3, or the Web—is a system of interconnected public webpages accessible through the Internet. The Web is not the same as the Internet: the Web is one of many applications built on top of the Internet.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/World_Wide_Web"
    },
    {
      "name": "Wrapper",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/Wrapper"
    },
    {
      "name": "XForm",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XForm"
    },
    {
      "name": "XHTML",
      "desc": "Technical review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XHTML"
    },
    {
      "name": "XInclude",
      "desc": "XML Inclusions (XInclude) is a W3C Recommendation to allow inclusion of XML more different sources in a more convenient fashion than XML external entities. When used in conjunction with XPointer (Firefox supports a subset of it, and is used in the code sample below), XInclude can also target just specific portions of a document for inclusion. Firefox does not support it natively, but the following function aims to allow its use with documents passed into it.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XInclude"
    },
    {
      "name": "XLink",
      "desc": "XLink is a W3C standard which is used to describe links between XML and XML or other documents. Some its behaviors are left to the implementation to determine how to handle.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XLink"
    },
    {
      "name": "XML",
      "desc": "eXtensible Markup Language (XML) is a generic markup language specified by the W3C. The information technology (IT) industry uses many languages based on XML as data-description languages.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XML"
    },
    {
      "name": "XPath",
      "desc": "XPath is a query language that can access sections and content in an XML document.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XPath"
    },
    {
      "name": "XQuery",
      "desc": "Editorial review completed.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XQuery"
    },
    {
      "name": "XSLT",
      "desc": "eXtensible Stylesheet Language Transformations (XSLT) is a declarative language used to convert XML documents into other XML documents, HTML, PDF, plain text, and so on.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/XSLT"
    },
    {
      "name": "404",
      "desc": "A 404 is a Standard Response Code meaning that the server cannot find the requested resource.",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/404"
    },
    {
      "name": "502",
      "desc": "An HTTP error code meaning \"Bad Gateway\".",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/502"
    },
    {
      "name": "Edit",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary$edit#Contribute_to_the_glossary"
    },
    {
      "name": "writing new entries",
      "href": "https://developer.mozilla.org/en-US/docs/MDN/Contribute/Howto/Write_a_new_entry_in_the_Glossary"
    },
    {
      "name": "Add a new entry to the glossary",
      "href": "https://developer.mozilla.org/en-US/docs/new?parent=4391"
    },
    {
      "name": "character encoding",
      "desc": "The definition of that term (character encoding) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/character_encoding"
    },
    {
      "name": "condition",
      "desc": "The definition of that term (condition) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/condition"
    },
    {
      "name": "DMZ",
      "desc": "The definition of that term (DMZ) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/dmz"
    },
    {
      "name": "event",
      "desc": "The definition of that term (event) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/event"
    },
    {
      "name": "HMAC",
      "desc": "The definition of that term (HMAC) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/hmac"
    },
    {
      "name": "modem",
      "desc": "The definition of that term (modem) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/modem"
    },
    {
      "name": "OVP",
      "desc": "The definition of that term (OVP) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ovp"
    },
    {
      "name": "TTL",
      "desc": "The definition of that term (TTL) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/ttl"
    },
    {
      "name": "Unicode",
      "desc": "The definition of that term (Unicode) has not been written yet; please consider contributing it!",
      "href": "https://developer.mozilla.org/en-US/docs/Glossary/unicode"
    },
    {
      "name": "the glossary documentation status page",
      "href": "https://developer.mozilla.org/en-US/docs/MDN/Doc_status/Glossary"
    },
    {
      "name": "Mailing list",
      "href": "https://lists.mozilla.org/listinfo/dev-mdc"
    },
    {
      "name": "Google Group",
      "href": "http://groups.google.com/group/mozilla.dev.mdc"
    },
    {
      "name": "RSS feed",
      "href": "http://groups.google.com/group/mozilla.dev.mdc/feeds"
    },
    {
      "name": "#mdn",
      "href": "irc://irc.mozilla.org/mdn"
    },
    {
      "name": "learn more",
      "href": "https://wiki.mozilla.org/IRC"
    },
    {
      "name": "Every 2 weeks Wednesday in IRC",
      "href": "https://wiki.mozilla.org/MDN/Meetings/Community"
    },
    {
      "name": "See the doc status for more information",
      "href": "https://developer.mozilla.org/en-US/docs/MDN/Doc_status/Glossary"
    },
    {
      "neg-lookbehind": {
        "description": "Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.",
        "foo(?!bar)": "foobar [foo]bazz",
        "neg-lookahead": "(?!...)"
      },
      "neg-lookahead": {
        "(?<!not )foo/": "not foo but [foo]",
        "description": "Ensures that the given pattern would not match and end at the current position in the expression. Does not consume characters.",
        "neg-lookbehinid": "(?!...)"
      },
      "pos-look-behind": {
        "(?<=foo)bar": "foo[bar] foobaz",
        "description": "Ensures that the given pattern will match, ending at the current position in the expression. Does not consume any characters.",
        "pos-lookbehind": "(?<=...)"
      },
      "pos-look-ahead": {
        "description": "Matches the given subpattern without consuming characters",
        "foo(?=bar)": "[foo]bar foobazz",
        "positive_lookahead": "(?=...)"
      }
    },
    {
      "tag": "Summary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Summary"
    },
    {
      "tag": "Syntax",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Syntax"
    },
    {
      "tag": "Example",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Example"
    },
    {
      "tag": "Specification",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document#Specification"
    },
    {
      "tag": "applicationCache",
      "text": "Returns a reference to the application cache object for the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache"
    },
    {
      "tag": "caches",
      "text": "The Window.caches read-only property returns the CacheStorage object associated with the current origin. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/caches"
    },
    {
      "tag": "closed",
      "text": "This read-only property indicates whether the referenced window is closed or not.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/closed"
    },
    {
      "tag": "controllers",
      "text": "Returns the XUL controllers of the chrome window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers"
    },
    {
      "tag": "crypto",
      "text": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto"
    },
    {
      "tag": "devicePixelRatio",
      "text": "The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio"
    },
    {
      "tag": "dialogArguments",
      "text": "The dialogArguments property returns the parameters that were passed into the window.showModalDialog() method. This lets you determine what parameters were specified when the modal dialog was created.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/dialogArguments"
    },
    {
      "tag": "frameElement",
      "text": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement"
    },
    {
      "tag": "frames",
      "text": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frames"
    },
    {
      "tag": "fullScreen",
      "text": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen"
    },
    {
      "tag": "history",
      "text": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/history"
    },
    {
      "tag": "indexedDB",
      "text": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB"
    },
    {
      "tag": "innerHeight",
      "text": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight"
    },
    {
      "tag": "innerWidth",
      "text": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth"
    },
    {
      "tag": "isSecureContext",
      "text": "The Window.isSecureContext read-only property indicates whether a context is capable of using features that require secure contexts.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext"
    },
    {
      "tag": "length",
      "text": "Returns the number of frames (either <frame> or <iframe> elements) in the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/length"
    },
    {
      "tag": "localStorage",
      "text": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends—that is, when the browser is closed.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    },
    {
      "tag": "location",
      "text": "The Window.location read-only property returns a Location object with information about the current location of the document.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/location"
    },
    {
      "tag": "locationbar",
      "text": "Returns the locationbar object, whose visibility can be checked.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar"
    },
    {
      "tag": "menubar",
      "text": "Returns the menubar object, whose visibility can be checked.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar"
    },
    {
      "tag": "messageManager",
      "text": "Returns the message manager object for this window. See The message manager for details.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/messageManager"
    },
    {
      "tag": "mozAnimationStartTime",
      "text": "Returns the time, in milliseconds since the epoch, at which animations started now should be considered to have started. This value should be used instead of, for example, Date.now(), because this value will be the same for all animations started in this window during this refresh interval, allowing them to remain in sync with one another.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozAnimationStartTime"
    },
    {
      "tag": "mozInnerScreenX",
      "text": "Gets the X coordinate of the top-left corner of the window's viewport, in screen coordinates.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX"
    },
    {
      "tag": "mozInnerScreenY",
      "text": "Gets the Y coordinate of the top-left corner of the window's viewport, in screen coordinates.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY"
    },
    {
      "tag": "mozPaintCount",
      "text": "Returns the number of times the current document has been painted to the screen in this window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozPaintCount"
    },
    {
      "tag": "name",
      "text": "Gets/sets the name of the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/name"
    },
    {
      "tag": "navigator",
      "text": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator"
    },
    {
      "tag": "onabort",
      "text": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort"
    },
    {
      "tag": "onafterprint",
      "text": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint"
    },
    {
      "tag": "onbeforeprint",
      "text": "The onbeforeprint property sets and returns the onbeforeprint event handler code for the current window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint"
    },
    {
      "tag": "onbeforeunload",
      "text": "The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload"
    },
    {
      "tag": "onblur",
      "text": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur"
    },
    {
      "tag": "onchange",
      "text": "The onchange property sets and returns the event handler for the change event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange"
    },
    {
      "tag": "onclick",
      "text": "The onclick property returns the click event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick"
    },
    {
      "tag": "onclose",
      "text": "An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose"
    },
    {
      "tag": "oncontextmenu",
      "text": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu"
    },
    {
      "tag": "ondblclick",
      "text": "The ondblclick property returns the onDblClick event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick"
    },
    {
      "tag": "ondevicelight",
      "text": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight"
    },
    {
      "tag": "ondevicemotion",
      "text": "An event handler for the devicemotion events sent to the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion"
    },
    {
      "tag": "ondeviceorientation",
      "text": "An event handler for the deviceorientation events sent to the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation"
    },
    {
      "tag": "ondeviceproximity",
      "text": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceproximity"
    },
    {
      "tag": "onerror",
      "text": "An event handler for the error event. Error events are fired at various targets for different kinds of errors:",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror"
    },
    {
      "tag": "onfocus",
      "text": "The onfocus property returns the onFocus event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus"
    },
    {
      "tag": "onhashchange",
      "text": "The hashchange event fires when a window's hash changes (see location.hash).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange"
    },
    {
      "tag": "oninput",
      "text": "An event handler for the input event on the window. The input event is raised when an <input> element value changes.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput"
    },
    {
      "tag": "onkeydown",
      "text": "The onkeydown property returns the onKeyDown event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown"
    },
    {
      "tag": "onkeypress",
      "text": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress"
    },
    {
      "tag": "onkeyup",
      "text": "The onkeyup property returns the onKeyUp event handler code for the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup"
    },
    {
      "tag": "onlanguagechange",
      "text": "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange"
    },
    {
      "tag": "onload",
      "text": "An event handler for the load event of a window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload"
    },
    {
      "tag": "onmousedown",
      "text": "The onmousedown property returns the onmousedown event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown"
    },
    {
      "tag": "onmousemove",
      "text": "The onmousemove property returns the mousemove event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove"
    },
    {
      "tag": "onmouseout",
      "text": "The onmouseout property returns the onMouseOut event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout"
    },
    {
      "tag": "onmouseover",
      "text": "The onmouseover property returns the onMouseOver event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover"
    },
    {
      "tag": "onmouseup",
      "text": "The onmouseup property returns the onMouseUp event handler code on the current element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup"
    },
    {
      "tag": "onmozbeforepaint",
      "text": "An event handler for the MozBeforePaint event. This is used in concert with the window.mozRequestAnimationFrame() method to perform smooth, synchronized animations from JavaScript code.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint"
    },
    {
      "tag": "onpaint",
      "text": "An event handler for the paint event on the window. Not working in Gecko-based applications currently, see Notes section!",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onpaint"
    },
    {
      "tag": "onpointercancel",
      "text": "A global event handler for the pointercancel event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel"
    },
    {
      "tag": "onpointerdown",
      "text": "A global event handler for the pointerdown event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown"
    },
    {
      "tag": "onpointerenter",
      "text": "A global event handler for the pointerenter event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter"
    },
    {
      "tag": "onpointerleave",
      "text": "A global event handler for the pointerleave event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave"
    },
    {
      "tag": "onpointermove",
      "text": "A global event handler for the pointermove event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove"
    },
    {
      "tag": "onpointerout",
      "text": "A global event handler for the pointerout event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout"
    },
    {
      "tag": "onpointerover",
      "text": "A global event handler for the pointerover event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover"
    },
    {
      "tag": "onpointerup",
      "text": "A global event handler for the pointerup event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup"
    },
    {
      "tag": "onpopstate",
      "text": "An event handler for the popstate event on the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate"
    },
    {
      "tag": "onreset",
      "text": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset"
    },
    {
      "tag": "onresize",
      "text": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize"
    },
    {
      "tag": "onscroll",
      "text": "An event handler for scroll events on element.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll"
    },
    {
      "tag": "onselect",
      "text": "An event handler for the select event on the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect"
    },
    {
      "tag": "onselectstart",
      "text": "The GlobalEventHandlers.onselectstart property represents the event handler that is called when a selectstart event reaches this object.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart"
    },
    {
      "tag": "onstorage",
      "text": "The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage"
    },
    {
      "tag": "onsubmit",
      "text": "An event handler for the submit event on the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit"
    },
    {
      "tag": "ontouchcancel",
      "text": "A global event handler for the touchcancel event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel"
    },
    {
      "tag": "ontouchmove",
      "text": "A global event handler for the touchmove event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHanders.ontouchmove"
    },
    {
      "tag": "ontouchstart",
      "text": "A global event handler for the touchstart event.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart"
    },
    {
      "tag": "onunload",
      "text": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload"
    },
    {
      "tag": "onuserproximity",
      "text": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onuserproximity"
    },
    {
      "tag": "opener",
      "text": "Returns a reference to the window that opened this current window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/opener"
    },
    {
      "tag": "outerHeight",
      "text": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight"
    },
    {
      "tag": "outerWidth",
      "text": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth"
    },
    {
      "tag": "parent",
      "text": "A reference to the parent of the current window or subframe.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/parent"
    },
    {
      "tag": "performance",
      "text": "The Web Performance API allows web pages access to certain functions for measuring the performance of web pages and web applications, including the Navigation Timing API and high-resolution time data.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/performance"
    },
    {
      "tag": "personalbar",
      "text": "Returns the personalbar object, whose visibility can be toggled in the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar"
    },
    {
      "tag": "screen",
      "text": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screen"
    },
    {
      "tag": "screenX",
      "text": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX"
    },
    {
      "tag": "screenY",
      "text": "The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY"
    },
    {
      "tag": "scrollbars",
      "text": "Returns the scrollbars object, whose visibility can be checked.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars"
    },
    {
      "tag": "scrollMaxX",
      "text": "Returns the maximum number of pixels that the document can be scrolled horizontally.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX"
    },
    {
      "tag": "scrollMaxY",
      "text": "Returns the maximum number of pixels that the document can be scrolled vertically.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY"
    },
    {
      "tag": "scrollX",
      "text": "Returns the number of pixels that the document has already been scrolled horizontally.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX"
    },
    {
      "tag": "scrollY",
      "text": "Returns the number of pixels that the document has already been scrolled vertically.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY"
    },
    {
      "tag": "self",
      "text": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/self"
    },
    {
      "tag": "sessionStorage",
      "text": "The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"
    },
    {
      "tag": "sidebar",
      "text": "Returns a sidebar object, which contains several methods for registering add-ons with browser.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sidebar"
    },
    {
      "tag": "speechSynthesis",
      "text": "The speechSynthesis read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis"
    },
    {
      "tag": "status",
      "text": "Sets the text in the status bar at the bottom of the browser or returns the previously set text.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/status"
    },
    {
      "tag": "statusbar",
      "text": "Returns the statusbar object, whose visibility can be toggled in the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar"
    },
    {
      "tag": "toolbar",
      "text": "Returns the toolbar object, whose visibility can be toggled in the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar"
    },
    {
      "tag": "top",
      "text": "Returns a reference to the topmost window in the window hierarchy.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/top"
    },
    {
      "tag": "URL",
      "text": "The Window.URL property returns an object that provides static methods used for creating and managing object URLs. It can also be called as a constructor to construct URL objects.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/URL"
    },
    {
      "tag": "window",
      "text": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/window"
    },
    {
      "tag": "alert()",
      "text": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/alert"
    },
    {
      "tag": "atob()",
      "text": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob"
    },
    {
      "tag": "back()",
      "text": "Returns the window to the previous item in the history. This was a Gecko-specific method. Use the standard history.back method instead.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/back"
    },
    {
      "tag": "blur()",
      "text": "Shifts focus away from the window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur"
    },
    {
      "tag": "btoa()",
      "text": "Creates a base-64 encoded ASCII string from a \"string\" of binary data.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa"
    },
    {
      "tag": "cancelAnimationFrame()",
      "text": "Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame"
    },
    {
      "tag": "cancelIdleCallback",
      "text": "The Window.cancelIdleCallback() enables you to cancel a callback previously scheduled with Window.requestIdleCallback.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback"
    },
    {
      "tag": "captureEvents()",
      "text": "Registers the window to capture all events of the specified type.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents"
    },
    {
      "tag": "clearImmediate()",
      "text": "This method clears the action specified by window.setImmediate.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate"
    },
    {
      "tag": "clearInterval()",
      "text": "Cancels repeated action which was set up using setInterval.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval"
    },
    {
      "tag": "clearTimeout()",
      "text": "Clears the delay set by WindowTimers.setTimeout().",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout"
    },
    {
      "tag": "close()",
      "text": "The Window.close() method closes the current window, or the window on which it was called.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/close"
    },
    {
      "tag": "confirm()",
      "text": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm"
    },
    {
      "tag": "convertPointFromNodeToPage()",
      "text": "The Window.convertPointFromNodeToPage() method converts a Point object from coordinates based on the given CSS node to coordinates based on the page.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromNodeToPage"
    },
    {
      "tag": "createImageBitmap()",
      "text": "The createImageBitmap method accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap"
    },
    {
      "tag": "dump()",
      "text": "Prints messages to the (native) console.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/dump"
    },
    {
      "tag": "event",
      "text": "window.event is a proprietary Microsoft Internet Explorer property which is only available while a DOM event handler is being called. Its value is the Event object currently being handled.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/event"
    },
    {
      "tag": "fetch()",
      "text": "The fetch() method of the GlobalFetch interface starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch"
    },
    {
      "tag": "find()",
      "text": "Finds a string in a window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/find"
    },
    {
      "tag": "focus()",
      "text": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus"
    },
    {
      "tag": "forward()",
      "text": "Moves the window one document forward in the history. This was a Gecko-specific method. Use the standard history.forward method instead.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/forward"
    },
    {
      "tag": "getAttention()",
      "text": "Attempts to get the user's attention. How this happens varies based on OS and window manager.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getAttention"
    },
    {
      "tag": "getComputedStyle()",
      "text": "The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle"
    },
    {
      "tag": "getDefaultComputedStyle()",
      "text": "getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling.  That is, only user-agent and user styles are taken into account.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/window/getDefaultComputedStyle"
    },
    {
      "tag": "getSelection()",
      "text": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection"
    },
    {
      "tag": "home()",
      "text": "Returns the window to the home page.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/home"
    },
    {
      "tag": "importDialog()",
      "text": "Because opening windows on mobile isn't necessarily appropriate, the Firefox Mobile team designed the importDialog() method to replace window.openDialog(). Instead of opening a new window, it merges the specified XUL dialog into the main window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/importDialog"
    },
    {
      "tag": "matchMedia()",
      "text": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"
    },
    {
      "tag": "minimize()",
      "text": "Sets a window to minimized state (a way to undo it programatically is by calling window.moveTo()).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/minimize"
    },
    {
      "tag": "moveBy()",
      "text": "Moves the current window by a specified amount.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy"
    },
    {
      "tag": "moveTo()",
      "text": "Moves the window to the specified coordinates.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo"
    },
    {
      "tag": "open()",
      "text": "Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/open"
    },
    {
      "tag": "openDialog()",
      "text": "window.openDialog() is an extension to window.open(). It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog"
    },
    {
      "tag": "postMessage()",
      "text": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"
    },
    {
      "tag": "print()",
      "text": "Opens the Print Dialog to print the current document.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/print"
    },
    {
      "tag": "prompt()",
      "text": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"
    },
    {
      "tag": "releaseEvents()",
      "text": "Releases the window from trapping events of a specific type.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents"
    },
    {
      "tag": "requestAnimationFrame()",
      "text": "You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs or in hidden <iframe>s in order to improve performance and battery life.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"
    },
    {
      "tag": "requestIdleCallback",
      "text": "The Window.requestIdleCallback() method enables the scheduling of tasks during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback"
    },
    {
      "tag": "resizeBy()",
      "text": "Resizes the current window by a certain amount.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy"
    },
    {
      "tag": "resizeTo()",
      "text": "Dynamically resizes window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo"
    },
    {
      "tag": "restore()",
      "text": "This method is currently not working, but you can use:",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/restore"
    },
    {
      "tag": "scroll()",
      "text": "Scrolls the window to a particular place in the document.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll"
    },
    {
      "tag": "scrollBy()",
      "text": "Scrolls the document in the window by the given amount.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy"
    },
    {
      "tag": "scrollByLines()",
      "text": "Scrolls the document by the given number of lines.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines"
    },
    {
      "tag": "scrollByPages()",
      "text": "Scrolls the current document by the specified number of pages.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages"
    },
    {
      "tag": "scrollTo()",
      "text": "Scrolls to a particular set of coordinates in the document.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo"
    },
    {
      "tag": "setCursor()",
      "text": "Changes the cursor for the current window.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setCursor"
    },
    {
      "tag": "setImmediate()",
      "text": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate"
    },
    {
      "tag": "setInterval()",
      "text": "Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. Returns an intervalID.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval"
    },
    {
      "tag": "setTimeout()",
      "text": "Calls a function or executes a code snippet after a specified delay.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout"
    },
    {
      "tag": "showModalDialog()",
      "text": "The Window.showModalDialog() creates and displays a modal dialog box containing a specified HTML document.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog"
    },
    {
      "tag": "sizeToContent()",
      "text": "The Window.sizeToContent() method sizes the window according to its content. In order for it to work, the DOM content should be loaded when this function is called, for example once the DOMContentLoaded event has been thrown.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent"
    },
    {
      "tag": "stop()",
      "text": "This method stops window loading.",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/stop"
    },
    {
      "tag": "updateCommands()",
      "text": "Updates the state of commands of the current chrome window (UI).",
      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands"
    }

]
